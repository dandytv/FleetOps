using System;
using System.Collections.Generic;
using System.Collections;
using System.Configuration;
using System.Linq;
using System.Web;
using Utilities.DAL;
using System.Data;
using System.Data.SqlClient;
using System.Web.Mvc;
using FleetOps.Models;
using FleetOps.ViewModel;
using ModelSector;
using CCMS.ModelSector;
using System.IO;
using System.Threading.Tasks;
using FleetSys.Models;
using System.Net;
namespace FleetOps.Models
{
    public class CardAcctSignUpOps : BaseClass
    {
        public string ApplId { get; set; }
        public string EntityId { get; set; }
        public string DocPath { get; set; }

        #region "Application General Info"
        public async Task<List<AcctSignUp>> GetAcctSignUpList(string _ApplicationId, string page)
        {
            var objDataEngine = new FleetDataEngine(AccessMode.CustomerService, DBType.Maint);
            try
            {
                await objDataEngine.InitiateConnectionAsync();
                SqlParameter[] Parameters = new SqlParameter[3];
                Parameters[0] = new SqlParameter("@IssNo", GetIssNo);
                Parameters[1] = new SqlParameter("@ApplId", DBNull.Value);
                Parameters[2] = new SqlParameter("@Page", DBNull.Value);
                var execResult = await objDataEngine.ExecuteCommandAsync("WebApplListSelect", CommandType.StoredProcedure, Parameters);
                var _AcctSignUpList = new List<AcctSignUp>();
                while (execResult.Read())
                {
                    _AcctSignUpList.Add(new AcctSignUp
                    {
                        ApplicationId = Convert.ToString(execResult["ApplId"]),
                        AcctNo = Convert.ToString(execResult["Account No"]),
                        CompanyName = Convert.ToString(execResult["Company Name"]),
                        //CorporateAcct = BaseClass.WebGetRefLib("CorpCd"),
                        SelectedCorporateAcct = Convert.ToString(execResult["Corporate Account"]),
                        ApplicationRef = Convert.ToString(execResult["ApplRef"]),
                        CreditLimit = BaseClass.ConverterDecimal(execResult["Credit Limit"]),
                        ShownCreditLimit = ConverterDecimal(execResult["Credit Limit"]),
                        PendingReasons = Convert.ToString(execResult["Pending Reason"]),
                        ApprovedDate = DateConverter(execResult["Approved Date"]),
                        ReceiveDate = DateConverter(execResult["Received Date"]),
                        RejectedDate = DateConverter(execResult["Rejected Date"]),
                        AppvCd = Convert.ToString(execResult["AppvCd"]),
                        SelectedLangId = Convert.ToString(execResult["Preferred Language"]),
                        website = Convert.ToString(execResult["Website"]),
                        // SelectedCostCentre=Convert.ToString(execResult["CostCentre"]),
                        CreationDatenUserid = new CreationDatenUserId
                        {
                            CreationDate = DateConverter(execResult["Creation Date"]),
                            UserId = Convert.ToString(execResult["User Id"]),
                        }
                    });
                };

                return _AcctSignUpList;
            }
            finally
            {
                objDataEngine.CloseConnection();
            }
        }
        public async Task<List<Milestone>> WebSPOMilestoneListSelect(Milestone _milestone)
        {
            var objDataEngine = new FleetDataEngine(AccessMode.CustomerService, DBType.Maint);
            try
            {
                await objDataEngine.InitiateConnectionAsync();
                SqlParameter[] Parameters = new SqlParameter[2];
                Parameters[0] = new SqlParameter("@Ind", _milestone.selectedStatus);
                Parameters[1] = new SqlParameter("@AcctNo", DBNull.Value);
                var execResult = await objDataEngine.ExecuteCommandAsync("WebSPOMilestoneListSelect", CommandType.StoredProcedure, Parameters);
                var milestoneList = new List<Milestone>();
                while (execResult.Read())
                {
                    var milestoneDetail = new Milestone();
                    milestoneDetail.RefKey = Convert.ToInt64(execResult["EventId"]);
                    milestoneDetail.Descp = Convert.ToString(execResult["ReqType"]);
                    milestoneDetail.RequestValue = Convert.ToString(execResult["ReqValue"]);
                    milestoneDetail.SelectedTaskNo = Convert.ToString(execResult["TaskNo"]);
                    milestoneDetail.TaskDescp = Convert.ToString(execResult["TaskDescp"]);
                    milestoneDetail.CardNumber = Convert.ToString(execResult["CardNo"]);
                    milestoneDetail.AcctNo = Convert.ToString(execResult["AcctNo"]);
                    milestoneDetail.CompanyName = Convert.ToString(execResult["CmpyName"]);
                    milestoneDetail.selectedStatus = Convert.ToString(execResult["Sts"]);
                    milestoneDetail.CreationDate = DateTimeConverter2(execResult["ReqDate"]);
                    milestoneDetail.LastUpdDate = Convert.ToString(execResult["LastUpdDate"]);
                    milestoneDetail.RequestBy = Convert.ToString(execResult["ReqBy"]);
                    milestoneDetail.workflowcd = Convert.ToString(execResult["WorkflowCd"]);
                    milestoneList.Add(milestoneDetail);
                }
                return milestoneList;
            }
            catch (Exception ex)
            {
                return null;
            }
            finally
            {
                objDataEngine.CloseConnection();
            }
        }
        public async Task<AcctSignUp> GetApplicationGeneralInfo(string _applid)
        {
            var objDataEngine = new FleetDataEngine(AccessMode.CustomerService, DBType.Maint);

            try
            {
                await objDataEngine.InitiateConnectionAsync();
                SqlParameter[] Parameters = new SqlParameter[2];
                Parameters[0] = new SqlParameter("@IssNo", GetIssNo);
                Parameters[1] = string.IsNullOrEmpty(_applid) ? new SqlParameter("@ApplId", DBNull.Value) : new SqlParameter("@ApplId", _applid);
                var Reader = await objDataEngine.ExecuteCommandAsync("WebApplGeneralInfoSelect", CommandType.StoredProcedure, Parameters);
                var _AcctSignUp = new AcctSignUp();
                while (Reader.Read())
                {

                    _AcctSignUp.ApplicationId = _applid;
                    _AcctSignUp.SelectedCycleNo = Convert.ToString(Reader["CycNo"]);
                    _AcctSignUp.selectedPlasticType = Convert.ToString(Reader["PlasticType"]);
                    _AcctSignUp.AcctNo = Convert.ToString(Reader["AcctNo"]);
                    _AcctSignUp.SelectedCorporateAcct = Convert.ToString(Reader["CorpCd"]);
                    _AcctSignUp.ApplicationRef = Convert.ToString(Reader["Reference"]);
                    _AcctSignUp.CompanyLegalName = Convert.ToString(Reader["CmpyLegalName"]);
                    _AcctSignUp.CompanyName = Convert.ToString(Reader["CmpyName"]);
                    _AcctSignUp.CompanyEmbName = Convert.ToString(Reader["CmpyEmbName"]);
                    _AcctSignUp.ContactPerson = Convert.ToString(Reader["ContactPerson"]);
                    _AcctSignUp.Position = Convert.ToString(Reader["Position"]);
                    _AcctSignUp.OfficePhone = Convert.ToString(Reader["OfficePhone"]);
                    _AcctSignUp.MobileNo = Convert.ToString(Reader["MobileNo"]);
                    _AcctSignUp.OfficeFax = Convert.ToString(Reader["OfficeFax"]);
                    _AcctSignUp.emailAddress = Convert.ToString(Reader["EmailAddr"]);
                    _AcctSignUp.selectedCompanyType = Convert.ToString(Reader["CmpyType"]);
                    _AcctSignUp.CompanyRegnNo = Convert.ToString(Reader["CmpyRegsNo"]);
                    _AcctSignUp.CompanyRegnDate = DateConverter(Reader["CmpyRegsDate"]);
                    _AcctSignUp.SelectedNatureOfBusiness = Convert.ToString(Reader["NatureOfBusn"]);
                    _AcctSignUp.SelectedBillingType = Convert.ToString(Reader["BillMethod"]);
                    _AcctSignUp.AuthSignatory = Convert.ToString(Reader["AuthName"]);
                    _AcctSignUp.SelectedInvoicePref = Convert.ToString(Reader["InvoicePref"]);
                    _AcctSignUp.LoyaltyCardNo = Convert.ToString(Reader["LoyaltyCardNo"]);
                    _AcctSignUp.LoyaltyFullName = Convert.ToString(Reader["LoyaltyFullName"]);
                    _AcctSignUp.LoyaltyIcNo = Convert.ToString(Reader["LoyaltyIcNo"]);
                    _AcctSignUp.LoyaltyContactNo = Convert.ToString(Reader["LoyaltyContactNo"]);
                    _AcctSignUp.LoyaltyeBusn = BaseClass.BoolConverter(Reader["LoyaltyeBusn"]);
                    _AcctSignUp.SelectedBusinessCategory = Convert.ToString(Reader["BusnCategory"]);
                    _AcctSignUp.EntityId = Convert.ToString(Reader["EntityId"]);
                    _AcctSignUp.Files = Convert.ToString(Reader["DocPath"]);
                    _AcctSignUp.InvoiceBillingIndicator = BaseClass.BoolConverter(Reader["InvBillInd"]);
                    _AcctSignUp.PymtInd = BaseClass.BoolConverter(Reader["PymtInd"]);
                    //InvoiceIndCopy = BaseClass.BoolConverter(Reader["InvoiceCopyInd"]),
                    _AcctSignUp.VehiclePerformanceReportInd = BaseClass.BoolConverter(Reader["VehPerfRptInd"]);
                    _AcctSignUp.SapNo = Convert.ToString(Reader["SAPNo"]);
                    _AcctSignUp.SelectedTaxCategory = Convert.ToString(Reader["TaxCategory"]);
                    _AcctSignUp.WithholdingTaxInd = BaseClass.BoolConverter(Reader["WithholdingTaxInd"]);
                    _AcctSignUp.SelectedLangId = Convert.ToString(Reader["LangId"]);
                    _AcctSignUp.website = Convert.ToString(Reader["Website"]);
                    _AcctSignUp.SelectedClientClass = Convert.ToString(Reader["ClientClass"]);
                    _AcctSignUp.SelectedClientType = Convert.ToString(Reader["ClientType"]);
                    //_AcctSignUp.SelectedReasonCode = Convert.ToString(Reader["ReasonCd"]);
                };
                if (string.IsNullOrEmpty(_AcctSignUp.SelectedBillingType))
                {
                    _AcctSignUp.SelectedBillingType = "F";
                }

                if (string.IsNullOrEmpty(_AcctSignUp.SelectedInvoicePref))
                {
                    _AcctSignUp.SelectedInvoicePref = "0";
                }

                _AcctSignUp.VehiclePerformanceReportInd = true;
                return _AcctSignUp;
            }
            finally
            {
                objDataEngine.CloseConnection();
            }

        }
        public async Task<MsgRetriever> SaveApplicationGeneralInfoResult(AcctSignUp acctSU)
        {
            var objDataEngine = new FleetDataEngine(AccessMode.CardHolder, DBType.Maint);

            try
            {
                await objDataEngine.InitiateConnectionAsync();
                SqlParameter[] Parameters = new SqlParameter[46];
                SqlCommand cmd = new SqlCommand();
                Parameters[0] = new SqlParameter("@IssNo", GetIssNo);
                Parameters[1] = String.IsNullOrEmpty(acctSU.selectedPlasticType) ? new SqlParameter("@PlasticType", DBNull.Value) : new SqlParameter("@PlasticType", acctSU.selectedPlasticType);
                Parameters[2] = String.IsNullOrEmpty(acctSU.SelectedCycleNo) ? new SqlParameter("@CycNo", DBNull.Value) : new SqlParameter("@CycNo", acctSU.SelectedCycleNo);
                Parameters[3] = String.IsNullOrEmpty(acctSU.ApplicationId) ? new SqlParameter("@ApplId", DBNull.Value) : new SqlParameter("@ApplId", acctSU.ApplicationId);
                Parameters[4] = String.IsNullOrEmpty(acctSU.AcctNo) ? new SqlParameter("@AcctNo", DBNull.Value) : new SqlParameter("@AcctNo", acctSU.AcctNo);
                Parameters[5] = String.IsNullOrEmpty(acctSU.SelectedCorporateAcct) ? new SqlParameter("@CorpCd", DBNull.Value) : new SqlParameter("@CorpCd", acctSU.SelectedCorporateAcct);
                Parameters[6] = String.IsNullOrEmpty(acctSU.ApplicationRef) ? new SqlParameter("@ApplRef ", DBNull.Value) : new SqlParameter("@ApplRef ", acctSU.ApplicationRef);
                Parameters[7] = String.IsNullOrEmpty(acctSU.CompanyLegalName) ? new SqlParameter("@CmpyLegalName", DBNull.Value) : new SqlParameter("@CmpyLegalName", acctSU.CompanyLegalName);
                Parameters[8] = String.IsNullOrEmpty(acctSU.CompanyName) ? new SqlParameter("@CmpyName", DBNull.Value) : new SqlParameter("@CmpyName", acctSU.CompanyName);
                Parameters[9] = String.IsNullOrEmpty(acctSU.CompanyEmbName) ? new SqlParameter("@CmpyEmbName", DBNull.Value) : new SqlParameter("@CmpyEmbName", acctSU.CompanyEmbName);
                Parameters[10] = String.IsNullOrEmpty(acctSU.ContactPerson) ? new SqlParameter("@ContactPerson", DBNull.Value) : new SqlParameter("@ContactPerson", acctSU.ContactPerson);
                Parameters[11] = String.IsNullOrEmpty(acctSU.Position) ? new SqlParameter("@Position", DBNull.Value) : new SqlParameter("@Position", acctSU.Position);
                Parameters[12] = String.IsNullOrEmpty(acctSU.SelectedBusinessCategory) ? new SqlParameter("@BusnCategory", DBNull.Value) : new SqlParameter("@BusnCategory", acctSU.SelectedBusinessCategory);
                Parameters[13] = String.IsNullOrEmpty(acctSU.OfficePhone) ? new SqlParameter("@OfficePhone", DBNull.Value) : new SqlParameter("@OfficePhone", acctSU.OfficePhone);
                Parameters[14] = String.IsNullOrEmpty(acctSU.MobileNo) ? new SqlParameter("@MobileNo", DBNull.Value) : new SqlParameter("@MobileNo", acctSU.MobileNo);

                Parameters[15] = String.IsNullOrEmpty(acctSU.OfficeFax) ? new SqlParameter("@OfficeFax", DBNull.Value) : new SqlParameter("@OfficeFax", acctSU.OfficeFax);
                Parameters[16] = String.IsNullOrEmpty(acctSU.emailAddress) ? new SqlParameter("@EmailAddr", DBNull.Value) : new SqlParameter("@EmailAddr", acctSU.emailAddress);
                Parameters[17] = String.IsNullOrEmpty(acctSU.selectedCompanyType) ? new SqlParameter("@CmpyType", DBNull.Value) : new SqlParameter("@CmpyType", acctSU.selectedCompanyType);
                Parameters[18] = String.IsNullOrEmpty(acctSU.CompanyRegnNo) ? new SqlParameter("@CmpyRegsNo", DBNull.Value) : new SqlParameter("@CmpyRegsNo", acctSU.CompanyRegnNo);
                Parameters[19] = new SqlParameter("@CmpyRegsDate", BaseClass.ConvertDatetimeDB(acctSU.CompanyRegnDate));

                Parameters[20] = String.IsNullOrEmpty(acctSU.SelectedNatureOfBusiness) ? new SqlParameter("@NatureOfBusn", DBNull.Value) : new SqlParameter("@NatureOfBusn", acctSU.SelectedNatureOfBusiness);
                Parameters[21] = String.IsNullOrEmpty(acctSU.SelectedBillingType) ? new SqlParameter("@BillingMethod", DBNull.Value) : new SqlParameter("@BillingMethod", acctSU.SelectedBillingType);
                Parameters[22] = String.IsNullOrEmpty(acctSU.SelectedInvoicePref) ? new SqlParameter("@InvoicePref", DBNull.Value) : new SqlParameter("@InvoicePref", acctSU.SelectedInvoicePref);
                Parameters[23] = new SqlParameter("@InvBillInd ", ConvertBoolDB(acctSU.InvoiceBillingIndicator));
                Parameters[24] = new SqlParameter("@PymtInd", ConvertBoolDB(acctSU.PymtInd));
                Parameters[25] = new SqlParameter("@VehPerfRptInd ", ConvertBoolDB(acctSU.VehiclePerformanceReportInd));
                Parameters[26] = String.IsNullOrEmpty(acctSU.LoyaltyCardNo) ? new SqlParameter("@LoyaltyCardNo", DBNull.Value) : new SqlParameter("@LoyaltyCardNo", acctSU.LoyaltyCardNo);
                Parameters[27] = String.IsNullOrEmpty(acctSU.LoyaltyFullName) ? new SqlParameter("@LoyaltyFullName", DBNull.Value) : new SqlParameter("@LoyaltyFullName", acctSU.LoyaltyFullName);
                Parameters[28] = String.IsNullOrEmpty(acctSU.LoyaltyIcNo) ? new SqlParameter("@LoyaltyIcNo ", DBNull.Value) : new SqlParameter("@LoyaltyIcNo ", acctSU.LoyaltyIcNo);
                Parameters[29] = String.IsNullOrEmpty(acctSU.LoyaltyContactNo) ? new SqlParameter("@LoyaltyContactNo ", DBNull.Value) : new SqlParameter("@LoyaltyContactNo ", acctSU.LoyaltyContactNo);
                Parameters[30] = new SqlParameter("@LoyaltyeBusn", ConvertBoolDB(acctSU.LoyaltyeBusn));
                Parameters[31] = String.IsNullOrEmpty(acctSU.EntityId) ? new SqlParameter("@EntityId ", DBNull.Value) : new SqlParameter("@EntityId", acctSU.EntityId);
                Parameters[32] = String.IsNullOrEmpty(acctSU.SapNo) ? new SqlParameter("@SAPNo ", DBNull.Value) : new SqlParameter("@SAPNo", acctSU.SapNo);
                Parameters[33] = new SqlParameter("@UserId", this.GetUserId);
                Parameters[34] = String.IsNullOrEmpty(acctSU.SelectedTaxCategory) ? new SqlParameter("@TaxCategory", DBNull.Value) : new SqlParameter("@TaxCategory", acctSU.SelectedTaxCategory);
                Parameters[35] = String.IsNullOrEmpty(acctSU.AuthSignatory) ? new SqlParameter("@AuthName", DBNull.Value) : new SqlParameter("@AuthName", acctSU.AuthSignatory);
                Parameters[36] = new SqlParameter("@WithHoldingTax", ConvertBoolDB(acctSU.WithholdingTaxInd));
                Parameters[37] = new SqlParameter("oApplId", SqlDbType.VarChar, 19);
                Parameters[37].Direction = ParameterDirection.Output;

                Parameters[38] = new SqlParameter("oEntityId", SqlDbType.VarChar, 19);
                Parameters[38].Direction = ParameterDirection.Output;
                Parameters[39] = new SqlParameter("@DocPath", SqlDbType.VarChar, 150);
                Parameters[39].Direction = ParameterDirection.Output;
                Parameters[40] = new SqlParameter("@RETURN_VALUE", SqlDbType.BigInt);
                Parameters[40].Direction = ParameterDirection.ReturnValue;
                Parameters[41] = String.IsNullOrEmpty(acctSU.SelectedLangId) ? new SqlParameter("@LangId", DBNull.Value) : new SqlParameter("@LangId", acctSU.SelectedLangId);
                Parameters[42] = String.IsNullOrEmpty(acctSU.website) ? new SqlParameter("@Website", DBNull.Value) : new SqlParameter("@Website", acctSU.website);
                Parameters[43] = String.IsNullOrEmpty(acctSU.SelectedClientType) ? new SqlParameter("@ClientType", DBNull.Value) : new SqlParameter("@ClientType", acctSU.SelectedClientType);
                Parameters[44] = String.IsNullOrEmpty(acctSU.SelectedClientClass) ? new SqlParameter("@ClientClass", DBNull.Value) : new SqlParameter("@ClientClass", acctSU.SelectedClientClass);
                Parameters[45] = String.IsNullOrEmpty(acctSU.SelectedReasonCode) ? new SqlParameter("@ReasonCd", DBNull.Value) : new SqlParameter("@ReasonCd", acctSU.SelectedReasonCode);

                var Cmd = await objDataEngine.ExecuteWithReturnValueAsync("WebApplGeneralInfoMaint", CommandType.StoredProcedure, Parameters);
                var Result = ConvertInt(Cmd.Parameters["@RETURN_VALUE"].Value);
                this.ApplId = Convert.ToString(Cmd.Parameters[36].Value);
                this.EntityId = Convert.ToString(Cmd.Parameters[37].Value);
                this.DocPath = Convert.ToString(Cmd.Parameters[38].Value);
                var Descp = await GetMessageCode(Result);

                if (Descp.flag == 0)
                {
                    if (Descp.desp.Contains("updated"))
                    {
                        Descp.desp = Descp.desp;
                    }
                    else
                    {
                        string tempObj = this.ApplId;
                        int temInt = Descp.flag;
                        if (this.AutoGenerateFolder(temInt, this.DocPath))
                        {
                            return Descp;
                        }
                        else
                        {
                            Descp.flag = 1;
                            Descp.desp = Descp.desp + ", Directory Creation Failed ";
                        }
                    }
                }
                else
                {
                    Descp.flag = 1;
                    Descp.desp = Descp.desp;

                }
                return Descp;
            }
            finally
            {
                objDataEngine.CloseConnection();
                
            }




        }
        #endregion

        #region"Financial Info"
        public async Task<FinancialInfoModel> GetFinancialInfo(int issNo, string acctNo)
        {
            var objDataEngine = new FleetDataEngine(AccessMode.CustomerService, DBType.Maint);


            try
            {
                await objDataEngine.InitiateConnectionAsync();
                SqlParameter[] Parameters = new SqlParameter[2];
                Parameters[0] = new SqlParameter("@IssNo", issNo);
                Parameters[1] = new SqlParameter("@AcctNo", acctNo);
                var Reader = await objDataEngine.ExecuteCommandAsync("WebAcctFinInfoSelect", CommandType.StoredProcedure, Parameters);
                while (Reader.Read())
                {
                    var _financialInfo = new FinancialInfoModel
                    {
                        AcctNo = Convert.ToString(Reader["AcctNo"]),
                        TaxId = Convert.ToString(Reader["TaxId"]),
                        LatePaymtCharge = BoolConverter(Reader["StopLPC"]),
                        SelectedDunningCd = Convert.ToString(Reader["DunCd"]),
                        CredtAllowanceFact = ConverterDecimal(Reader["AllowanceFactor"]),
                        AccrdInterest = ConverterDecimal(Reader["AccruedInterestAmt"]),
                        AccrdCrdtUsg = ConverterDecimal(Reader["AccruedCreditUsageAmt"]),
                        PromPaymtRebate = ConverterDecimal(Reader["PromptPaymtRebate"]),
                        PPRGracePeriod = ConvertInt(Reader["PromptPaymtRebateTerms"]),
                        pprExpiry = DateConverter(Reader["PromptPaymtRebateExpiry"]),
                        LitreLimitPerTxn = ConverterDecimal(Reader["LitLimitPerTxn"]),
                        AmtLimitPerTxn = ConverterDecimal(Reader["AmtLimitPerTxn"]),
                        SelectedCycNo = Convert.ToString(Reader["CycNo"]),
                        SelectedStmtType = Convert.ToString(Reader["StmtType"]),
                        SelectedStmtInd = Convert.ToString(Reader["StmtInd"]),
                        StmtDate = DateConverter(Reader["StmtDate"]),
                        SelectedPaymtMethod = Convert.ToString(Reader["PaymtMethod"]),
                        PaymtTerm = ConvertInt(Reader["PymtTerms"]),
                        GracePeriod = ConvertInt(Reader["GracePeriod"]),
                        DirectDebitInd = BoolConverter(Reader["DirectDebitInd"]),
                        SelectedBankAcctType = Convert.ToString(Reader["BankAcctType"]),
                        selectedBankName = Convert.ToString(Reader["BankName"]),
                        BankAcctNo = Convert.ToString(Reader["BankAcctNo"]),
                        BankBranchCD = Convert.ToString(Reader["BankBranchCd"]),
                        PayeeCd = Convert.ToString(Reader["PayeeCd"]),
                        SelectedTaxCategory = Convert.ToString(Reader["TaxCategory"]),
                        WriteoffDate = DateConverter(Reader["WriteOffDate"]),
                        LastPaymtType = Convert.ToString(Reader["LastPaymtRecvType"]),
                        LastPaymtReceived = ConverterDecimal(Reader["LastPaymtRecvAmt"]),
                        LastPaymtDate = DateConverter(Reader["LastPaymtDate"]),
                        InvoiceBillingIndicator = BoolConverter(Reader["InvBillInd"]),
                        PayAdviceBillingIndicator = BoolConverter(Reader["PymtInd"]),
                        VehiclePerformanceReportInd = BoolConverter(Reader["VehPerfRptInd"]),
                        SelectedAssessmentType = Convert.ToString(Reader["SecuredCreditLine"]),
                        SelectedRiskCategory = Convert.ToString(Reader["RiskCategory"]),
                        CreditLimit = ConverterDecimal(Reader["CreditLimit"]),
                        WithholdingTaxInd = BoolConverter(Reader["Ewt"]),
                    };
                    return _financialInfo;
                }
                return new FinancialInfoModel();
            }
            finally
            {
                objDataEngine.CloseConnection();
                
            }
        }
        //public MsgRetriever SaveFinancialInfoResult(FinancialInfoModel _financialInfo, string acctNo)
        //{
        //    var objDataEngine = new FleetDataEngine(AccessMode.CardHolder, DBType.Maint);
        //    objDataEngine.InitiateConnection();
        //    SqlParameter[] Parameters = new SqlParameter[30];
        //    SqlCommand cmd = new SqlCommand();
        //    Parameters[0] = new SqlParameter("@IssNo", GetIssNo);
        //    Parameters[1] = new SqlParameter("@AcctNo", String.IsNullOrEmpty(acctNo) ? "" : acctNo);
        //    Parameters[2] = String.IsNullOrEmpty(_financialInfo.TaxId) ? new SqlParameter("@TaxId", DBNull.Value) : new SqlParameter("@TaxId", _financialInfo.TaxId);
        //    Parameters[3] = new SqlParameter("@LatePaymtInd", _financialInfo.LatePaymtCharge);
        //    Parameters[4] = new SqlParameter("@DunCd", ConvertIntToDb(_financialInfo.SelectedDunningCd));
        //    Parameters[5] = new SqlParameter("@AllowanceFactor", ConvertDecimalToDb(_financialInfo.CredtAllowanceFact));
        //    Parameters[6] = new SqlParameter("@AccruedInterestAmt", ConvertDecimalToDb(_financialInfo.AccrdInterest));
        //    Parameters[7] = new SqlParameter("@AccruedCreditUsageAmt", ConvertDecimalToDb(_financialInfo.AccrdCrdtUsg));
        //    Parameters[8] = new SqlParameter("@PromptPaymtRebate", ConvertDecimalToDb(_financialInfo.PromPaymtRebate));
        //    Parameters[9] = new SqlParameter("@PromptPaymtRebateTerms", ConvertIntToDb(_financialInfo.PPRGracePeriod));
        //    Parameters[10] = new SqlParameter("@LitLimitPerTxn", ConvertDecimalToDb(_financialInfo.LitreLimitPerTxn));
        //    Parameters[11] = new SqlParameter("@AmtLimitPerTxn", ConvertDecimalToDb(_financialInfo.AmtLimitPerTxn));
        //    Parameters[12] = new SqlParameter("@CycNo", ConvertIntToDb(_financialInfo.SelectedCycNo));
        //    Parameters[13] = String.IsNullOrEmpty(_financialInfo.SelectedStmtType) ? new SqlParameter("@StmtType", DBNull.Value) : new SqlParameter("@StmtType", _financialInfo.SelectedStmtType);
        //    Parameters[14] = String.IsNullOrEmpty(_financialInfo.SelectedStmtInd) ? new SqlParameter("@StmtInd", DBNull.Value) : new SqlParameter("@StmtInd", _financialInfo.SelectedStmtInd);
        //    Parameters[15] = new SqlParameter("@StmtDate", DateConverterDB(_financialInfo.StmtDate));
        //    Parameters[16] = String.IsNullOrEmpty(_financialInfo.SelectedPaymtMethod) ? new SqlParameter("@PaymtMethod", DBNull.Value) : new SqlParameter("@PaymtMethod", _financialInfo.SelectedPaymtMethod);
        //    Parameters[17] = String.IsNullOrEmpty(_financialInfo.SelectedPaymtMethod) ? new SqlParameter("@PaymtTerms", DBNull.Value) : new SqlParameter("@PaymtTerms", _financialInfo.SelectedPaymtMethod);
        //    Parameters[18] = new SqlParameter("@GracePeriod", ConvertIntToDb(_financialInfo.GracePeriod));
        //    Parameters[19] = new SqlParameter("@DirectDebitInd", ConvertBoolDB(_financialInfo.DirectDebitInd));
        //    Parameters[20] = String.IsNullOrEmpty(_financialInfo.SelectedBankAcctType) ? new SqlParameter("@BankAcctType", DBNull.Value) : new SqlParameter("@BankAcctType", _financialInfo.SelectedBankAcctType);
        //    Parameters[21] = String.IsNullOrEmpty(_financialInfo.BankName) ? new SqlParameter("@BankName", DBNull.Value) : new SqlParameter("@BankName", _financialInfo.BankName);
        //    Parameters[22] = String.IsNullOrEmpty(_financialInfo.BankAcctNo) ? new SqlParameter("@BankAcctNo", DBNull.Value) : new SqlParameter("@BankAcctNo", _financialInfo.BankAcctNo);
        //    Parameters[23] = String.IsNullOrEmpty(_financialInfo.BankBranchCD) ? new SqlParameter("@BankBranchCd", DBNull.Value) : new SqlParameter("@BankBranchCd", _financialInfo.BankBranchCD);
        //    Parameters[24] = new SqlParameter("@VATRate", ConvertDecimalToDb(_financialInfo.VATRate));
        //    Parameters[25] = new SqlParameter("@WriteOffDate", BaseClass.DateConverterDB(_financialInfo.WriteoffDate));
        //    Parameters[26] = new SqlParameter("@LastPaymtRecvType", String.IsNullOrEmpty(_financialInfo.LastPaymtType) ? "" : _financialInfo.LastPaymtType);
        //    Parameters[27] = new SqlParameter("@LastPaymtRecvAmt", ConvertDecimalToDb(_financialInfo.LastPaymtReceived));
        //    Parameters[28] = new SqlParameter("@LastPaymtRecvDate", DateConverterDB(_financialInfo.LastPaymtDate));
        //    Parameters[29] = new SqlParameter("@RETURN_VALUE", SqlDbType.BigInt);
        //    Parameters[29].Direction = ParameterDirection.ReturnValue;


        //    var Cmd = objDataEngine.ExecuteWithReturnValue("WebAcctFinInfoMaint", CommandType.StoredProcedure, Parameters);
        //    var Result = Convert.ToInt32(Cmd.Parameters["@RETURN_VALUE"].Value);
        //    var Descp = GetMessageCode(Result);

        //    objDataEngine.CloseConnection();
        //    return Descp;

        //}
        #endregion

        #region "Credit Assement Operation"

        public async Task<CreditAssesOperation> GetCAOGeneralInfo(string acctNo = null, string appId = null)
        {

            var objDataEngine = new FleetDataEngine(AccessMode.CustomerService, DBType.Maint);

            try
            {
                await objDataEngine.InitiateConnectionAsync();
                SqlParameter[] Parameters = new SqlParameter[3];
                Parameters[0] = new SqlParameter("@IssNo", GetIssNo);
                Parameters[1] = String.IsNullOrEmpty(acctNo) ? new SqlParameter("@AcctNo", DBNull.Value) : new SqlParameter("@AcctNo", acctNo);
                Parameters[2] = String.IsNullOrEmpty(appId) ? new SqlParameter("@ApplId", DBNull.Value) : new SqlParameter("@ApplId", appId);

                var Reader = await objDataEngine.ExecuteCommandAsync("WebAcctCAOSelect", CommandType.StoredProcedure, Parameters);

                while (Reader.Read())
                {

                    var _caoMaint = new CreditAssesOperation
                    {
                        ApplId = appId,
                        CreditLimit = ConverterDecimal(Reader["CreditLimit"]),
                        SelectedPaymentMode = Convert.ToString(Reader["PymtMode"]),
                        SelectedPaymentTerm = Convert.ToString(Reader["PymtTerms"]),
                        TxnAmtLimit = BaseClass.ConverterDecimal(Reader["TxnAmtLimit"]),
                        TxnLitLimit = BaseClass.ConverterDecimal(Reader["TxnLitLimit"]),
                        SelectedTerritoryCd = Convert.ToString(Reader["SaleTerritory"]),
                        SelectedRiskCategry = String.IsNullOrEmpty(Convert.ToString(Reader["RiskCategory"])) ? "1" : Convert.ToString(Reader["RiskCategory"]),
                        SelectedAssesmtType = Convert.ToString(Reader["AssessmentType"]),
                        SecurityAmt = BaseClass.ConverterDecimal(Reader["SecurityAmt"]),
                        DirectDebitInd = BaseClass.BoolConverter(Reader["DirectDebitInd"]),
                        SelectedDepositType = Convert.ToString(Reader["DepositType"]),
                        DepositExp = DateConverter(Reader["DepositExp"]),
                        SelectedBankAcctType = Convert.ToString(Reader["BankAcctType"]),
                        SelectedBankName = Convert.ToString(Reader["BankName"]),
                        BankAcctNo = Convert.ToString(Reader["BankAcctNo"]),
                        BankBranchCode = Convert.ToString(Reader["BankBranchCd"]),
                        DepositAmt = ConverterDecimal(Reader["DepositAmt"]),
                        ValidityDate = DateConverter(Reader["ValidityDate"]),
                        NRID = DateConverter(Reader["NRID"]),
                        SelectedReasonCode = Convert.ToString(Reader["ReasonCd"]),


                        AppvUserIdQAOff = Convert.ToString(Reader["AppvUserId1"]),
                        SelectedAppvStsQAOff = Convert.ToString(Reader["AppvSts1"]),
                        AppvDateQAOff = DateConverter(Reader["AppvDate1"]),


                        AppvUserIdBackOff = Convert.ToString(Reader["AppvUserId2"]),
                        //AppvStsBackOff = await BaseClass.WebGetRefLib("ApplSts"),
                        SelectedAppvStsBackOff = Convert.ToString(Reader["AppvSts2"]),
                        AppvDateBackOff = DateConverter(Reader["AppvDate2"]),


                        //AppvUserIdCredOff = Convert.ToString(Reader["AppvUserId3"]),
                        //AppvStsCredOff = BaseClass.WebGetRefLib("ApplSts"),
                        //SelectedAppvStsCredOff = Convert.ToString(Reader["AppvSts3"]),
                        //AppvDateCredOff = DateConverter(Reader["AppvDate3"]),

                        AppvUserIdEDP = Convert.ToString(Reader["AppvUserId4"]),
                        //AppvStsEDP = await BaseClass.WebGetRefLib("ApplSts"),
                        SelectedAppvStsEDP = Convert.ToString(Reader["AppvSts4"]),
                        AppvDateEDP = DateConverter(Reader["AppvDate4"]),
                        remarks = Convert.ToString(Reader["Remarks"]),
                        SelectedQuantitative = Convert.ToString(Reader["Quantitativerating"]),
                        SelectedQualitative = Convert.ToString(Reader["Qualitativerating"]),
                        ProposeCreditLimit = ConverterDecimal(Reader["PropCreditLimit"]),
                        RecommendCreditLimit = ConverterDecimal(Reader["RecCreditLimit"]),
                        ProposeSecurityAmt = ConverterDecimal(Reader["PropSecurityAmt"]),
                        RecommendSecurityAmt = ConverterDecimal(Reader["RecSecurityAmt"]),
                        DocPath = Convert.ToString(Reader["DocPath"])
                    };
                    return _caoMaint;
                }
                return new CreditAssesOperation();
            }
            finally
            {
                objDataEngine.CloseConnection();
                
            }

        }
        public async Task<MsgRetriever> SaveCreditAssessmentOperation(CreditAssesOperation _CAO)
        {
            var objDataEngine = new FleetDataEngine(AccessMode.CardHolder, DBType.Maint);


            try
            {
                await objDataEngine.InitiateConnectionAsync();
                SqlParameter[] Parameters = new SqlParameter[43];
                SqlCommand cmd = new SqlCommand();
                Parameters[0] = new SqlParameter("@IssNo", GetIssNo);
                Parameters[1] = String.IsNullOrEmpty(_CAO.acctNo) ? new SqlParameter("@AcctNo", DBNull.Value) : new SqlParameter("@AcctNo", _CAO.acctNo);
                Parameters[2] = String.IsNullOrEmpty(_CAO.ApplId) ? new SqlParameter("@ApplId", DBNull.Value) : new SqlParameter("@ApplId", _CAO.ApplId);
                Parameters[3] = new SqlParameter("@CreditLimit", ConvertDecimalToDb(_CAO.CreditLimit));
                Parameters[4] = String.IsNullOrEmpty(_CAO.SelectedPaymentMode) ? new SqlParameter("@PymtMode", DBNull.Value) : new SqlParameter("@PymtMode", _CAO.SelectedPaymentMode);

                Parameters[5] = new SqlParameter("@PymtTerms", ConvertIntToDb(_CAO.SelectedPaymentTerm));
                Parameters[6] = new SqlParameter("@TxnLimit", ConvertDecimalToDb(_CAO.TxnAmtLimit));
                Parameters[7] = new SqlParameter("@LitLimit", ConvertDecimalToDb(_CAO.TxnLitLimit));
                Parameters[8] = String.IsNullOrEmpty(_CAO.SelectedTerritoryCd) ? new SqlParameter("@SaleTerritory", DBNull.Value) : new SqlParameter("@SaleTerritory", _CAO.SelectedTerritoryCd);
                Parameters[9] = String.IsNullOrEmpty(_CAO.SelectedRiskCategry) ? new SqlParameter("@RiskCategory", DBNull.Value) : new SqlParameter("@RiskCategory", _CAO.SelectedRiskCategry);

                Parameters[10] = String.IsNullOrEmpty(_CAO.SelectedAssesmtType) ? new SqlParameter("@AssessmentType", DBNull.Value) : new SqlParameter("@AssessmentType", _CAO.SelectedAssesmtType);
                Parameters[11] = new SqlParameter("@DirectDebitInd", ConvertBoolDB(_CAO.DirectDebitInd));
                Parameters[12] = String.IsNullOrEmpty(_CAO.SelectedDepositType) ? new SqlParameter("@DepositType", DBNull.Value) : new SqlParameter("@DepositType", _CAO.SelectedDepositType);
                Parameters[13] = new SqlParameter("@DepositExp", DateConverter(_CAO.DepositExp));
                Parameters[14] = String.IsNullOrEmpty(_CAO.SelectedBankAcctType) ? new SqlParameter("@BankAcctType", DBNull.Value) : new SqlParameter("@BankAcctType", _CAO.SelectedBankAcctType);

                Parameters[15] = String.IsNullOrEmpty(_CAO.SelectedBankName) ? new SqlParameter("@BankCd", DBNull.Value) : new SqlParameter("@BankCd", _CAO.SelectedBankName);
                Parameters[16] = String.IsNullOrEmpty(_CAO.BankAcctNo) ? new SqlParameter("@BankAcctNo", DBNull.Value) : new SqlParameter("@BankAcctNo", _CAO.BankAcctNo);
                Parameters[17] = String.IsNullOrEmpty(_CAO.BankBranchCode) ? new SqlParameter("@BankBranchCd", DBNull.Value) : new SqlParameter("@BankBranchCd", _CAO.BankBranchCode);
                Parameters[18] = new SqlParameter("@DepositAmt", ConvertDecimalToDb(_CAO.DepositAmt));
                Parameters[19] = new SqlParameter("@ValidityDate", DateConverterDB(_CAO.ValidityDate));

                Parameters[20] = new SqlParameter("@NRID", DateConverterDB(_CAO.NRID));
                Parameters[21] = String.IsNullOrEmpty(_CAO.SelectedReasonCode) ? new SqlParameter("@ReasonCd", DBNull.Value) : new SqlParameter("@ReasonCd", _CAO.SelectedReasonCode);

                Parameters[22] = String.IsNullOrEmpty(_CAO.AppvUserIdQAOff) ? new SqlParameter("@AppvUserId1", this.GetUserId) : new SqlParameter("@AppvUserId1", _CAO.AppvUserIdQAOff);
                Parameters[23] = String.IsNullOrEmpty(_CAO.SelectedAppvStsQAOff) ? new SqlParameter("@AppvSts1", DBNull.Value) : new SqlParameter("@AppvSts1", _CAO.SelectedAppvStsQAOff);
                Parameters[24] = new SqlParameter("@AppvDate1", DateConverterDB(_CAO.AppvDateQAOff));

                Parameters[25] = String.IsNullOrEmpty(_CAO.AppvUserIdBackOff) ? new SqlParameter("@AppvUserId2", this.GetUserId) : new SqlParameter("@AppvUserId2", _CAO.AppvUserIdBackOff);
                Parameters[26] = String.IsNullOrEmpty(_CAO.SelectedAppvStsBackOff) ? new SqlParameter("@AppvSts2", DBNull.Value) : new SqlParameter("@AppvSts2", _CAO.SelectedAppvStsBackOff);
                Parameters[27] = new SqlParameter("@AppvDate2", DateConverterDB(_CAO.AppvDateBackOff));

                Parameters[28] = String.IsNullOrEmpty(_CAO.AppvUserIdCredOff) ? new SqlParameter("@AppvUserId3", this.GetUserId) : new SqlParameter("@AppvUserId3", _CAO.AppvUserIdCredOff);
                Parameters[29] = String.IsNullOrEmpty(_CAO.SelectedAppvStsCredOff) ? new SqlParameter("@AppvSts3", DBNull.Value) : new SqlParameter("@AppvSts3", _CAO.SelectedAppvStsCredOff);
                Parameters[30] = new SqlParameter("@AppvDate3", DateConverterDB(_CAO.AppvDateCredOff));

                Parameters[31] = String.IsNullOrWhiteSpace(_CAO.AppvUserIdEDP) ? new SqlParameter("@AppvUserId4", this.GetUserId) : new SqlParameter("@AppvUserId4", _CAO.AppvUserIdEDP);
                Parameters[32] = String.IsNullOrWhiteSpace(_CAO.SelectedAppvStsEDP) ? new SqlParameter("@AppvSts4", DBNull.Value) : new SqlParameter("@AppvSts4", _CAO.SelectedAppvStsEDP);
                Parameters[33] = new SqlParameter("@AppvDate4", DateConverterDB(_CAO.AppvDateEDP));
                Parameters[34] = String.IsNullOrEmpty(_CAO.SelectedQualitative) ? new SqlParameter("@Qualitativerating", DBNull.Value) : new SqlParameter("@Qualitativerating", _CAO.SelectedQualitative);
                Parameters[35] = String.IsNullOrEmpty(_CAO.SelectedQuantitative) ? new SqlParameter("@Quantitativerating", DBNull.Value) : new SqlParameter("@Quantitativerating", _CAO.SelectedQuantitative);

                Parameters[36] = new SqlParameter("@UserId", this.GetUserId);
                Parameters[37] = String.IsNullOrEmpty(_CAO.remarks) ? new SqlParameter("@Remarks", DBNull.Value) : new SqlParameter("@Remarks", _CAO.remarks);
                Parameters[38] = String.IsNullOrEmpty(_CAO.RecommendCreditLimit) ? new SqlParameter("@RecCreditLimit", DBNull.Value) : new SqlParameter("@RecCreditLimit", _CAO.RecommendCreditLimit);
                Parameters[39] = String.IsNullOrEmpty(_CAO.ProposeCreditLimit) ? new SqlParameter("@PropCreditLimit", DBNull.Value) : new SqlParameter("@PropCreditLimit", _CAO.ProposeCreditLimit);
                Parameters[40] = String.IsNullOrEmpty(_CAO.RecommendSecurityAmt) ? new SqlParameter("@RecSecurityAmt", DBNull.Value) : new SqlParameter("@RecSecurityAmt", _CAO.RecommendSecurityAmt);
                Parameters[41] = String.IsNullOrEmpty(_CAO.ProposeSecurityAmt) ? new SqlParameter("@PropSecurityAmt", DBNull.Value) : new SqlParameter("@PropSecurityAmt", _CAO.ProposeSecurityAmt);
                Parameters[42] = new SqlParameter("@RETURN_VALUE", SqlDbType.BigInt);
                Parameters[42].Direction = ParameterDirection.ReturnValue;
                var Cmd = await objDataEngine.ExecuteWithReturnValueAsync("WebAcctCAOMaint", CommandType.StoredProcedure, Parameters);
                var Result = Convert.ToInt32(Cmd.Parameters["@RETURN_VALUE"].Value);
                var Descp = await GetMessageCode(Result);
                return Descp;
            }
            finally
            {
                objDataEngine.CloseConnection();
                
            }
        }

        #endregion

        #region "UpToDateBal"
        public async Task<UpToDateBal> GetUpToBal(string issNo, string acctNo)
        {
            var objDataEngine = new FleetDataEngine(AccessMode.CustomerService, DBType.Maint);
            try
            {
                await objDataEngine.InitiateConnectionAsync();
                SqlParameter[] Parameters = new SqlParameter[2];
                Parameters[0] = new SqlParameter("@IssNo", issNo);
                Parameters[1] = new SqlParameter("@AcctNo", acctNo);
                var Reader = await objDataEngine.ExecuteCommandAsync("WebAcctUpToDateBalanceSelect", CommandType.StoredProcedure, Parameters);
                while (Reader.Read())
                {
                    var _uptodatebal = new UpToDateBal
                    {
                        AcctType = await BaseClass.WebGetRefLib("AcctType"),
                        SelectedAccountType = Convert.ToString(Reader["Account Type"]),
                        CreditLimit = BaseClass.ConverterDecimal(Reader["CreditLimit"]),
                        OpeningBal = BaseClass.ConverterDecimal(Reader["Opening Balance"]),
                        InstantAmt = BaseClass.ConverterDecimal(Reader["Instant Amount"]),
                        UnpostedAmt = BaseClass.ConverterDecimal(Reader["Unposted Amount"]),
                        ClosingBal = BaseClass.ConverterDecimal(Reader["Closing Balance"]),
                    };
                    return _uptodatebal;
                }
                return new UpToDateBal();
            }
            finally
            {
                objDataEngine.CloseConnection();
                
            }
        }
        #endregion

        #region "VelocityLimits"

        public async Task<List<VeloctyLimitListMaintModel>> GetCustAcctVelocityList(VeloctyLimitListMaintModel _CustAcctVelocity)
        {
            var objDataEngine = new FleetDataEngine(AccessMode.CustomerService, DBType.Maint);
            try
            {
                await objDataEngine.InitiateConnectionAsync();
                SqlParameter[] Parameters = new SqlParameter[7];
                Parameters[0] = new SqlParameter("@IssNo", GetIssNo);
                Parameters[1] = String.IsNullOrEmpty(_CustAcctVelocity._CardnAccNo.AccNo) ? new SqlParameter("@AcctNo", DBNull.Value) : new SqlParameter("@AcctNo", _CustAcctVelocity._CardnAccNo.AccNo);
                Parameters[2] = String.IsNullOrEmpty(_CustAcctVelocity._CardnAccNo.CardNo) ? new SqlParameter("@CardNo", DBNull.Value) : new SqlParameter("@CardNo", _CustAcctVelocity._CardnAccNo.CardNo);
                Parameters[3] = String.IsNullOrEmpty(_CustAcctVelocity.ApplId) ? new SqlParameter("@ApplId", DBNull.Value) : new SqlParameter("@ApplId", _CustAcctVelocity.ApplId);
                Parameters[4] = String.IsNullOrEmpty(_CustAcctVelocity.AppcId) ? new SqlParameter("@AppcId", DBNull.Value) : new SqlParameter("@AppcId", _CustAcctVelocity.AppcId);
                Parameters[5] = String.IsNullOrEmpty(_CustAcctVelocity.CostCentre) ? new SqlParameter("@CostCentre", DBNull.Value) : new SqlParameter("@CostCentre", _CustAcctVelocity.CostCentre);
                Parameters[6] = String.IsNullOrEmpty(_CustAcctVelocity.SelectedCorpCd) ? new SqlParameter("@CorpCd", DBNull.Value) : new SqlParameter("@CorpCd", _CustAcctVelocity.SelectedCorpCd);

                var execResult = await objDataEngine.ExecuteCommandAsync("WebVelocityLimitListSelect", CommandType.StoredProcedure, Parameters);

                var _VeloctyLimitListMaint = new List<VeloctyLimitListMaintModel>();



                while (execResult.Read())
                {
                    _VeloctyLimitListMaint.Add(new VeloctyLimitListMaintModel
                    {
                        //ApplId = Convert.ToString(execResult["ApplId"]),
                        VelocityIndDescp = Convert.ToString(execResult["Velocity Indicator Description"]),
                        //ProdCd = Convert.ToString(execResult["Product Code"]),
                        velocityCounter = Convert.ToString(execResult["Counter"]),
                        ddlVelocityLimit = ConverterDecimal(execResult["Velocity Amount"]),
                        ddlVelocityLitre = ConvertLong(execResult["Velocity Litre"]),
                        SpentCnt = Convert.ToInt32(execResult["Spent Counter"]),
                        SpentLimit = ConverterDecimal(execResult["Spent Amount"]),
                        SpentLitre = Convert.ToString(ConvertLong(execResult["Spent Litre"])),
                        LastUpdateDate = DateConverter(execResult["Last Update Date"]),
                        UserId = Convert.ToString(execResult["User Id"]),
                        CreationDate = DateConverter(execResult["Creation Date"]),
                        SelectedVelocityInd = Convert.ToString(execResult["Velocity Indicator"]),
                        SelectedProdCd = Convert.ToString(execResult["Product Code"]),
                        CostCentreDescription = Convert.ToString(execResult["CostCentre Description"]),
                        CostCentre = Convert.ToString(execResult["CostCentre Code"]),
                        //ProdCdDescp = Convert.ToString(execResult["Product Description"]),
                        //veVelocityCnt = Convert.ToString(execResult["Counter"]),
                        //velocityCounter = Convert.ToString(execResult["VelocityCnt"]),

                    });
                };
                return _VeloctyLimitListMaint;
            }
            finally
            {
                objDataEngine.CloseConnection();
                
            }

        }
        public async Task<VeloctyLimitListMaintModel> GetCustAcctVelocityDetail(VeloctyLimitListMaintModel _VelocityDetail)
        {
            var objDataEngine = new FleetDataEngine(AccessMode.CustomerService, DBType.Maint);

            try
            {
                await objDataEngine.InitiateConnectionAsync();
                SqlParameter[] Parameters = new SqlParameter[9];
                Parameters[0] = new SqlParameter("@IssNo", GetIssNo);
                Parameters[1] = String.IsNullOrEmpty(_VelocityDetail._CardnAccNo.AccNo) ? new SqlParameter("@AcctNo", DBNull.Value) : new SqlParameter("@AcctNo", _VelocityDetail._CardnAccNo.AccNo);
                Parameters[2] = String.IsNullOrEmpty(_VelocityDetail._CardnAccNo.CardNo) ? new SqlParameter("@CardNo ", DBNull.Value) : new SqlParameter("@CardNo ", _VelocityDetail._CardnAccNo.CardNo);
                Parameters[3] = String.IsNullOrEmpty(_VelocityDetail.ApplId) ? new SqlParameter("@ApplId ", DBNull.Value) : new SqlParameter("@ApplId ", _VelocityDetail.ApplId);
                Parameters[4] = String.IsNullOrEmpty(_VelocityDetail.AppcId) ? new SqlParameter("@AppcId ", DBNull.Value) : new SqlParameter("@AppcId ", _VelocityDetail.AppcId);
                Parameters[5] = String.IsNullOrEmpty(_VelocityDetail.SelectedVelocityInd) ? new SqlParameter("@VelocityInd ", DBNull.Value) : new SqlParameter("@VelocityInd ", _VelocityDetail.SelectedVelocityInd);
                Parameters[6] = new SqlParameter("@ProdCd", "0");
                Parameters[7] = String.IsNullOrEmpty(_VelocityDetail.SelectedCorpCd) ? new SqlParameter("@CorpCd", DBNull.Value) : new SqlParameter("@CorpCd", _VelocityDetail.SelectedCorpCd);
                Parameters[8] = String.IsNullOrEmpty(_VelocityDetail.CostCentre) ? new SqlParameter("@CostCentre", DBNull.Value) : new SqlParameter("@CostCentre", _VelocityDetail.CostCentre);

                var execResult = await objDataEngine.ExecuteCommandAsync("WebVelocityLimitSelect", CommandType.StoredProcedure, Parameters);

                var Client = new WebClient();
                var _GetVelDetail = new VeloctyLimitListMaintModel();

                while (execResult.Read())
                {
                    _GetVelDetail.SelectedVelocityInd = Convert.ToString(execResult["Velocity Indicator"]);
                    _GetVelDetail.SelectedProdCd = Convert.ToString(execResult["Product Code"]);
                    _GetVelDetail.CntrLimit = Convert.ToInt32(execResult["Counter"]);
                    _GetVelDetail.VelocityLimit = ConverterDecimal(execResult["Velocity Amount"]);
                    _GetVelDetail.VelocityLitre = ConvertLong(execResult["Velocity Litre"]);
                    _GetVelDetail.LastUpdateDate = Convert.ToString(execResult["Last Update Date"]);
                    _GetVelDetail.UserId = Convert.ToString(execResult["User Id"]);
                    _GetVelDetail.CreationDate = Convert.ToString(execResult["Creation Date"]);
                    _GetVelDetail.CostCentre = Convert.ToString(execResult["CostCentre"]);
                    _GetVelDetail.SpentLimit = Convert.ToString(execResult["Spent Amount"]);
                    _GetVelDetail.SpentCnt = ConvertInt(execResult["Spent Counter"]);
                    _GetVelDetail.SpentLitre = Convert.ToString(execResult["Spent Litre"]);
                    _GetVelDetail.velocityCounter = Convert.ToString(execResult["Counter"]);

                };
                return _GetVelDetail;
            }
            finally
            {
                objDataEngine.CloseConnection();
                
            }


        }
        public async Task<MsgRetriever> SaveCustAcctVelocity(VeloctyLimitListMaintModel _VelocityLimitList, string applId, string Func)
        {
            var objDataEngine = new FleetDataEngine(AccessMode.CustomerService, DBType.Maint);
            try
            {
                await objDataEngine.InitiateConnectionAsync();
                SqlParameter[] Parameters = new SqlParameter[15];
                Parameters[0] = new SqlParameter("@IssNo", GetIssNo);
                Parameters[1] = String.IsNullOrEmpty(Func) ? new SqlParameter("@Func", DBNull.Value) : new SqlParameter("@Func", Func);
                Parameters[2] = String.IsNullOrEmpty(_VelocityLimitList._CardnAccNo.AccNo) ? new SqlParameter("@AcctNo", DBNull.Value) : new SqlParameter("@AcctNo", _VelocityLimitList._CardnAccNo.AccNo);
                Parameters[3] = String.IsNullOrEmpty(_VelocityLimitList._CardnAccNo.CardNo) ? new SqlParameter("@CardNo", DBNull.Value) : new SqlParameter("@CardNo", _VelocityLimitList._CardnAccNo.CardNo);
                Parameters[4] = String.IsNullOrEmpty(_VelocityLimitList.CostCentre) ? new SqlParameter("@CostCentre", DBNull.Value) : new SqlParameter("@CostCentre", _VelocityLimitList.CostCentre);
                Parameters[5] = String.IsNullOrEmpty(_VelocityLimitList.ApplId) ? new SqlParameter("@ApplId", DBNull.Value) : new SqlParameter("@ApplId", _VelocityLimitList.ApplId);
                Parameters[6] = String.IsNullOrEmpty(_VelocityLimitList.AppcId) ? new SqlParameter("@AppcId", DBNull.Value) : new SqlParameter("@AppcId", _VelocityLimitList.AppcId);
                Parameters[7] = String.IsNullOrEmpty(_VelocityLimitList.SelectedVelocityInd) ? new SqlParameter("@VelocityInd", DBNull.Value) : new SqlParameter("@VelocityInd", _VelocityLimitList.SelectedVelocityInd);
                Parameters[8] = new SqlParameter("@ProdCd", "0");
                Parameters[9] = new SqlParameter("@VelocityLimit", ConvertDecimalToDb(_VelocityLimitList.VelocityLimit));
                Parameters[10] = new SqlParameter("@VelocityCnt", ConvertLongToDb(_VelocityLimitList.CntrLimit));
                Parameters[11] = new SqlParameter("@VelocityLitre", ConvertIntToDb(_VelocityLimitList.VelocityLitre));//String.IsNullOrEmpty(_VelocityLimitList.VelocityLitre) ? new SqlParameter("@VelocityLitre", DBNull.Value) : new SqlParameter("@VelocityLitre", _VelocityLimitList.VelocityLitre);
                Parameters[12] = String.IsNullOrEmpty(this.GetUserId) ? new SqlParameter("@userId", DBNull.Value) : new SqlParameter("@userId", this.GetUserId);
                Parameters[13] = String.IsNullOrEmpty(_VelocityLimitList.SelectedCorpCd) ? new SqlParameter("@CorpCd", DBNull.Value) : new SqlParameter("@CorpCd", _VelocityLimitList.SelectedCorpCd);
                Parameters[14] = new SqlParameter("@RETURN_VALUE", SqlDbType.BigInt);
                Parameters[14].Direction = ParameterDirection.ReturnValue;

                var Cmd = await objDataEngine.ExecuteWithReturnValueAsync("WebVelocityLimitMaint", CommandType.StoredProcedure, Parameters);
                var Result = Convert.ToInt32(Cmd.Parameters["@RETURN_VALUE"].Value);
                var Descp = await GetMessageCode(Result);
                return Descp;
            }
            finally
            {
                objDataEngine.CloseConnection();
                
            }
        }
        public async Task<MsgRetriever> DelCustAcctVelocity(string AccNo, string cardNo, string applId, string appcId, string VelInd, string ProdCd, string CostCenter, string corpCd)
        {
            var objDataEngine = new FleetDataEngine(AccessMode.CustomerService, DBType.Maint);


            try
            {
                await objDataEngine.InitiateConnectionAsync();
                SqlParameter[] Parameters = new SqlParameter[10];
                Parameters[0] = new SqlParameter("@IssNo", GetIssNo);
                Parameters[1] = String.IsNullOrEmpty(AccNo) ? new SqlParameter("@AcctNo", DBNull.Value) : new SqlParameter("@AcctNo", AccNo);
                Parameters[2] = String.IsNullOrEmpty(cardNo) ? new SqlParameter("@CardNo", DBNull.Value) : new SqlParameter("@CardNo", cardNo);
                Parameters[3] = String.IsNullOrEmpty(applId) ? new SqlParameter("@ApplId", DBNull.Value) : new SqlParameter("@ApplId", applId);
                Parameters[4] = String.IsNullOrEmpty(appcId) ? new SqlParameter("@AppcId", DBNull.Value) : new SqlParameter("@AppcId", appcId);
                Parameters[5] = String.IsNullOrEmpty(VelInd) ? new SqlParameter("@VelocityInd", DBNull.Value) : new SqlParameter("@VelocityInd", VelInd);
                Parameters[6] = new SqlParameter("@ProdCd", "0");//String.IsNullOrEmpty(ProdCd) ? new SqlParameter("@ProdCd", DBNull.Value) : new SqlParameter("@ProdCd", ProdCd);
                Parameters[7] = String.IsNullOrEmpty(CostCenter) ? new SqlParameter("@CostCentre", DBNull.Value) : new SqlParameter("@CostCentre", CostCenter);
                Parameters[8] = String.IsNullOrEmpty(corpCd) ? new SqlParameter("@CorpCd", DBNull.Value) : new SqlParameter("@CorpCd", corpCd);
                Parameters[9] = new SqlParameter("@RETURN_VALUE", SqlDbType.BigInt);
                Parameters[9].Direction = ParameterDirection.ReturnValue;


                var Cmd = await objDataEngine.ExecuteWithReturnValueAsync("WebVelocityLimitDelete", CommandType.StoredProcedure, Parameters);
                var Result = Convert.ToInt32(Cmd.Parameters["@RETURN_VALUE"].Value);
                var Descp = await GetMessageCode(Result);
                return Descp;
            }
            finally
            {
                objDataEngine.CloseConnection();
                
            }


        }

        #endregion

        #region "CardHolder"

        public async Task<List<CardHolderInfoModel>> GetCardHolderList(string AcctNo)
        {
            var objDataEngine = new FleetDataEngine(AccessMode.CustomerService, DBType.Maint);
            try
            {
                await objDataEngine.InitiateConnectionAsync();
                SqlParameter[] Parameters = new SqlParameter[2];
                Parameters[0] = new SqlParameter("@IssNo", GetIssNo);
                Parameters[1] = new SqlParameter("@AcctNo", String.IsNullOrEmpty(AcctNo) ? "" : AcctNo);

                var execResult = await objDataEngine.ExecuteCommandAsync("WebCardListSelect", CommandType.StoredProcedure, Parameters);
                var _CardHolderInfo = new List<CardHolderInfoModel>();
                while (execResult.Read())
                {
                    _CardHolderInfo.Add(new CardHolderInfoModel
                    {
                        CardNo = Convert.ToString(execResult["CardNo"]),
                        EmbossName = Convert.ToString(execResult["Emboss Name"]),
                        SelectedCurrentStatus = Convert.ToString(execResult["Status"]),
                        CardExpiry = Convert.ToString(execResult["Card Expiry"]),
                        XRefCardNo = Convert.ToString(execResult["Xref CardNo"]),
                        SelectedCardType = Convert.ToString(execResult["Card Type"]),
                        SelectedPINInd = Convert.ToString(execResult["PIN"]),
                        vehRegNo = Convert.ToString(execResult["VRN"]),
                        SKDSQuota = ConverterDecimal(execResult["SKDS Quota"]),
                        SelectedSKDSNo = Convert.ToString(execResult["SKDSNo"]),
                        BlockedDate = DateTimeConverter(execResult["BlockedDate"]),
                        DriverCd = Convert.ToString(execResult["Driver"]),
                        FullName = Convert.ToString(execResult["Full Name"]),
                        TerminatedDate = Convert.ToString(execResult["Card Terminated"]),
                        SelectedCostCentre = Convert.ToString(execResult["CostCenter"])
                    });
                }
                return _CardHolderInfo;
            }
            finally
            {
                objDataEngine.CloseConnection();
                
            }
        }
        public async Task<CardHolderInfoModel> GetCardHolderDetail(string CardNo)
        {
            var objDataEngine = new FleetDataEngine(AccessMode.CustomerService, DBType.Maint);
            try
            {
                await objDataEngine.InitiateConnectionAsync();
                SqlParameter[] Parameters = new SqlParameter[2];
                Parameters[0] = new SqlParameter("@IssNo", GetIssNo);
                Parameters[1] = new SqlParameter("@AcctNo", String.IsNullOrEmpty(CardNo) ? "" : CardNo);

                var execResult = await objDataEngine.ExecuteCommandAsync("WebCardSelect", CommandType.StoredProcedure, Parameters);

                var _GetCardHolder = new CardHolderInfoModel();

                while (execResult.Read())
                {
                    _GetCardHolder.CreationDate = System.DateTime.Now.ToShortDateString();
                    _GetCardHolder.CardType = await BaseClass.WebGetRefLib("CardType");
                    _GetCardHolder.PINInd = await BaseClass.WebGetRefLib("PinInd");
                    //_GetCardHolder.CurrentStatus = await BaseClass.WebGetRefLib("CardSts");
                    _GetCardHolder.PlasticType = await BaseClass.WebPlasticTypeSelect();
                    _GetCardHolder.JonFee = await BaseClass.WebGetFeeCd("JON");
                    _GetCardHolder.AnnualFee = await BaseClass.WebGetFeeCd("ANN");
                    _GetCardHolder.RenewalInd = await BaseClass.WebGetRefLib("RenewalInd");

                    _GetCardHolder.CardNo = Convert.ToString(execResult["CardNo"]);
                    _GetCardHolder.EmbossName = Convert.ToString(execResult["Emboss Name"]);
                    _GetCardHolder.SelectedCurrentStatus = Convert.ToString(execResult["Status"]);
                    _GetCardHolder.CardExpiry = Convert.ToString(execResult["Card Expiry"]);
                    _GetCardHolder.XRefCardNo = Convert.ToString(execResult["Xref CardNo"]);
                    _GetCardHolder.SelectedCardType = Convert.ToString(execResult["Card Type"]);
                    _GetCardHolder.SelectedPINInd = Convert.ToString(execResult["PIN"]);
                    _GetCardHolder.vehRegNo = Convert.ToString(execResult["VRN"]);
                    //_GetCardHolder.SKDSQuota = BaseClass.DecimalConverter(execResult["SKDS Quota"]);
                    _GetCardHolder.DriverCd = Convert.ToString(execResult["Driver"]);
                    _GetCardHolder.FullName = Convert.ToString(execResult["Full Name"]);
                    _GetCardHolder.TerminatedDate = Convert.ToString(execResult["Card Terminated"]);

                };
                return _GetCardHolder;
            }
            finally
            {
                objDataEngine.CloseConnection();
                
            }
        }
        public async Task<List<SearchResult1>> GetBusinessLocations(string merchantId)
        {
            var objDataEngine = new FleetDataEngine(AccessMode.CardHolder, DBType.Maint);
            try
            {
                await objDataEngine.InitiateConnectionAsync();
                SqlParameter[] Parameters = new SqlParameter[2];
                Parameters[0] = new SqlParameter("@IssNo", GetIssNo);
                Parameters[1] = new SqlParameter("@BusnLocation", merchantId);

                var execResult = await objDataEngine.ExecuteCommandAsync("WebLocationAcceptanceBySearch", CommandType.StoredProcedure, Parameters);
                var SearchResults = new List<SearchResult1>();

                while (execResult.Read())
                {
                    SearchResults.Add(new SearchResult1
                    {
                        Descp = Convert.ToString(execResult["Descp"]),
                        Object = Convert.ToString(execResult["Dealer"]),
                    });
                }
                return SearchResults;
            }
            finally
            {
                objDataEngine.CloseConnection();
                
            }
        }

        public async Task<CardHolderInfoModel> GetCardHolder(string cardNo)
        {
            var objDataEngine = new FleetDataEngine(AccessMode.CardHolder, DBType.Maint);

            try
            {
                await objDataEngine.InitiateConnectionAsync();
                SqlParameter[] Parameters = new SqlParameter[2];
                Parameters[0] = new SqlParameter("@IssNo", GetIssNo);
                Parameters[1] = new SqlParameter("@CardNo", cardNo);
                var Reader = await objDataEngine.ExecuteCommandAsync("WebCardGeneralInfoSelect", CommandType.StoredProcedure, Parameters);

                while (Reader.Read())
                {

                    var _cardHolderGeneralInfo = new CardHolderInfoModel
                    {
                        RenewalInd = await BaseClass.WebGetRefLib("RenewalInd"),
                        EmbossName = Convert.ToString(Reader["EmbName"]),
                        VehicleModel = await BaseClass.WebGetRefLib("VehSubModel"),
                        AcctNo = Convert.ToString(Reader["AcctNo"]),
                        SelectedCardType = Convert.ToString(Reader["CardType"]),
                        //CurrentStatus = await BaseClass.WebGetRefLib("CardSts"),
                        SelectedCurrentStatus = Convert.ToString(Reader["Sts"]),
                        ReasonCd = await BaseClass.WebGetRefLib("ReasonCd", "32"),
                        SelectedReasonCode = Convert.ToString(Reader["ReasonCd"]),
                        CreationDate = Convert.ToString(Reader["CreationDate"]),
                        MemberSince = Convert.ToString(Reader["MemSince"]),
                        CardExpiry = Convert.ToString(Reader["CardExpiry"]),
                        XRefCardNo = Convert.ToString(Reader["XRefCardNo"]),
                        oldCardNo = Convert.ToString(Reader["XPreCardNo"]),
                        PINInd = await BaseClass.WebGetRefLib("PINInd"),
                        SelectedPINInd = Convert.ToString(Reader["PINInd"]),
                        vehRegNo = Convert.ToString(Reader["VehRegsNo"]),
                        SelectedSKDSInd = BoolConverter(Reader["SKDSInd"]),
                        SelectedSKDSNo = Convert.ToString(Reader["SKDSNo"]),
                        SKDSQuota = BaseClass.ConverterDecimal(Reader["SKDSQuota"]),
                        DriverCd = Convert.ToString(Reader["DriverCd"]),
                        DriverName = Convert.ToString(Reader["Driver Name"]),
                        //FullName = Convert.ToString(Reader["Full Name"]),
                        BlockedDate = DateTimeConverter(Reader["BlockedDate"]),
                        TerminatedDate = BaseClass.DateConverter(Reader["TerminatedDate"]),
                        PVV = Convert.ToString(Reader["PVV"]),
                        PINOffset = Convert.ToString(Reader["PINoffSet"]),
                        DialogueInd = await BaseClass.WebGetRefLib("DialogueInd"),
                        SelectedDialogueInd = Convert.ToString(Reader["DialogueInd"]),
                        SelectedPushAlertInd = BaseClass.BoolConverter(Reader["PushAlertInd"]),
                        LocInd = BaseClass.BoolConverter(Reader["LocationInd"]),
                        SelectedLocCheckFlag = BaseClass.BoolConverter(Reader["LocationCheckFlag"]),
                        MaxCountLimit = ConvertInt(Reader["LocationMaxCnt"]),
                        AmtLimit = BaseClass.ConverterDecimal(Reader["LocationMaxAmt"]),
                        SelectedFuelCheckFlag = BaseClass.BoolConverter(Reader["FuelCheckFlag"]),
                        FuelLitre = BaseClass.ConverterDecimal(Reader["FuelLitPerKM"]),
                        PINExceedCnt = BaseClass.ConvertInt(Reader["PINExceedCnt"]),
                        PINAttempted = BaseClass.ConvertInt(Reader["PINAttempted"]),
                        AnnualFee = await BaseClass.WebGetFeeCd("ANN"),
                        JonFee = await BaseClass.WebGetFeeCd("JON"),
                        SelectedJonFee = Convert.ToString(Reader["JoiningFeeCd"]),
                        SelectedRenewalInd = Convert.ToString(Reader["RenewalInd"]),
                        EntityId = Convert.ToString(Reader["EntityId"]),
                        OdometerIndicator = BaseClass.BoolConverter(Reader["OdometerInd"]),
                        ProductUtilization = await BaseClass.WebProductGroupSelect(1),
                        PrimaryCard = BaseClass.BoolConverter(Reader["PrimaryCard"]),
                        SelectedAnnualFee = Convert.ToString(Reader["AnnlFeeCd"]),
                        SelectedVehicleModel = Convert.ToString(Reader["Model"]),
                        SelectedCostCentre = Convert.ToString(Reader["CostCentre"]),
                        SelectedProductUtilization = Convert.ToString(Reader["ProdGroup"]),
                        SelectedBranchCd = Convert.ToString(Reader["BranchCd"]),
                        SelectedDivisionCode = Convert.ToString(Reader["DivisionCd"]),
                        SelectedDeptCd = Convert.ToString(Reader["DeptCd"]),
                        BranchCd = await WebGetRefLib("BranchCd"),
                        DivisionCode = await WebGetRefLib("DivisionCd"),
                        DeptCd = await WebGetRefLib("DeptCd"),
                        SelectedCardMedia = Convert.ToString("CardMedia"),

                    };
                    //  _cardHolderGeneralInfo.SelectedProductUtilization = GetProductUtilizations(_cardHolderGeneralInfo.AcctNo, cardNo, null, null);
                    return _cardHolderGeneralInfo;
                }
                return new CardHolderInfoModel();
            }
            finally
            {
                objDataEngine.CloseConnection();
            }
        }
        public async Task<List<string>> GetProductUtilizations(string AcctNo = null, string CardNo = null, string ApplId = null, string AppcId = null)
        {
            var Products = new List<string>();
            var objDataEngine = new FleetDataEngine(AccessMode.CardHolder, DBType.Maint);
            try
            {
                await objDataEngine.InitiateConnectionAsync();
                SqlParameter[] Parameters = new SqlParameter[5];
                Parameters[0] = new SqlParameter("@IssNo", GetIssNo);
                Parameters[1] = String.IsNullOrEmpty(AcctNo) ? new SqlParameter("@AcctNo", DBNull.Value) : new SqlParameter("@AcctNo", AcctNo);
                Parameters[2] = String.IsNullOrEmpty(CardNo) ? new SqlParameter("@CardNo", DBNull.Value) : new SqlParameter("@CardNo", CardNo);
                Parameters[3] = String.IsNullOrEmpty(AppcId) ? new SqlParameter("@AppcId", DBNull.Value) : new SqlParameter("@AppcId", AppcId);
                Parameters[4] = String.IsNullOrEmpty(ApplId) ? new SqlParameter("@ApplId", DBNull.Value) : new SqlParameter("@ApplId", ApplId);
                var execResult = await objDataEngine.ExecuteCommandAsync("WebProductUtilizationListSelect", CommandType.StoredProcedure, Parameters);
                var SearchResults = new List<string>();
                while (execResult.Read())
                {
                    Products.Add(Convert.ToString(execResult["prodcd"]));
                }
                return Products;
            }
            finally
            {
                objDataEngine.CloseConnection();
            }
        }
        public async Task<MsgRetriever> SaveCardHolderInfo(CardHolderInfoModel _cardHolder)
        {
            var objDataEngine = new FleetDataEngine(AccessMode.CardHolder, DBType.Maint);

            try
            {

                await objDataEngine.InitiateConnectionAsync();
                SqlParameter[] Parameters = new SqlParameter[27];
                SqlCommand cmd = new SqlCommand();
                Parameters[0] = new SqlParameter("@IssNo", GetIssNo);
                Parameters[1] = String.IsNullOrEmpty(_cardHolder.CardNo) ? new SqlParameter("@CardNo", DBNull.Value) : new SqlParameter("@CardNo", ConvertLongToDb(_cardHolder.CardNo));
                Parameters[2] = String.IsNullOrEmpty(_cardHolder.EmbossName) ? new SqlParameter("@EmbName", DBNull.Value) : new SqlParameter("@EmbName", _cardHolder.EmbossName);
                Parameters[3] = String.IsNullOrEmpty(_cardHolder.SelectedCurrentStatus) ? new SqlParameter("@Sts", DBNull.Value) : new SqlParameter("@Sts", _cardHolder.SelectedCurrentStatus);
                Parameters[4] = new SqlParameter("@TerminatedDate", ConvertDatetimeDB(_cardHolder.TerminatedDate));
                Parameters[5] = String.IsNullOrEmpty(_cardHolder.vehRegNo) ? new SqlParameter("@VehRegsNo", DBNull.Value) : new SqlParameter("@VehRegsNo", _cardHolder.vehRegNo);
                Parameters[6] = String.IsNullOrEmpty(_cardHolder.DriverCd) ? new SqlParameter("@DriverCd", DBNull.Value) : new SqlParameter("@DriverCd", _cardHolder.DriverCd);
                Parameters[7] = new SqlParameter("@SKDSInd", ConvertBoolDB(_cardHolder.SelectedSKDSInd));
                Parameters[8] = new SqlParameter("@SKDSQuota", ConvertDecimalToDb(_cardHolder.SKDSQuota));
                Parameters[9] = String.IsNullOrEmpty(_cardHolder.SelectedSKDSNo) ? new SqlParameter("@SKDSNo", DBNull.Value) : new SqlParameter("@SKDSNo", _cardHolder.SelectedSKDSNo);
                Parameters[10] = String.IsNullOrEmpty(_cardHolder.SelectedDialogueInd) ? new SqlParameter("@DialogueInd", DBNull.Value) : new SqlParameter("@DialogueInd", _cardHolder.SelectedDialogueInd);
                Parameters[11] = new SqlParameter("@PINInd", ConvertBoolDB(_cardHolder.SelectedPINInd));
                //  Parameters[12] = String.IsNullOrEmpty(_cardHolder.DriverName) ? new SqlParameter("@DriverName", DBNull.Value) : new SqlParameter("@DriverName", _cardHolder.DriverName);
                Parameters[12] = new SqlParameter("@OdometerInd", ConvertBoolDB(_cardHolder.OdometerIndicator));
                Parameters[13] = String.IsNullOrEmpty(_cardHolder.AcctNo) ? new SqlParameter("@AcctNo", DBNull.Value) : new SqlParameter("@AcctNo", _cardHolder.AcctNo);
                Parameters[14] = new SqlParameter("@PushAlertInd", ConvertBoolDB(_cardHolder.SelectedPushAlertInd));
                Parameters[15] = String.IsNullOrEmpty(_cardHolder.SelectedAnnualFee) ? new SqlParameter("@AnnlFee", DBNull.Value) : new SqlParameter("@AnnlFee", _cardHolder.SelectedAnnualFee);
                Parameters[16] = String.IsNullOrEmpty(_cardHolder.SelectedJonFee) ? new SqlParameter("@JoiningFee", DBNull.Value) : new SqlParameter("@JoiningFee", _cardHolder.SelectedJonFee);
                Parameters[17] = String.IsNullOrEmpty(_cardHolder.SelectedRenewalInd) ? new SqlParameter("@RenewalInd", DBNull.Value) : new SqlParameter("@RenewalInd ", _cardHolder.SelectedRenewalInd);
                Parameters[18] = new SqlParameter("@UserId", this.GetUserId);
                Parameters[19] = new SqlParameter("@PrimaryCard", ConvertBoolDB(_cardHolder.PrimaryCard));
                Parameters[20] = String.IsNullOrEmpty(_cardHolder.SelectedProductUtilization) ? new SqlParameter("@ProductGroup", DBNull.Value) : new SqlParameter("@ProductGroup", _cardHolder.SelectedProductUtilization);
                Parameters[21] = String.IsNullOrEmpty(_cardHolder.SelectedCostCentre) ? new SqlParameter("@CostCentre", DBNull.Value) : new SqlParameter("@CostCentre", _cardHolder.SelectedCostCentre);
                Parameters[22] = String.IsNullOrEmpty(_cardHolder.SelectedVehicleModel) ? new SqlParameter("@VehModel", DBNull.Value) : new SqlParameter("@VehModel", _cardHolder.SelectedVehicleModel);
                Parameters[23] = String.IsNullOrEmpty(_cardHolder.SelectedBranchCd) ? new SqlParameter("@BranchCd", DBNull.Value) : new SqlParameter("@BranchCd", _cardHolder.SelectedBranchCd);
                Parameters[24] = String.IsNullOrEmpty(_cardHolder.SelectedDivisionCode) ? new SqlParameter("@DivisionCd", DBNull.Value) : new SqlParameter("@DivisionCd", _cardHolder.SelectedDivisionCode);
                Parameters[25] = String.IsNullOrEmpty(_cardHolder.SelectedDeptCd) ? new SqlParameter("@DeptCd", DBNull.Value) : new SqlParameter("@DeptCd", _cardHolder.SelectedDeptCd);
                Parameters[26] = new SqlParameter("@RETURN_VALUE", SqlDbType.BigInt);
                Parameters[26].Direction = ParameterDirection.ReturnValue;
                var Cmd = await objDataEngine.ExecuteWithReturnValueAsync("WebCardGeneralInfoMaint", CommandType.StoredProcedure, Parameters);
                var Result = Convert.ToInt32(Cmd.Parameters["@RETURN_VALUE"].Value);
                var Descp = await GetMessageCode(Result);
                return Descp;
            }
            finally
            {
                objDataEngine.CloseConnection();
            }
        }

        #endregion

        #region "Product Utilization"

        #endregion

        #region "Addresses List"
        public async Task<List<AddrListMaintModel>> GetAddressList(string RefTo, string RefKey)
        {
            var objDataEngine = new FleetDataEngine(AccessMode.CustomerService, DBType.Maint);

            try
            {
                await objDataEngine.InitiateConnectionAsync();
                SqlParameter[] Parameters = new SqlParameter[3];
                Parameters[0] = new SqlParameter("@IssNo", GetIssNo);
                Parameters[1] = new SqlParameter("@RefTo", String.IsNullOrEmpty(RefTo) ? "" : RefTo);
                Parameters[2] = new SqlParameter("@RefKey", String.IsNullOrEmpty(RefKey) ? "" : RefKey);


                var execResult = await objDataEngine.ExecuteCommandAsync("WebAddressListSelect", CommandType.StoredProcedure, Parameters);

                var _AddrListMaintModel = new List<AddrListMaintModel>();

                while (execResult.Read())
                {
                    _AddrListMaintModel.Add(new AddrListMaintModel
                    {
                        SelectedAddrType = Convert.ToString(execResult["Address Type"]),
                        MainMailingInd = BoolConverter(execResult["Main Mailing"]),
                        SelectedMailInd = Convert.ToString(execResult["Main Mailing"]),
                        Address1 = Convert.ToString(execResult["Street 1"]).ToUpper(),
                        Address2 = Convert.ToString(execResult["Street 2"]).ToUpper(),
                        Address3 = Convert.ToString(execResult["Street 3"]).ToUpper(),
                        Address4 = Convert.ToString(execResult["Street 4"]).ToUpper(),
                        Address5 = Convert.ToString(execResult["Street 5"]).ToUpper(),
                        //District = Convert.ToString(execResult["District"]),
                        City = Convert.ToString(execResult["City"]),
                        Selectedstate = Convert.ToString(execResult["StateCd"]),
                        PostalCode = Convert.ToString(execResult["PostalCd"]),
                        SelectedCountry = Convert.ToString(execResult["Country"]),
                        selectedregion = Convert.ToString(execResult["Region"]),
                        SelectedRefCd = Convert.ToString(execResult["RefCd"])
                    });
                };
                return _AddrListMaintModel;
            }
            finally
            {
                objDataEngine.CloseConnection();
                
            }
        }
        public async Task<AddrListMaintModel> GetAddressDetail(string RefTo, string RefKey, string RefCd)
        {
            var objDataEngine = new FleetDataEngine(AccessMode.CustomerService, DBType.Maint);
            try
            {
                await objDataEngine.InitiateConnectionAsync();
                SqlParameter[] Parameters = new SqlParameter[4];
                Parameters[0] = new SqlParameter("@IssNo", GetIssNo);
                Parameters[1] = new SqlParameter("@RefTo", String.IsNullOrEmpty(RefTo) ? "" : RefTo);
                Parameters[2] = new SqlParameter("@RefKey", String.IsNullOrEmpty(RefKey) ? "" : RefKey);
                Parameters[3] = new SqlParameter("@RefCd", String.IsNullOrEmpty(RefCd) ? "" : RefCd);

                var execResult = await objDataEngine.ExecuteCommandAsync("WebAddressSelect", CommandType.StoredProcedure, Parameters);

                var _GetAddress = new AddrListMaintModel();

                while (execResult.Read())
                {
                    _GetAddress.SelectedAddrType = Convert.ToString(execResult["RefCd"]);// humairah: take the refcode value coz address col return the description of the address 
                    _GetAddress.MainMailingInd = BoolConverter(execResult["Main Mailing"]);
                    _GetAddress.Address1 = Convert.ToString(execResult["Address1"]).ToUpper();
                    _GetAddress.Address2 = Convert.ToString(execResult["Address2"]).ToUpper();
                    _GetAddress.Address3 = Convert.ToString(execResult["Address3"]).ToUpper();
                    _GetAddress.Address4 = Convert.ToString(execResult["Street 4"]).ToUpper();
                    _GetAddress.Address5 = Convert.ToString(execResult["Street 5"]).ToUpper();
                    _GetAddress.City = Convert.ToString(execResult["city"]);
                    _GetAddress.Selectedstate = Convert.ToString(execResult["StateCd"]);
                    _GetAddress.PostalCode = Convert.ToString(execResult["PostalCd"]);
                    _GetAddress.SelectedCountry = Convert.ToString(execResult["Country"]);
                    _GetAddress.selectedregion = Convert.ToString(execResult["Region"]);
                    _GetAddress.SelectedRefCd = Convert.ToString(execResult["RefCd"]);
                };

                if (string.IsNullOrEmpty(_GetAddress.SelectedCountry))
                {
                    _GetAddress.SelectedCountry = "458";
                }
                return _GetAddress;
            }
            finally
            {
                objDataEngine.CloseConnection();
                
            }
        }
        public async Task<MsgRetriever> SaveAddressList(AddrListMaintModel _AddrListMaint, string RefTo, string RefCd, string RefKey, string Func)
        { //@RefCd  to save address is the selected address type
            var objDataEngine = new FleetDataEngine(AccessMode.CustomerService, DBType.Maint);
            try
            {
                await objDataEngine.InitiateConnectionAsync();
                SqlParameter[] Parameters = new SqlParameter[18];
                Parameters[0] = String.IsNullOrEmpty(Func) ? new SqlParameter("@Func", DBNull.Value) : new SqlParameter("@Func", Func);
                Parameters[1] = new SqlParameter("@IssNo", GetIssNo);
                Parameters[2] = String.IsNullOrEmpty(RefTo) ? new SqlParameter("@RefTo", DBNull.Value) : new SqlParameter("@RefTo", RefTo);
                Parameters[3] = String.IsNullOrEmpty(RefKey) ? new SqlParameter("@RefKey", DBNull.Value) : new SqlParameter("@RefKey", RefKey);
                Parameters[4] = String.IsNullOrEmpty(_AddrListMaint.SelectedAddrType) ? new SqlParameter("@RefCd", DBNull.Value) : new SqlParameter("@RefCd", _AddrListMaint.SelectedAddrType);
                Parameters[5] = String.IsNullOrEmpty(_AddrListMaint.Address1) ? new SqlParameter("@Street1", DBNull.Value) : new SqlParameter("@Street1", _AddrListMaint.Address1);
                Parameters[6] = String.IsNullOrEmpty(_AddrListMaint.Address2) ? new SqlParameter("@Street2", DBNull.Value) : new SqlParameter("@Street2", _AddrListMaint.Address2);
                Parameters[7] = String.IsNullOrEmpty(_AddrListMaint.Address3) ? new SqlParameter("@Street3", DBNull.Value) : new SqlParameter("@Street3", _AddrListMaint.Address3);
                Parameters[8] = String.IsNullOrEmpty(_AddrListMaint.City) ? new SqlParameter("@City", DBNull.Value) : new SqlParameter("@City", _AddrListMaint.City);
                Parameters[9] = String.IsNullOrEmpty(_AddrListMaint.Selectedstate) ? new SqlParameter("@State", DBNull.Value) : new SqlParameter("@State", _AddrListMaint.Selectedstate);
                Parameters[10] = String.IsNullOrEmpty(_AddrListMaint.PostalCode) ? new SqlParameter("@ZipCd", DBNull.Value) : new SqlParameter("@ZipCd", _AddrListMaint.PostalCode);
                Parameters[11] = String.IsNullOrEmpty(_AddrListMaint.SelectedCountry) ? new SqlParameter("@Ctry", DBNull.Value) : new SqlParameter("@Ctry", _AddrListMaint.SelectedCountry);
                Parameters[12] = new SqlParameter("@MailInd", ConvertBoolDB(_AddrListMaint.MainMailingInd));
                Parameters[13] = new SqlParameter("@UserId", this.GetUserId);
                Parameters[14] = String.IsNullOrEmpty(_AddrListMaint.selectedregion) ? new SqlParameter("@Region", DBNull.Value) : new SqlParameter("@Region", _AddrListMaint.selectedregion);
                Parameters[15] = String.IsNullOrEmpty(_AddrListMaint.Address4) ? new SqlParameter("@Street4", DBNull.Value) : new SqlParameter("@Street4", _AddrListMaint.Address4);
                Parameters[16] = String.IsNullOrEmpty(_AddrListMaint.Address5) ? new SqlParameter("@Street5", DBNull.Value) : new SqlParameter("@Street5", _AddrListMaint.Address5);
                Parameters[17] = new SqlParameter("@RETURN_VALUE", SqlDbType.BigInt);
                Parameters[17].Direction = ParameterDirection.ReturnValue;

                var Cmd = await objDataEngine.ExecuteWithReturnValueAsync("WebAddressMaint", CommandType.StoredProcedure, Parameters);
                var Result = Convert.ToInt32(Cmd.Parameters["@RETURN_VALUE"].Value);
                var Descp = await GetMessageCode(Result);
                return Descp;
            }
            finally
            {
                objDataEngine.CloseConnection();
                
            }




        }
        public async Task<MsgRetriever> DelAddress(string RefTo, string RefKey, string RefCd)
        {
            var objDataEngine = new FleetDataEngine(AccessMode.CustomerService, DBType.Maint);

            try
            {


                await objDataEngine.InitiateConnectionAsync();
                SqlParameter[] Parameters = new SqlParameter[6];
                Parameters[0] = new SqlParameter("@IssNo", GetIssNo);
                Parameters[1] = String.IsNullOrEmpty(RefTo) ? new SqlParameter("@RefTo", DBNull.Value) : new SqlParameter("@RefTo", RefTo);
                Parameters[2] = String.IsNullOrEmpty(RefKey) ? new SqlParameter("@RefKey", DBNull.Value) : new SqlParameter("@RefKey", RefKey);
                Parameters[3] = String.IsNullOrEmpty(RefCd) ? new SqlParameter("@RefCd", DBNull.Value) : new SqlParameter("@RefCd", RefCd);
                Parameters[4] = new SqlParameter("@UserId", this.GetUserId);
                Parameters[5] = new SqlParameter("@RETURN_VALUE", SqlDbType.BigInt);
                Parameters[5].Direction = ParameterDirection.ReturnValue;
                var Cmd = await objDataEngine.ExecuteWithReturnValueAsync("WebAddressDelete", CommandType.StoredProcedure, Parameters);
                var Result = Convert.ToInt32(Cmd.Parameters["@RETURN_VALUE"].Value);

                var Descp = await GetMessageCode(Result);

                return Descp;
            }
            finally
            {
                objDataEngine.CloseConnection();
                
            }


        }
        #endregion

        #region "Contacts List"
        public async Task<List<ContactLstModel>> GetContactlist(string RefTo, string RefKey)
        {
            var objDataEngine = new FleetDataEngine(AccessMode.CustomerService, DBType.Maint);
            try
            {
                await objDataEngine.InitiateConnectionAsync();
                SqlParameter[] Parameters = new SqlParameter[3];
                Parameters[0] = new SqlParameter("@IssNo", GetIssNo);
                Parameters[1] = new SqlParameter("@RefTo", String.IsNullOrEmpty(RefTo) ? "" : RefTo);
                Parameters[2] = new SqlParameter("@RefKey", String.IsNullOrEmpty(RefKey) ? "" : RefKey);
                var execResult = await objDataEngine.ExecuteCommandAsync("WebContactListSelect", CommandType.StoredProcedure, Parameters);
                var _ContactLstModel = new List<ContactLstModel>();
                while (execResult.Read())
                {
                    _ContactLstModel.Add(new ContactLstModel
                    {
                        RefTo = Convert.ToString(execResult["RefTo"]),
                        RefCd = Convert.ToString(execResult["RefCd"]),
                        SelectedContactType = Convert.ToString(execResult["ContactType"]),
                        ContactName = Convert.ToString(execResult["Contact Name"]),
                        ContactNo = Convert.ToString(execResult["Contact No"]),
                        //Fax = Convert.ToString(execResult["FaxNo"]),
                        SelectedSts = Convert.ToString(execResult["Contact Status"]),
                        RawStatus = Convert.ToString(execResult["Status"]),
                        SelectedOccupation = Convert.ToString(execResult["Function"]),
                        RawOccupation = Convert.ToString(execResult["Occupation"]),
                        EmailAddr = Convert.ToString(execResult["EmailAddr"]),
                        CreationDate = DateConverter(execResult["CreationDate"]),
                        UserId = Convert.ToString(execResult["UserId"])
                    });
                };
                return _ContactLstModel;
            }
            finally
            {
                objDataEngine.CloseConnection();
                
            }
        }
        public async Task<ContactLstModel> GetContactDetail(string RefTo, string RefKey, string RefCd)
        {
            var objDataEngine = new FleetDataEngine(AccessMode.CustomerService, DBType.Maint);

            try
            {
                await objDataEngine.InitiateConnectionAsync();
                SqlParameter[] Parameters = new SqlParameter[4];
                Parameters[0] = new SqlParameter("@IssNo", GetIssNo);
                Parameters[1] = String.IsNullOrEmpty(RefTo) ? new SqlParameter("@RefTo", DBNull.Value) : new SqlParameter("@RefTo", RefTo);
                Parameters[2] = String.IsNullOrEmpty(RefKey) ? new SqlParameter("@RefKey", DBNull.Value) : new SqlParameter("@RefKey", RefKey);
                Parameters[3] = String.IsNullOrEmpty(RefCd) ? new SqlParameter("@RefCd", DBNull.Value) : new SqlParameter("@RefCd", RefCd);

                var execResult = await objDataEngine.ExecuteCommandAsync("WebContactSelect", CommandType.StoredProcedure, Parameters);
                var _Contact = new ContactLstModel();
                while (execResult.Read())
                {
                    _Contact.RefKey = Convert.ToString(execResult["RefTo"]);
                    _Contact.RefCd = Convert.ToString(execResult["RefCd"]);
                    //  _Contact.SelectedContactType = Convert.ToString(execResult["ContactType"]);
                    _Contact.SelectedContactType = _Contact.RefCd;
                    _Contact.ContactName = Convert.ToString(execResult["Contact Name"]);
                    //_Contact.Fax = Convert.ToString(execResult["FaxNo"]);
                    _Contact.ContactNo = Convert.ToString(execResult["Contact No"]);
                    _Contact.SelectedSts = Convert.ToString(execResult["Status"]);
                    _Contact.SelectedOccupation = Convert.ToString(execResult["Occupation"]);
                    _Contact.EmailAddr = Convert.ToString(execResult["EmailAddr"]);
                    _Contact.UserId = Convert.ToString(execResult["UserId"]);
                    _Contact.CreationDate = DateConverter(execResult["CreationDate"]);


                };
                return _Contact;
            }
            finally
            {
                objDataEngine.CloseConnection();
                
            }
        }
        public async Task<MsgRetriever> SaveContactsList(ContactLstModel _ContactList, string RefTo, string Func)
        {
            var objDataEngine = new FleetDataEngine(AccessMode.CustomerService, DBType.Maint);
            try
            {
                await objDataEngine.InitiateConnectionAsync();
                SqlParameter[] Parameters = new SqlParameter[12];
                Parameters[0] = String.IsNullOrEmpty(Func) ? new SqlParameter("@Func", DBNull.Value) : new SqlParameter("@Func", Func);
                Parameters[1] = new SqlParameter("@IssNo", GetIssNo);
                Parameters[2] = String.IsNullOrEmpty(RefTo) ? new SqlParameter("@RefTo", DBNull.Value) : new SqlParameter("@RefTo", RefTo);
                Parameters[3] = String.IsNullOrEmpty(_ContactList.RefKey) ? new SqlParameter("@RefKey", DBNull.Value) : new SqlParameter("@RefKey", _ContactList.RefKey);
                Parameters[4] = String.IsNullOrEmpty(_ContactList.SelectedContactType) ? new SqlParameter("@RefCd", DBNull.Value) : new SqlParameter("@RefCd", _ContactList.SelectedContactType);
                Parameters[5] = String.IsNullOrEmpty(_ContactList.ContactName) ? new SqlParameter("@ContactName", DBNull.Value) : new SqlParameter("@ContactName", _ContactList.ContactName);
                Parameters[6] = String.IsNullOrEmpty(_ContactList.SelectedOccupation) ? new SqlParameter("@Occupation", DBNull.Value) : new SqlParameter("@Occupation", _ContactList.SelectedOccupation);
                Parameters[7] = String.IsNullOrEmpty(_ContactList.ContactNo) ? new SqlParameter("@ContactNo", DBNull.Value) : new SqlParameter("@ContactNo", _ContactList.ContactNo);
                Parameters[8] = String.IsNullOrEmpty(_ContactList.SelectedSts) ? new SqlParameter("@Sts", DBNull.Value) : new SqlParameter("@Sts", _ContactList.SelectedSts);
                Parameters[9] = String.IsNullOrEmpty(_ContactList.EmailAddr) ? new SqlParameter("@EmailAddr", DBNull.Value) : new SqlParameter("@EmailAddr", _ContactList.EmailAddr);
                Parameters[10] = String.IsNullOrEmpty(this.GetUserId) ? new SqlParameter("@UserId", DBNull.Value) : new SqlParameter("@UserId", this.GetUserId);
                Parameters[11] = new SqlParameter("@RETURN_VALUE", SqlDbType.BigInt);
                Parameters[11].Direction = ParameterDirection.ReturnValue;
                var Cmd = await objDataEngine.ExecuteWithReturnValueAsync("WebContactMaint", CommandType.StoredProcedure, Parameters);
                var Result = Convert.ToInt32(Cmd.Parameters["@RETURN_VALUE"].Value);
                var Descp = await GetMessageCode(Result);
                return Descp;
            }
            finally
            {
                objDataEngine.CloseConnection();
                
            }
        }
        public async Task<MsgRetriever> DelContact(string RefTo, string RefKey, string RefCd)
        {
            var objDataEngine = new FleetDataEngine(AccessMode.CustomerService, DBType.Maint);

            try
            {
                await objDataEngine.InitiateConnectionAsync();
                SqlParameter[] Parameters = new SqlParameter[5];
                Parameters[0] = new SqlParameter("@IssNo", GetIssNo);
                Parameters[1] = new SqlParameter("@RefTo", String.IsNullOrEmpty(RefTo) ? "" : RefTo);
                Parameters[2] = new SqlParameter("@RefKey", String.IsNullOrEmpty(RefKey) ? "" : RefKey);
                Parameters[3] = new SqlParameter("@RefCd", String.IsNullOrEmpty(RefCd) ? "" : RefCd);
                Parameters[4] = new SqlParameter("@RETURN_VALUE", SqlDbType.BigInt);
                Parameters[4].Direction = ParameterDirection.ReturnValue;

                var Cmd = await objDataEngine.ExecuteWithReturnValueAsync("WebContactDelete", CommandType.StoredProcedure, Parameters);
                var Result = Convert.ToInt32(Cmd.Parameters["@RETURN_VALUE"].Value);
                var Descp = await GetMessageCode(Result);
                return Descp;
            }
            finally
            {
                objDataEngine.CloseConnection();
                
            }



        }
        #endregion

        #region "Vehicle"
        public async Task<List<VehiclesListModel>> GetVehicleList(string AcctNo, string ApplId)
        {
            var objDataEngine = new FleetDataEngine(AccessMode.CustomerService, DBType.Maint);

            try
            {
                await objDataEngine.InitiateConnectionAsync();
                SqlParameter[] Parameters = new SqlParameter[3];
                Parameters[0] = new SqlParameter("@IssNo", GetIssNo);
                Parameters[1] = String.IsNullOrEmpty(AcctNo) ? new SqlParameter("@AcctNo", DBNull.Value) : new SqlParameter("@AcctNo", AcctNo);
                Parameters[2] = String.IsNullOrEmpty(ApplId) ? new SqlParameter("@ApplId", DBNull.Value) : new SqlParameter("@ApplId", ApplId);

                var execResult = await objDataEngine.ExecuteCommandAsync("WebVehicleListSelect", CommandType.StoredProcedure, Parameters);
                var _GetVehicleList = new List<VehiclesListModel>();

                while (execResult.Read())
                {
                    _GetVehicleList.Add(new VehiclesListModel
                    {
                        AppcId = Convert.ToString(execResult["Appc Id"]),
                        CardNo = Convert.ToString(execResult["CardNo"]),//
                        SelectedCardType = Convert.ToString(execResult["Card Type"]),//
                        pin = Convert.ToString(execResult["PIN"]),//
                        VehRegtNo = Convert.ToString(execResult["VRN"]),//
                        VehRegDate = Convert.ToString(execResult["Registered Date"]),//
                        SelectedVehMaker = Convert.ToString(execResult["Vehicle Maker"]),//
                        SelectedSts = Convert.ToString(execResult["Status"]),//
                        XrefCardNo = Convert.ToString(execResult["Xref CardNo"]),//
                        OdoMeterReading = Convert.ToString(execResult["Odometer Reading"]),//
                        OdoMeterUpdate = Convert.ToString(execResult["Odometer Update"]),//
                        PolicyExpDate = Convert.ToString(execResult["Card Expiry"]),
                        RoadTaxExpDate = Convert.ToString(execResult["RoadTax Expiry"]),
                        SelectedVehType = Convert.ToString(execResult["Vehicle Type"]),
                        SelectedVehColor = Convert.ToString(execResult["Vehicle Color"]),
                        SelectedVehModel = Convert.ToString(execResult["Vehicle Model"]),
                        CardTerminated = Convert.ToString(execResult["Card Terminated"])
                    });
                };
                return _GetVehicleList;
            }
            finally
            {
                objDataEngine.CloseConnection();
                
            }



        }
        public async Task<VehiclesListModel> GetVehicleDetail(VehiclesListModel _VehiclesListModel)
        {
            var objDataEngine = new FleetDataEngine(AccessMode.CustomerService, DBType.Maint);
            try
            {
                await objDataEngine.InitiateConnectionAsync();
                SqlParameter[] Parameters = new SqlParameter[4];
                Parameters[0] = new SqlParameter("@IssNo", GetIssNo);
                Parameters[1] = String.IsNullOrEmpty(_VehiclesListModel.AppcId) ? new SqlParameter("@AppcId", DBNull.Value) : new SqlParameter("@AppcId", _VehiclesListModel.AppcId);
                Parameters[2] = String.IsNullOrEmpty(_VehiclesListModel.CardNo) ? new SqlParameter("@CardNo", DBNull.Value) : new SqlParameter("@CardNo", _VehiclesListModel.CardNo);
                Parameters[3] = String.IsNullOrEmpty(_VehiclesListModel.VehRegtNo) ? new SqlParameter("@VRN", DBNull.Value) : new SqlParameter("@VRN", _VehiclesListModel.VehRegtNo);
                var execResult = await objDataEngine.ExecuteCommandAsync("WebVehicleSelect", CommandType.StoredProcedure, Parameters);
                var _model = new VehiclesListModel();
                while (execResult.Read())
                {
                    if (string.IsNullOrEmpty(_VehiclesListModel.AppcId))
                    {
                        _model.CardNo = Convert.ToString(execResult["CardNo"]);
                    }
                    else
                    {
                        _model.AppcId = Convert.ToString(_VehiclesListModel.AppcId);
                    }
                    _model.VehRegtNo = Convert.ToString(execResult["VehRegsNo"]);
                    _model.SkdsInd = BaseClass.BoolConverter(execResult["SKDSInd"]);//hide
                    _model.SkdsQuota = ConverterDecimal(execResult["SKDS Quota"]);//hide
                    _model.SelectedVehMaker = Convert.ToString(execResult["Vehicle Maker"]);
                    _model.SelectedVehModel = Convert.ToString(execResult["Vehicle Model"]);
                    _model.VehRegDate = Convert.ToString(execResult["VehRegsDate"]);
                    _model.SelectedVehType = Convert.ToString(execResult["VehType"]);
                    _model.SelectedVehColor = Convert.ToString(execResult["Color"]);
                    _model.OdoMeterReading = Convert.ToString(execResult["CurrOdoReading"]);
                    _model.OdoMeterUpdate = Convert.ToString(execResult["OdoLastUpd"]);
                    _model.RoadTaxExpDate = Convert.ToString(execResult["RoadTaxExpiry"]);
                    _model.SelectedSts = Convert.ToString(execResult["Sts"]);
                    _model.CardExpiry = Convert.ToString(execResult["Card Expiry"]);
                    _model.XrefCardNo = Convert.ToString(execResult["XRefCardNo"]);
                    _model.CardTerminated = Convert.ToString(execResult["Card Terminated"]);
                };
                return _model;
            }
            finally
            {
                objDataEngine.CloseConnection();
                
            }
        }
        public async Task<MsgRetriever> SaveVehicleList(VehiclesListModel _VehiclesListModel)
        {
            var objDataEngine = new FleetDataEngine(AccessMode.CustomerService, DBType.Maint);
            try
            {
                await objDataEngine.InitiateConnectionAsync();
                SqlParameter[] Parameters = new SqlParameter[14];
                Parameters[0] = new SqlParameter("@IssNo", GetIssNo);
                Parameters[1] = String.IsNullOrEmpty(_VehiclesListModel.AppcId) ? new SqlParameter("@AppcId", DBNull.Value) : new SqlParameter("@AppcId", _VehiclesListModel.AppcId);
                Parameters[2] = String.IsNullOrEmpty(_VehiclesListModel.CardNo) ? new SqlParameter("@CardNo", DBNull.Value) : new SqlParameter("@CardNo", _VehiclesListModel.CardNo);
                Parameters[3] = String.IsNullOrEmpty(_VehiclesListModel.VehRegtNo) ? new SqlParameter("@VRN", DBNull.Value) : new SqlParameter("@VRN", _VehiclesListModel.VehRegtNo);
                Parameters[4] = new SqlParameter("@SKDSInd", ConvertBoolDB(_VehiclesListModel.SkdsInd));
                Parameters[5] = String.IsNullOrEmpty(_VehiclesListModel.SelectedVehMaker) ? new SqlParameter("@SKDSQuota", DBNull.Value) : new SqlParameter("@SKDSQuota", ConvertDecimalToDb(_VehiclesListModel.SkdsQuota));
                Parameters[6] = String.IsNullOrEmpty(_VehiclesListModel.SelectedVehMaker) ? new SqlParameter("@Manufacturer", DBNull.Value) : new SqlParameter("@Manufacturer", _VehiclesListModel.SelectedVehMaker);
                Parameters[7] = String.IsNullOrEmpty(_VehiclesListModel.SelectedVehModel) ? new SqlParameter("@Model", DBNull.Value) : new SqlParameter("@Model", _VehiclesListModel.SelectedVehModel);
                Parameters[8] = String.IsNullOrEmpty(_VehiclesListModel.VehRegDate) ? new SqlParameter("@VehRegsDate", DBNull.Value) : new SqlParameter("@VehRegsDate", _VehiclesListModel.VehRegDate);
                Parameters[9] = String.IsNullOrEmpty(_VehiclesListModel.SelectedVehType) ? new SqlParameter("@VehType", DBNull.Value) : new SqlParameter("@VehType", _VehiclesListModel.SelectedVehType);
                Parameters[10] = String.IsNullOrEmpty(_VehiclesListModel.SelectedVehColor) ? new SqlParameter("@Color", DBNull.Value) : new SqlParameter("@Color", _VehiclesListModel.SelectedVehColor);
                Parameters[11] = String.IsNullOrEmpty(_VehiclesListModel.RoadTaxExpDate) ? new SqlParameter("@RoadTaxExpiry", DBNull.Value) : new SqlParameter("@RoadTaxExpiry", _VehiclesListModel.RoadTaxExpDate);
                Parameters[12] = new SqlParameter("@UserId", this.GetUserId);
                Parameters[13] = new SqlParameter("@RETURN_VALUE", SqlDbType.BigInt);
                Parameters[13].Direction = ParameterDirection.ReturnValue;

                var Cmd = await objDataEngine.ExecuteWithReturnValueAsync("WebVehicleMaint", CommandType.StoredProcedure, Parameters);
                var Result = Convert.ToInt32(Cmd.Parameters["@RETURN_VALUE"].Value);
                var Descp = await GetMessageCode(Result);
                return Descp;
            }
            finally
            {
                objDataEngine.CloseConnection();
                
            }

        }
        #endregion

        #region "MiscellaneousInfo"
        public async Task<MiscellaneousInfoModel> GetMiscellaneousInfoDetail(int ApplId)
        {
            var objDataEngine = new FleetDataEngine(AccessMode.CustomerService, DBType.Maint);


            try
            {
                await objDataEngine.InitiateConnectionAsync();
                SqlParameter[] Parameters = new SqlParameter[2];
                Parameters[0] = new SqlParameter("@IssNo", GetIssNo);
                Parameters[1] = new SqlParameter("@ApplId", ApplId);

                var execResult = await objDataEngine.ExecuteCommandAsync("WebApplMiscInfoSelect", CommandType.StoredProcedure, Parameters);
                var _misInfo = new MiscellaneousInfoModel();

                while (execResult.Read())
                {
                    _misInfo.Designation = await BaseClass.WebGetRefLib("Occupation");
                    _misInfo.AuthName = Convert.ToString(execResult["AuthName"]);
                    _misInfo.SelectedDesignation = Convert.ToString(execResult["Designation"]);
                    _misInfo.AuthDate = Convert.ToString(execResult["AuthDate"]);

                };
                return _misInfo;
            }
            finally
            {
                objDataEngine.CloseConnection();
                
            }
        }
        public async Task<MsgRetriever> SaveMiscellaneousInfo(MiscellaneousInfoModel _miscellaneousInfo)
        {
            var objDataEngine = new FleetDataEngine(AccessMode.CardHolder, DBType.Maint);
            try
            {
                await objDataEngine.InitiateConnectionAsync();
                SqlParameter[] Parameters = new SqlParameter[6];
                SqlCommand cmd = new SqlCommand();
                Parameters[0] = new SqlParameter("@IssNo", GetIssNo);
                Parameters[1] = String.IsNullOrEmpty(_miscellaneousInfo.ApplId) ? new SqlParameter("@ApplId", DBNull.Value) : new SqlParameter("@ApplId", _miscellaneousInfo.ApplId);
                Parameters[2] = String.IsNullOrEmpty(_miscellaneousInfo.AuthName) ? new SqlParameter("@AuthName", DBNull.Value) : new SqlParameter("@AuthName", _miscellaneousInfo.AuthName);
                Parameters[3] = String.IsNullOrEmpty(_miscellaneousInfo.SelectedDesignation) ? new SqlParameter("@Designation", DBNull.Value) : new SqlParameter("@Designation", _miscellaneousInfo.SelectedDesignation);
                Parameters[4] = new SqlParameter("@AuthDate", ConvertDatetimeDB(_miscellaneousInfo.AuthDate));
                Parameters[5] = new SqlParameter("@RETURN_VALUE", SqlDbType.BigInt);
                Parameters[5].Direction = ParameterDirection.ReturnValue;
                var Cmd = await objDataEngine.ExecuteWithReturnValueAsync("WebApplMiscInfoMaint", CommandType.StoredProcedure, Parameters);
                var Result = Convert.ToInt32(Cmd.Parameters["@RETURN_VALUE"].Value);
                var Descp = await GetMessageCode(Result);
                return Descp;
            }
            finally
            {
                objDataEngine.CloseConnection();
                
            }
        }
        #endregion

        #region"SKDS"
        public async Task<List<SKDS>> GetSKDSList(SKDS _SKDS)
        {
            var objDataEngine = new FleetDataEngine(AccessMode.CustomerService, DBType.Maint);
            try
            {
                await objDataEngine.InitiateConnectionAsync();
                SqlParameter[] Parameters = new SqlParameter[4];
                Parameters[0] = new SqlParameter("@IssNo", GetIssNo);
                Parameters[1] = String.IsNullOrEmpty(_SKDS._CardnAccNo.AccNo) ? new SqlParameter("@AcctNo", DBNull.Value) : new SqlParameter("@AcctNo", _SKDS._CardnAccNo.AccNo);
                Parameters[2] = String.IsNullOrEmpty(_SKDS.ApplId) ? new SqlParameter("@ApplId", DBNull.Value) : new SqlParameter("@ApplId", _SKDS.ApplId);
                Parameters[3] = new SqlParameter("@Page", DBNull.Value);
                var execResult = await objDataEngine.ExecuteCommandAsync("WebAcctSubsidyListSelect", CommandType.StoredProcedure, Parameters);
                var _SkdsList = new List<SKDS>();
                while (execResult.Read())
                {
                    _SkdsList.Add(new SKDS
                    {
                        TxnId = Convert.ToString(execResult["TxnId"]),
                        SKDSNo = Convert.ToString(execResult["SKDSNo"]),
                        SKDSLitreQuota = ConverterDecimal(execResult["Quota"]),
                        EffFromDate = DateConverter(execResult["From Date"]),
                        EffToDate = DateConverter(execResult["To Date"]),
                        Refference = Convert.ToString(execResult["Reference"]),
                        Remarks = Convert.ToString(execResult["Remarks"]),
                        LastUpdDate = DateConverter(execResult["Last Update Date"]),
                        UserId = Convert.ToString(execResult["User Id"]),
                        CreationDate = DateConverter(execResult["Creation Date"]),
                        SelectedSts = Convert.ToString(execResult["Status"]),
                        SelectedSubsidyLevel = Convert.ToString(execResult["SubsidyLevel"])
                    });
                };
                return _SkdsList;
            }
            finally
            {
                objDataEngine.CloseConnection();
                
            }
        }
        public async Task<SKDS> GetSKDSDetail(SKDS _SKDS)
        {
            var objDataEngine = new FleetDataEngine(AccessMode.CustomerService, DBType.Maint);
            try
            {
                await objDataEngine.InitiateConnectionAsync();
                SqlParameter[] Parameters = new SqlParameter[4];
                Parameters[0] = new SqlParameter("@IssNo", GetIssNo);
                Parameters[1] = String.IsNullOrEmpty(_SKDS._CardnAccNo.AccNo) ? new SqlParameter("@AcctNo", DBNull.Value) : new SqlParameter("@AcctNo", _SKDS._CardnAccNo.AccNo);
                Parameters[2] = String.IsNullOrEmpty(_SKDS.ApplId) ? new SqlParameter("@ApplId", DBNull.Value) : new SqlParameter("@ApplId", _SKDS.ApplId);
                Parameters[3] = String.IsNullOrEmpty(_SKDS.TxnId) ? new SqlParameter("@TxnId", DBNull.Value) : new SqlParameter("@TxnId", _SKDS.TxnId);

                var execResult = await objDataEngine.ExecuteCommandAsync("WebAcctSubsidySelect", CommandType.StoredProcedure, Parameters);

                var SKDSDetail = new SKDS();
                while (execResult.Read())
                {
                    SKDSDetail.TxnId = Convert.ToString(execResult["TxnId"]);
                    SKDSDetail.SKDSNo = Convert.ToString(execResult["SKDSNo"]);
                    SKDSDetail.SKDSLitreQuota = ConverterDecimal(execResult["Quota"]);
                    SKDSDetail.QuotaFromDate = DateConverter(execResult["QuotaFromDate"]);
                    SKDSDetail.QuotaToDate = DateConverter(execResult["QuotaToDate"]);
                    SKDSDetail.EffFromDate = DateConverter(execResult["EffFromDate"]);
                    SKDSDetail.EffToDate = DateConverter(execResult["EffToDate"]);
                    SKDSDetail.Refference = Convert.ToString(execResult["Ref"]);
                    SKDSDetail.LastSubsidyDate = DateConverter(execResult["LastSubsidyDate"]);
                    SKDSDetail.Remarks = Convert.ToString(execResult["Remarks"]);
                    SKDSDetail.LastUpdDate = DateConverter(execResult["LastUpdDate"]);
                    SKDSDetail.UserId = Convert.ToString(execResult["UserId"]);
                    SKDSDetail.CreationDate = DateConverter(execResult["CreationDate"]);
                    SKDSDetail.SelectedSts = Convert.ToString(execResult["Sts"]);
                    SKDSDetail.SelectedSubsidyLevel = Convert.ToString(execResult["SubsidyLevel"]);
                    //SKDSDetail.SelectedCategory = Convert.ToString(execResult[""])

                };
                return SKDSDetail;
            }
            finally
            {
                objDataEngine.CloseConnection();
                
            }
        }
        public async Task<MsgRetriever> SaveSKDS(SKDS _SKDS)
        {
            var objDataEngine = new FleetDataEngine(AccessMode.CustomerService, DBType.Maint);

            try
            {
                await objDataEngine.InitiateConnectionAsync();
                SqlParameter[] Parameters = new SqlParameter[17];
                Parameters[0] = new SqlParameter("@IssNo", GetIssNo);
                Parameters[1] = String.IsNullOrEmpty(_SKDS._CardnAccNo.AccNo) ? new SqlParameter("@AcctNo", DBNull.Value) : new SqlParameter("@AcctNo", _SKDS._CardnAccNo.AccNo);
                Parameters[2] = String.IsNullOrEmpty(_SKDS.ApplId) ? new SqlParameter("@ApplId", DBNull.Value) : new SqlParameter("@ApplId", _SKDS.ApplId);
                Parameters[3] = String.IsNullOrEmpty(_SKDS.TxnId) ? new SqlParameter("@TxnId", DBNull.Value) : new SqlParameter("@TxnId", _SKDS.TxnId);
                Parameters[4] = String.IsNullOrEmpty(_SKDS.SKDSNo) ? new SqlParameter("@SKDSNo", DBNull.Value) : new SqlParameter("@SKDSNo", _SKDS.SKDSNo);
                Parameters[5] = new SqlParameter("@QuotaFromDate", ConvertDatetimeDB(_SKDS.QuotaFromDate));
                Parameters[6] = new SqlParameter("@QuotaToDate", ConvertDatetimeDB(_SKDS.QuotaToDate));
                Parameters[7] = new SqlParameter("@Quota", ConvertDecimalToDb(ConverterDecimal(_SKDS.SKDSLitreQuota)));
                Parameters[8] = String.IsNullOrEmpty(_SKDS.Refference) ? new SqlParameter("@Ref", DBNull.Value) : new SqlParameter("@Ref", _SKDS.Refference);

                Parameters[9] = new SqlParameter("@LastSubsidyDate", ConvertDatetimeDB(_SKDS.LastSubsidyDate));

                Parameters[10] = new SqlParameter("@EffFromDate", ConvertDatetimeDB(_SKDS.EffFromDate));
                Parameters[11] = new SqlParameter("@EffToDate", ConvertDatetimeDB(_SKDS.EffToDate));
                Parameters[12] = String.IsNullOrEmpty(_SKDS.Remarks) ? new SqlParameter("@Remarks ", DBNull.Value) : new SqlParameter("@Remarks ", _SKDS.Remarks);
                Parameters[13] = String.IsNullOrEmpty(_SKDS.SelectedSts) ? new SqlParameter("@Sts ", DBNull.Value) : new SqlParameter("@Sts ", _SKDS.SelectedSts);
                Parameters[14] = new SqlParameter("@UserId", this.GetUserId);
                Parameters[15] = String.IsNullOrEmpty(_SKDS.SelectedSubsidyLevel) ? new SqlParameter("@SubsidyLevel", DBNull.Value) : new SqlParameter("@SubsidyLevel", _SKDS.SelectedSubsidyLevel);
                Parameters[16] = new SqlParameter("@RETURN_VALUE", SqlDbType.BigInt);
                Parameters[16].Direction = ParameterDirection.ReturnValue;

                var Cmd = await objDataEngine.ExecuteWithReturnValueAsync("WebAcctSubsidyMaint", CommandType.StoredProcedure, Parameters);
                var Result = Convert.ToInt32(Cmd.Parameters["@RETURN_VALUE"].Value);
                var Descp = await GetMessageCode(Result);
                return Descp;
            }
            finally
            {
                objDataEngine.CloseConnection();
                
            }



        }
        #endregion

        #region "AcctDepositInfo"
        public async Task<List<CreditAssesOperation>> GetAcctDepositInfoList(string applid = null, string acctNo = null, string CorpCd = null)
        {
            var objDataEngine = new FleetDataEngine(AccessMode.CustomerService, DBType.Maint);
            try
            {
                await objDataEngine.InitiateConnectionAsync();
                SqlParameter[] Parameters = new SqlParameter[4];
                Parameters[0] = new SqlParameter("@IssNo", GetIssNo);
                Parameters[1] = String.IsNullOrEmpty(applid) ? new SqlParameter("@ApplId", DBNull.Value) : new SqlParameter("@ApplId", applid);
                Parameters[2] = String.IsNullOrEmpty(acctNo) ? new SqlParameter("@AcctNo", DBNull.Value) : new SqlParameter("@AcctNo", acctNo);
                Parameters[3] = String.IsNullOrEmpty(CorpCd) ? new SqlParameter("@CorpCd", DBNull.Value) : new SqlParameter("@CorpCd", CorpCd);
                var execResult = await objDataEngine.ExecuteCommandAsync("WebAcctDepositInfoListSelect", CommandType.StoredProcedure, Parameters);
                var _acctDeptInfo = new List<CreditAssesOperation>();
                while (execResult.Read())
                {
                    _acctDeptInfo.Add(new CreditAssesOperation
                    {
                        SelectedDirectDebitInd = Convert.ToString(execResult["DirectDebitInd"]),
                        SelectedDepositType = Convert.ToString(execResult["DepositType"]),
                        SelectedBankAcctType = Convert.ToString(execResult["BankAcctType"]), //hafidz
                        SelectedBankName = Convert.ToString(execResult["BankName"]),
                        BankAcctNo = Convert.ToString(execResult["BankAcctNo"]), //hafidz
                        DepositAmt = ConverterDecimal(execResult["DepositAmt"]),
                        Txnid = Convert.ToString(execResult["TxnId"]),
                        UserId = Convert.ToString(execResult["UserId"]),
                        Creationdt = Convert.ToString(execResult["CreationDate"]),
                        DepositFromDate = DateConverter(execResult["DepositFromDate"]),
                        DepositToDate = DateConverter(execResult["DepositToDate"]),
                        BgSerialNo = Convert.ToString(execResult["BgSerialNo"]),
                        ValidityDate = DateConverter(execResult["ValidityDate"]),
                        NRID = Convert.ToString(execResult["NIRD"]),
                        SecurityAmt = Convert.ToString(execResult["SecurityDeposit"]),
                        SAPRefNo = Convert.ToString(execResult["SAPRefNo"]),

                    });
                };
                return _acctDeptInfo;
            }
            finally
            {
                objDataEngine.CloseConnection();
                
            }
        }
        public async Task<CreditAssesOperation> GetAcctDepositInfoDetail(string applid = null, string acctNo = null, string txnid = null, string corpCd = null)
        {
            var objDataEngine = new FleetDataEngine(AccessMode.CustomerService, DBType.Maint);
            try
            {
                await objDataEngine.InitiateConnectionAsync();
                SqlParameter[] Parameters = new SqlParameter[5];
                Parameters[0] = new SqlParameter("@IssNo", GetIssNo);
                Parameters[1] = String.IsNullOrEmpty(txnid) ? new SqlParameter("@TxnId", DBNull.Value) : new SqlParameter("@TxnId", txnid);
                Parameters[2] = String.IsNullOrEmpty(applid) ? new SqlParameter("@ApplId", DBNull.Value) : new SqlParameter("@ApplId", applid);
                Parameters[3] = String.IsNullOrEmpty(acctNo) ? new SqlParameter("@AcctNo", DBNull.Value) : new SqlParameter("@AcctNo", acctNo);
                Parameters[4] = String.IsNullOrEmpty(corpCd) ? new SqlParameter("@CorpCd", DBNull.Value) : new SqlParameter("@CorpCd", corpCd);

                var execResult = await objDataEngine.ExecuteCommandAsync("WebAcctDepositInfoSelect", CommandType.StoredProcedure, Parameters);

                var _GetAcctDeptInfo = new CreditAssesOperation();
                while (execResult.Read())
                {
                    _GetAcctDeptInfo.DirectDebitInd = BoolConverter(execResult["DirectDebitInd"]);
                    _GetAcctDeptInfo.SelectedDepositType = Convert.ToString(execResult["DepositType"]);
                    _GetAcctDeptInfo.ValidityDate = DateConverter(execResult["ValidityDate"]);
                    _GetAcctDeptInfo.SelectedBankAcctType = Convert.ToString(execResult["BankAcctType"]);
                    _GetAcctDeptInfo.SelectedBankName = Convert.ToString(execResult["BankName"]);
                    _GetAcctDeptInfo.BankAcctNo = Convert.ToString(execResult["BankAcctNo"]);
                    _GetAcctDeptInfo.DepositAmt = ConverterDecimal(execResult["DepositAmt"]);
                    _GetAcctDeptInfo.BankBranchCode = Convert.ToString(execResult["BGSerialNo"]);
                    _GetAcctDeptInfo.DepositFromDate = DateConverter(execResult["EffFromDate"]);
                    _GetAcctDeptInfo.DepositToDate = DateConverter(execResult["EffToDate"]);
                    _GetAcctDeptInfo.NRID = Convert.ToString(execResult["NIRD"]);
                    _GetAcctDeptInfo.remarks = Convert.ToString(execResult["Remarks"]);
                    _GetAcctDeptInfo.Txnid = Convert.ToString(execResult["TxnId"]);
                    _GetAcctDeptInfo.UserId = Convert.ToString(execResult["UserId"]);
                    _GetAcctDeptInfo.Creationdt = Convert.ToString(execResult["CreationDate"]);
                    _GetAcctDeptInfo.SAPRefNo = Convert.ToString(execResult["SAPRefNo"]);

                }
                return _GetAcctDeptInfo;
            }
            finally
            {
                objDataEngine.CloseConnection();
                
            }



        }
        public async Task<MsgRetriever> SaveAcctDepositInfo(CreditAssesOperation _AcctDeptInfo, string acctNo = null, string applId = null, string corpCd = null)
        {
            var objDataEngine = new FleetDataEngine(AccessMode.CardHolder, DBType.Maint);

            try
            {
                await objDataEngine.InitiateConnectionAsync();
                SqlParameter[] Parameters = new SqlParameter[20];
                SqlCommand cmd = new SqlCommand();

                Parameters[0] = new SqlParameter("@IssNo", GetIssNo);
                Parameters[1] = String.IsNullOrEmpty(applId) ? new SqlParameter("@ApplId", DBNull.Value) : new SqlParameter("@ApplId", applId);
                Parameters[2] = String.IsNullOrEmpty(acctNo) ? new SqlParameter("@AcctNo", DBNull.Value) : new SqlParameter("@AcctNo", acctNo);
                Parameters[3] = String.IsNullOrEmpty(_AcctDeptInfo.Txnid) ? new SqlParameter("@TxnId", DBNull.Value) : new SqlParameter("@TxnId", _AcctDeptInfo.Txnid);
                Parameters[4] = new SqlParameter("@DepositInd", ConvertBoolDB(_AcctDeptInfo.DirectDebitInd));
                Parameters[5] = String.IsNullOrEmpty(_AcctDeptInfo.SelectedDepositType) ? new SqlParameter("@DepositType", DBNull.Value) : new SqlParameter("@DepositType", _AcctDeptInfo.SelectedDepositType);
                Parameters[6] = new SqlParameter("@ValidityDate", DateConverterDB(_AcctDeptInfo.ValidityDate));
                Parameters[7] = String.IsNullOrEmpty(_AcctDeptInfo.SelectedBankAcctType) ? new SqlParameter("@BankAcctType", DBNull.Value) : new SqlParameter("@BankAcctType", _AcctDeptInfo.SelectedBankAcctType);
                Parameters[8] = String.IsNullOrEmpty(_AcctDeptInfo.SelectedBankName) ? new SqlParameter("@BankName", DBNull.Value) : new SqlParameter("@BankName", _AcctDeptInfo.SelectedBankName);
                Parameters[9] = String.IsNullOrEmpty(_AcctDeptInfo.BankAcctNo) ? new SqlParameter("@BankAcctNo", DBNull.Value) : new SqlParameter("@BankAcctNo", _AcctDeptInfo.BankAcctNo);
                Parameters[10] = new SqlParameter("@DepositAmt", ConvertDecimalToDb(_AcctDeptInfo.DepositAmt));
                Parameters[11] = String.IsNullOrEmpty(_AcctDeptInfo.BankBranchCode) ? new SqlParameter("@BGSerialNo", DBNull.Value) : new SqlParameter("@BGSerialNo", _AcctDeptInfo.BankBranchCode);
                Parameters[12] = new SqlParameter("@EffFromDate", DateConverterDB(_AcctDeptInfo.DepositFromDate));
                Parameters[13] = new SqlParameter("@EffToDate", DateConverterDB(_AcctDeptInfo.DepositToDate));
                Parameters[14] = String.IsNullOrEmpty(_AcctDeptInfo.NRID) ? new SqlParameter("@NIRD", DBNull.Value) : new SqlParameter("@NIRD", DateConverterDB(_AcctDeptInfo.NRID));
                Parameters[15] = String.IsNullOrEmpty(_AcctDeptInfo.remarks) ? new SqlParameter("@Remarks", DBNull.Value) : new SqlParameter("@Remarks", (_AcctDeptInfo.remarks));
                Parameters[16] = new SqlParameter("@UserId", this.GetUserId);
                Parameters[17] = String.IsNullOrEmpty(_AcctDeptInfo.SecurityAmt) ? new SqlParameter("@SecurityDepositAmt", DBNull.Value) : new SqlParameter("@SecurityDepositAmt", _AcctDeptInfo.SecurityAmt);
                Parameters[18] = String.IsNullOrEmpty(corpCd) ? new SqlParameter("@CorpCd", DBNull.Value) : new SqlParameter("@CorpCd", corpCd);
                Parameters[19] = String.IsNullOrEmpty(_AcctDeptInfo.SAPRefNo) ? new SqlParameter("@SAPRefNo", DBNull.Value) : new SqlParameter("@SAPRefNo", _AcctDeptInfo.SAPRefNo);
                Parameters[19] = new SqlParameter("@RETURN_VALUE", SqlDbType.BigInt);
                Parameters[19].Direction = ParameterDirection.ReturnValue;

                var Cmd = await objDataEngine.ExecuteWithReturnValueAsync("WebAcctDepositInfoMaint", CommandType.StoredProcedure, Parameters);
                var Result = Convert.ToInt32(Cmd.Parameters["@RETURN_VALUE"].Value);
                var Descp = await GetMessageCode(Result);
                return Descp;
            }
            finally
            {
                objDataEngine.CloseConnection();
                
            }
        }
        #endregion

        #region "Milestone"
        public async Task<List<Milestone>> WebMilestoneListSelect(Milestone _milestone)
        {
            if (string.IsNullOrEmpty(_milestone.workflowcd))
                _milestone.workflowcd = "APPL";
            var objDataEngine = new FleetDataEngine(AccessMode.CustomerService, DBType.Maint);
            try
            {
                await objDataEngine.InitiateConnectionAsync();
                SqlParameter[] Parameters = new SqlParameter[3];
                Parameters[0] = String.IsNullOrEmpty(this.GetUserId) ? new SqlParameter("@UserId", DBNull.Value) : new SqlParameter("@UserId", this.GetUserId);
                Parameters[1] = new SqlParameter("@WorkflowCd", _milestone.workflowcd);
                Parameters[2] = new SqlParameter("@Ind", _milestone.Ind);

                var execResult = await objDataEngine.ExecuteCommandAsync("WebMilestoneListSelect", CommandType.StoredProcedure, Parameters);
                var getMilestone = new List<Milestone>();

                while (execResult.Read())
                {
                        var _ms = new Milestone();
                        _ms.SelectedTaskNo = Convert.ToString(execResult["TaskNo"]);
                    _ms.TaskDescp = Convert.ToString(execResult["TaskDescp"]);
                    _ms.selectedStatus = Convert.ToString(execResult["StsDescp"]);
                        _ms.CreationDate = DateTimeConverter2(execResult["CreationDate"]);
                        _ms.LastUpdDate = Convert.ToString(execResult["LastUpdDate"]);
                    if (_milestone.workflowcd == "APPL")
                    {
                        _ms.selectedReasonCd = Convert.ToString(execResult["ReasonCd"]);
                        _ms.Remarks = Convert.ToString(execResult["Remarks"]);
                        _ms.CompanyName = Convert.ToString(execResult["CmpyName1"]);
                        _ms.RecallDate = Convert.ToString(execResult["RecallDate"]);
                        _ms.RefKey = Convert.ToInt64(execResult["RefKey"]);
                        _ms.selectedPriority = Convert.ToString(execResult["Priority"]);
                    }
                   else if (_milestone.workflowcd == "Adj" || _milestone.workflowcd == "Pymt" || _milestone.workflowcd == "MERCHADJ")
                    {
                        _ms.ID = ConvertInt(execResult["Id"]);
                       // _ms.selectedStatus = Convert.ToString(execResult["StsDescp"]);
                        _ms.BatchID = Convert.ToString(execResult["BatchId"]);
                        _ms.RefKey = Convert.ToInt64(execResult["RefKey"]);
                        _ms.selectedPriority = Convert.ToString(execResult["Priority"]);
                    }
                    else
                    {
                        _ms.RefKey = Convert.ToInt32(execResult["RefKey"].ToString());
                        _ms.Descp = Convert.ToString(execResult["RequestType"].ToString());
                        _ms.CardNumber = Convert.ToString(execResult["CardNo"].ToString());
                        _ms.AcctNo = Convert.ToString(execResult["AcctNo"].ToString());
                        _ms.RequestValue = Convert.ToString(execResult["ReqVal"].ToString());
                        _ms.workflowcd = Convert.ToString(execResult["WorkflowCd"].ToString());
                        _ms.CompanyName = Convert.ToString(execResult["CmpyName"].ToString());
                        _ms.RequestBy = Convert.ToString(execResult["RequestBy"].ToString());
                        _ms.RecallDate =Convert.ToString(execResult["LastUpdDate"].ToString());
                    }
                    getMilestone.Add(_ms);
                };
                return getMilestone;
            }catch(Exception ex)
            {
                return null;
                throw ex;
            }
            finally
            {
                objDataEngine.CloseConnection();              
            }
        }
        public async Task<List<PukalApproval>> WebPukalMilestoneListSelect(Milestone _milestone)
        {
            var objDataEngine = new FleetDataEngine(AccessMode.CustomerService, DBType.Maint);
            try
            {
                await objDataEngine.InitiateConnectionAsync();
                SqlParameter[] Parameters = new SqlParameter[3];
                Parameters[0] = String.IsNullOrEmpty(this.GetUserId) ? new SqlParameter("@UserId", DBNull.Value) : new SqlParameter("@UserId", this.GetUserId);
                Parameters[1] = new SqlParameter("@WorkflowCd", _milestone.workflowcd);
                Parameters[2] = new SqlParameter("@Ind", _milestone.Ind);
                var execResult = await objDataEngine.ExecuteCommandAsync("WebMilestoneListSelect", CommandType.StoredProcedure, Parameters);
                var pukalApprLst = new List<PukalApproval>();
                if(execResult.HasRows)
                {
                    while (execResult.Read())
                    {
                        var _ms = new PukalApproval();
                        _ms.ID = Convert.ToInt64(execResult["Id"]);
                        _ms.Refkey = Convert.ToString(execResult["Refkey"]);
                        _ms.TaskNo = Convert.ToInt32(execResult["TaskNo"]);
                        _ms.TaskDescp = Convert.ToString(execResult["TaskDescp"]);
                        _ms.Priority = Convert.ToString(execResult["Priority"]);
                        _ms.CreationDate = DateConverter(execResult["CreationDate"]);
                        _ms.LastUpdDate = DateConverter(execResult["LastUpdDate"]);
                        _ms.Sts =  Convert.ToString(execResult["Sts"]);
                        _ms.StsDescp = Convert.ToString(execResult["StsDescp"]);
                        _ms.RefCd = Convert.ToString(execResult["RefCd"]);
                        _ms.AreaCode = Convert.ToString(execResult["AreaCode"]);
                        _ms.ChequeNo = Convert.ToInt64(execResult["ChequeNo"]);
                        _ms.ChequeAmount = Convert.ToDecimal(execResult["ChequeAmt"]);
                        _ms.StmtDate = DateConverter(execResult["StmtDate"]);
                        pukalApprLst.Add(_ms);
                    }
                }
                return pukalApprLst;
            }catch(Exception ex)
            {
                return null;
                throw ex;
            }
            finally
            {
                objDataEngine.CloseConnection();
            }
        }
        public async Task<List<Milestone>> WebMilestoneHistorySelect(Milestone _milestone)
        {
            var objDataEngine = new FleetDataEngine(AccessMode.CustomerService, DBType.Maint);
            try
            {
                await objDataEngine.InitiateConnectionAsync();
                SqlParameter[] Parameters = new SqlParameter[2];
                Parameters[0] = String.IsNullOrEmpty(_milestone.workflowcd) ? new SqlParameter("@WorkflowCd", "APPL") : new SqlParameter("@WorkflowCd", _milestone.workflowcd);
                Parameters[1] = new SqlParameter("@RefKey", _milestone.RefKey);

                var execResult = await objDataEngine.ExecuteCommandAsync("WebMilestoneHistorySelect", CommandType.StoredProcedure, Parameters);

                var milestoneList = new List<Milestone>();
                while (execResult.Read())
                {
                    var milestoneDetail = new Milestone();
                    milestoneDetail.ID = Convert.ToInt64(execResult["Id"]);
                    milestoneDetail.SelectedTaskNo = Convert.ToString(execResult["TaskNo"]);
                    milestoneDetail.RefKey = Convert.ToInt64(execResult["RefKey"]);
                    milestoneDetail.selectedOwner = Convert.ToString(execResult["Owner"]);
                    milestoneDetail.selectedReasonCd = Convert.ToString(execResult["ReasonCd"]);
                    milestoneDetail.Remarks = Convert.ToString(execResult["Remarks"]);
                    milestoneDetail.RecallDate = Convert.ToString(execResult["RecallDate"]);
                    milestoneDetail.PrevId = Convert.ToString(execResult["PrevId"]);
                    milestoneDetail.selectedStatus = Convert.ToString(execResult["Sts"]);
                    milestoneDetail.Descp = Convert.ToString(execResult["StsDescp"]);
                    milestoneDetail.UserId = Convert.ToString(execResult["UserId"]);
                    milestoneDetail.CreationDate = DateTimeConverter2(execResult["CreationDate"]);
                    milestoneDetail.LastUpdDate = DateTimeConverter2(execResult["LastUpdDate"]);
                    milestoneDetail.TaskDescp = Convert.ToString(execResult["TaskDescp"]);
                    milestoneList.Add(milestoneDetail);
                };
                return milestoneList;
            }
            finally
            {
                objDataEngine.CloseConnection();             
            }
        }
        public async Task<Milestone> WebMilestoneApplValidation(Milestone _milestone)
        {
            var objDataEngine = new FleetDataEngine(AccessMode.CustomerService, DBType.Maint);
            try
            {
                await objDataEngine.InitiateConnectionAsync();
                SqlParameter[] Parameters = new SqlParameter[2];
                Parameters[0] = new SqlParameter("@IssNo", GetIssNo);
                Parameters[1] = new SqlParameter("@ApplId", _milestone.aprId);

                var execResult = await objDataEngine.ExecuteCommandAsync("WebMilestoneApplValidation", CommandType.StoredProcedure, Parameters);

                while (execResult.Read())
                {
                    if (!string.IsNullOrEmpty(Convert.ToString(execResult["AssessmentType"])))
                        _milestone.Descp = Convert.ToString(execResult["AssessmentType"]);
                    _milestone.CreditLimit = ConverterDecimal(execResult["CreditLimit"]);
                    _milestone.SecurityAmt = ConverterDecimal(execResult["SecurityAmt"]);
                };
                return _milestone;
            }
            finally
            {
                objDataEngine.CloseConnection();               
            }
        }
        public async Task<MsgRetriever> SaveMilestone(Milestone _milestone)
        {
            if (_milestone.selectedStatus == "T")
            {
                _milestone.SelectedTaskNo = null;
            }
            var objDataEngine = new FleetDataEngine(AccessMode.CustomerService, DBType.Maint);
            try
            {
                await objDataEngine.InitiateConnectionAsync();
<<<<<<< HEAD
=======

>>>>>>> p5.0.38
                SqlParameter[] Parameters;
                if (_milestone.ActionSP.ToLower() == "WebMilestoneSPOApproval".ToLower())
                {
                    Parameters = new SqlParameter[12];
                    Parameters[0] = new SqlParameter("@Id", ConvertLongToDb(_milestone.ID));
                    Parameters[1] = String.IsNullOrEmpty(_milestone.SelectedTaskNo) ? new SqlParameter("@TaskNo", DBNull.Value) : new SqlParameter("@TaskNo", _milestone.SelectedTaskNo);
                    Parameters[2] = new SqlParameter("@RefKey", ConvertLongToDb(_milestone.aprId));
                    Parameters[3] = new SqlParameter("@RefNo", String.Empty);
                    Parameters[4] = String.IsNullOrEmpty(_milestone.selectedOwner) ? new SqlParameter("@Owner", DBNull.Value) : new SqlParameter("@Owner", _milestone.selectedOwner);
                    Parameters[5] = String.IsNullOrEmpty(_milestone.selectedPriority) ? new SqlParameter("@Priority", DBNull.Value) : new SqlParameter("@Priority", _milestone.selectedPriority); //new SqlParameter("@Priority", ConvertIntToDb(_milestone.selectedPriority));
                    Parameters[6] = String.IsNullOrEmpty(_milestone.Remarks) ? new SqlParameter("@Remarks", DBNull.Value) : new SqlParameter("@Remarks", _milestone.Remarks);
                    Parameters[7] = String.IsNullOrEmpty(_milestone.selectedReasonCd) ? new SqlParameter("@ReasonCd", DBNull.Value) : new SqlParameter("@ReasonCd", _milestone.selectedReasonCd);
                    Parameters[8] = new SqlParameter("@RecallDate", ConvertDatetimeDB(_milestone.RecallDate));
                    Parameters[9] = String.IsNullOrEmpty(_milestone.selectedStatus) ? new SqlParameter("@Sts", DBNull.Value) : new SqlParameter("@Sts", _milestone.selectedStatus);
                    Parameters[10] = String.IsNullOrEmpty(this.GetUserId) ? new SqlParameter("@UserId", DBNull.Value) : new SqlParameter("@UserId", this.GetUserId);
                    Parameters[11] = new SqlParameter("@RETURN_VALUE", SqlDbType.BigInt);
                    Parameters[11].Direction = ParameterDirection.ReturnValue;
                }
                else
                {
                    Parameters = new SqlParameter[11];
                    Parameters[0] = new SqlParameter("@Id", ConvertLongToDb(_milestone.ID));
                    Parameters[1] = String.IsNullOrEmpty(_milestone.SelectedTaskNo) ? new SqlParameter("@TaskNo", DBNull.Value) : new SqlParameter("@TaskNo", _milestone.SelectedTaskNo);
                    Parameters[2] = _milestone.ActionSP.ToLower() == "WebMilestonePukalPaymentApproval".ToLower() ? new SqlParameter("@RefKey", Convert.ToInt64(_milestone.aprId)) : new SqlParameter("@ApplId", Convert.ToInt64(_milestone.aprId));
                    Parameters[3] = String.IsNullOrEmpty(_milestone.selectedOwner) ? new SqlParameter("@Owner", DBNull.Value) : new SqlParameter("@Owner", _milestone.selectedOwner);
                    Parameters[4] = String.IsNullOrEmpty(_milestone.selectedPriority) ? new SqlParameter("@Priority", DBNull.Value) : new SqlParameter("@Priority", Convert.ToInt16(_milestone.selectedPriority));
                    Parameters[5] = String.IsNullOrEmpty(_milestone.Remarks) ? new SqlParameter("@Remarks", DBNull.Value) : new SqlParameter("@Remarks", _milestone.Remarks);
                    Parameters[6] = String.IsNullOrEmpty(_milestone.selectedReasonCd) ? new SqlParameter("@ReasonCd", DBNull.Value) : new SqlParameter("@ReasonCd", _milestone.selectedReasonCd);
                    Parameters[7] = new SqlParameter("@RecallDate", ConvertDatetimeDB(_milestone.RecallDate));
                    Parameters[8] = String.IsNullOrEmpty(_milestone.selectedStatus) ? new SqlParameter("@Sts", DBNull.Value) : new SqlParameter("@Sts", _milestone.selectedStatus);
                    Parameters[9] = String.IsNullOrEmpty(this.GetUserId) ? new SqlParameter("@UserId", DBNull.Value) : new SqlParameter("@UserId", this.GetUserId);
                    Parameters[10] = new SqlParameter("@RETURN_VALUE", SqlDbType.BigInt);
                    Parameters[10].Direction = ParameterDirection.ReturnValue;
                }

                var Cmd = await objDataEngine.ExecuteWithReturnValueAsync(_milestone.ActionSP, CommandType.StoredProcedure, Parameters);
                var Result = Convert.ToInt32(Cmd.Parameters["@RETURN_VALUE"].Value);
                var Descp = await GetMessageCode(Result);
                return Descp;
<<<<<<< HEAD
            }
            
            catch (Exception ex)
            {
                return null;
=======
>>>>>>> p5.0.38
            }
            finally
            {
                objDataEngine.CloseConnection();           
            }
        }
        public async Task<Milestone> MilestoneInfo(Milestone _milestone)
        {
            var objDataEngine = new FleetDataEngine(AccessMode.CustomerService, DBType.Maint);
            try
            {
                await objDataEngine.InitiateConnectionAsync();
                SqlParameter[] Parameters = new SqlParameter[2];
                Parameters[0] = String.IsNullOrEmpty(_milestone.workflowcd) ? new SqlParameter("@WorkflowCd", DBNull.Value) : new SqlParameter("@WorkflowCd", _milestone.workflowcd);// "APPL"
                Parameters[1] = String.IsNullOrEmpty(_milestone.SelectedTaskNo) ? new SqlParameter("@TaskNo", DBNull.Value) : new SqlParameter("@TaskNo", _milestone.SelectedTaskNo); //new SqlParameter("@TaskNo", _milestone.SelectedTaskNo);
                var execResult = await objDataEngine.ExecuteCommandAsync("WebGetMilestoneInfo", CommandType.StoredProcedure, Parameters);
                var _milestoneInfo = new Milestone();
                while (execResult.Read())
                {
                    _milestoneInfo.SelectedTaskNo = Convert.ToString(execResult["TaskNo"]);
                    _milestoneInfo.Descp = Convert.ToString(execResult["Descp"]);
                    _milestoneInfo.selectedOwner = Convert.ToString(execResult["Owner"]);
                    _milestoneInfo.Remarks = Convert.ToString(execResult["Remarks"]);
                    _milestoneInfo.Url = Convert.ToString(execResult["Url"]);
                    _milestoneInfo.validationSP = Convert.ToString(execResult["ValidationSP"]);
                    _milestoneInfo.ActionSP = Convert.ToString(execResult["ActionSP"]);
                    _milestoneInfo.SLADay = ConvertInt(execResult["SLADay"]);
                };
                return _milestoneInfo;
            }
            finally
            {
                objDataEngine.CloseConnection();               
            }        
        }
        #endregion
        #region "Adjustment Approval"
        public async Task<MsgRetriever> SaveMilestoneAdj(Milestone _milestone)
        {
            var objDataEngine = new FleetDataEngine(AccessMode.CardHolder, DBType.Maint);
            try
            {
                await objDataEngine.InitiateConnectionAsync();
                SqlParameter[] Parameters = new SqlParameter[12];
                Parameters[0] = new SqlParameter("@Id", ConvertLongToDb(_milestone.ID));
                Parameters[1] = String.IsNullOrEmpty(_milestone.SelectedTaskNo) ? new SqlParameter("@TaskNo", DBNull.Value) : new SqlParameter("@TaskNo", _milestone.SelectedTaskNo);//new SqlParameter("@TaskNo", ConvertIntToDb(_milestone.SelectedTaskNo));
                Parameters[2] = new SqlParameter("@RefKey", ConvertLongToDb(_milestone.aprId));
                Parameters[3] = String.IsNullOrEmpty(_milestone.RefNo) ? new SqlParameter("@RefNo", DBNull.Value) : new SqlParameter("@RefNo", _milestone.RefNo);
                Parameters[4] = String.IsNullOrEmpty(_milestone.selectedOwner) ? new SqlParameter("@Owner", DBNull.Value) : new SqlParameter("@Owner", _milestone.selectedOwner);
                Parameters[5] = String.IsNullOrEmpty(_milestone.selectedPriority) ? new SqlParameter("@Priority", DBNull.Value) : new SqlParameter("@Priority", _milestone.selectedPriority); //new SqlParameter("@Priority", ConvertIntToDb(_milestone.selectedPriority));
                Parameters[6] = String.IsNullOrEmpty(_milestone.Remarks) ? new SqlParameter("@Remarks", DBNull.Value) : new SqlParameter("@Remarks", _milestone.Remarks);
                Parameters[7] = String.IsNullOrEmpty(_milestone.selectedReasonCd) ? new SqlParameter("@ReasonCd", DBNull.Value) : new SqlParameter("@ReasonCd", _milestone.selectedReasonCd);
                Parameters[8] = new SqlParameter("@RecallDate", ConvertDatetimeDB(_milestone.RecallDate));
                Parameters[9] = String.IsNullOrEmpty(_milestone.selectedStatus) ? new SqlParameter("@Sts", DBNull.Value) : new SqlParameter("@Sts", _milestone.selectedStatus);
                Parameters[10] = String.IsNullOrEmpty(this.GetUserId) ? new SqlParameter("@UserId", DBNull.Value) : new SqlParameter("@UserId", this.GetUserId);
                Parameters[11] = new SqlParameter("@RETURN_VALUE", SqlDbType.BigInt);
                Parameters[11].Direction = ParameterDirection.ReturnValue;

                var Cmd = await objDataEngine.ExecuteWithReturnValueAsync("WebMilestoneAdjustmentApproval", CommandType.StoredProcedure, Parameters);
                var Result = Convert.ToInt32(Cmd.Parameters["@RETURN_VALUE"].Value);
                var Descp = await GetMessageCode(Result);
                return Descp;
            }
            finally
            {
                objDataEngine.CloseConnection();
                
            }
        
        }
        #endregion

        #region "Payment Approval"
        public async Task<MsgRetriever> SaveMilestonePayment(Milestone _milestone)
        {
            var objDataEngine = new FleetDataEngine(AccessMode.CardHolder, DBType.Maint);
            try
            {
                await objDataEngine.InitiateConnectionAsync();
                SqlParameter[] Parameters = new SqlParameter[12];
                Parameters[0] = new SqlParameter("@Id", ConvertLongToDb(_milestone.ID));
                Parameters[1] = String.IsNullOrEmpty(_milestone.SelectedTaskNo) ? new SqlParameter("@TaskNo", DBNull.Value) : new SqlParameter("@TaskNo", _milestone.SelectedTaskNo);//new SqlParameter("@TaskNo", ConvertIntToDb(_milestone.SelectedTaskNo));
                Parameters[2] = new SqlParameter("@RefKey", ConvertLongToDb(_milestone.aprId));
                Parameters[3] = String.IsNullOrEmpty(_milestone.RefNo) ? new SqlParameter("@RefNo", DBNull.Value) : new SqlParameter("@RefNo", _milestone.RefNo);
                Parameters[4] = String.IsNullOrEmpty(_milestone.selectedOwner) ? new SqlParameter("@Owner", DBNull.Value) : new SqlParameter("@Owner", _milestone.selectedOwner);
                Parameters[5] = String.IsNullOrEmpty(_milestone.selectedPriority) ? new SqlParameter("@Priority", DBNull.Value) : new SqlParameter("@Priority", _milestone.selectedPriority); //new SqlParameter("@Priority", ConvertIntToDb(_milestone.selectedPriority));
                Parameters[6] = String.IsNullOrEmpty(_milestone.Remarks) ? new SqlParameter("@Remarks", DBNull.Value) : new SqlParameter("@Remarks", _milestone.Remarks);
                Parameters[7] = String.IsNullOrEmpty(_milestone.selectedReasonCd) ? new SqlParameter("@ReasonCd", DBNull.Value) : new SqlParameter("@ReasonCd", _milestone.selectedReasonCd);
                Parameters[8] = new SqlParameter("@RecallDate", ConvertDatetimeDB(_milestone.RecallDate));
                Parameters[9] = String.IsNullOrEmpty(_milestone.selectedStatus) ? new SqlParameter("@Sts", DBNull.Value) : new SqlParameter("@Sts", _milestone.selectedStatus);
                Parameters[10] = String.IsNullOrEmpty(this.GetUserId) ? new SqlParameter("@UserId", DBNull.Value) : new SqlParameter("@UserId", this.GetUserId);
                Parameters[11] = new SqlParameter("@RETURN_VALUE", SqlDbType.BigInt);
                Parameters[11].Direction = ParameterDirection.ReturnValue;

                var Cmd = await objDataEngine.ExecuteWithReturnValueAsync("WebMilestonePaymentApproval", CommandType.StoredProcedure, Parameters);
                var Result = Convert.ToInt32(Cmd.Parameters["@RETURN_VALUE"].Value);
                var Descp = await GetMessageCode(Result);
                return Descp;
            }
            finally
            {
                objDataEngine.CloseConnection();
                
            }
          
        }
        #region "Merchant Approval"
        public async Task<MsgRetriever> SaveMilestoneMerchant(Milestone _milestone)
        {
            var objDataEngine = new FleetDataEngine(AccessMode.CardHolder, DBType.Maint);
            try
            {
                await objDataEngine.InitiateConnectionAsync();
                SqlParameter[] Parameters = new SqlParameter[12];
                Parameters[0] = new SqlParameter("@Id", ConvertLongToDb(_milestone.ID));
                Parameters[1] = String.IsNullOrEmpty(_milestone.SelectedTaskNo) ? new SqlParameter("@TaskNo", DBNull.Value) : new SqlParameter("@TaskNo", _milestone.SelectedTaskNo);//new SqlParameter("@TaskNo", ConvertIntToDb(_milestone.SelectedTaskNo));
                Parameters[2] = new SqlParameter("@RefKey", ConvertLongToDb(_milestone.aprId));
                Parameters[3] = String.IsNullOrEmpty(_milestone.RefNo) ? new SqlParameter("@RefNo", DBNull.Value) : new SqlParameter("@RefNo", _milestone.RefNo);
                Parameters[4] = String.IsNullOrEmpty(_milestone.selectedOwner) ? new SqlParameter("@Owner", DBNull.Value) : new SqlParameter("@Owner", _milestone.selectedOwner);
                Parameters[5] = String.IsNullOrEmpty(_milestone.selectedPriority) ? new SqlParameter("@Priority", DBNull.Value) : new SqlParameter("@Priority", _milestone.selectedPriority); //new SqlParameter("@Priority", ConvertIntToDb(_milestone.selectedPriority));
                Parameters[6] = String.IsNullOrEmpty(_milestone.Remarks) ? new SqlParameter("@Remarks", DBNull.Value) : new SqlParameter("@Remarks", _milestone.Remarks);
                Parameters[7] = String.IsNullOrEmpty(_milestone.selectedReasonCd) ? new SqlParameter("@ReasonCd", DBNull.Value) : new SqlParameter("@ReasonCd", _milestone.selectedReasonCd);
                Parameters[8] = new SqlParameter("@RecallDate", ConvertDatetimeDB(_milestone.RecallDate));
                Parameters[9] = String.IsNullOrEmpty(_milestone.selectedStatus) ? new SqlParameter("@Sts", DBNull.Value) : new SqlParameter("@Sts", _milestone.selectedStatus);
                Parameters[10] = String.IsNullOrEmpty(this.GetUserId) ? new SqlParameter("@UserId", DBNull.Value) : new SqlParameter("@UserId", this.GetUserId);
                Parameters[11] = new SqlParameter("@RETURN_VALUE", SqlDbType.BigInt);
                Parameters[11].Direction = ParameterDirection.ReturnValue;

                var Cmd = await objDataEngine.ExecuteWithReturnValueAsync("WebMilestoneMerchAdjustmentApproval", CommandType.StoredProcedure, Parameters);
                var Result = Convert.ToInt32(Cmd.Parameters["@RETURN_VALUE"].Value);
                var Descp = await GetMessageCode(Result);
                return Descp;
            }
            finally
            {
                objDataEngine.CloseConnection();
            }
        }
        #endregion
        #endregion
    }
}