using ModelSector;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using System.Threading.Tasks;
using FleetOps.Models;
using FleetSys.Models;
using FleetOps.App_Start;
using CCMS.ModelSector;
using System.Net;
using System.IO;
using System.Web.Script.Serialization;
namespace FleetSys.Controllers
{
    [Authorize(Roles = "Internal")]
    public class AccountController : BaseClass
    {
        private AccountOps objAcctOps = new AccountOps();
        private TxnAdjustmentOps objTxnAdjustmentOps = new TxnAdjustmentOps();
        [Accessibility]
        public ActionResult Index(string id)
        {
            ViewBag.AcctNo = id;
            return View();
        }
        #region "List Of Web Pages"
        [CompressFilter]
        //  [AccessibilityXtra]
        public ActionResult Tmpl(string Prefix)
        {
            switch (Prefix)
            {
                case "gen":
                    return PartialView(this.getPartialPath("Accounts", "AcctGeneralInfo_Partial"), new GeneralInfoModel());
                case "fin":
                    return PartialView(this.getPartialPath("Accounts", "FinancialInfoCardAcctMaint_Partial"), new FinancialInfoModel());
                case "cao":
                    return PartialView(this.getPartialPath("Accounts", "CreditAssessmentOperation_Partial"), new CreditAssesOperation());
                case "dep":
                    return PartialView(this.getPartialPath("Accounts", "DepositInfo_Partial"), new CreditAssesOperation());
                case "upd":
                    return PartialView(this.getPartialPath("Accounts", "UpToDateBalance_Partial"), new UpToDateBal());
                case "skd":
                    return PartialView(this.getPartialPath("Accounts", "DieselSubsidy_Partial"), new SKDS());
                case "ast":
                    return PartialView(this.getPartialPath("Accounts", "acctSubsidy_Partial"), new SKDS());
                case "car":
                    return PartialView(this.getPartialPath("Accounts", "CardHolderInfo_Partial"), new CardHolderInfoModel());
                case "veh":
                    return PartialView(this.getPartialPath("Accounts", "VehiclesList_Partial"), new VehiclesListModel());
                case "vel":
                    return PartialView(this.getPartialPath("Accounts", "VelocityLimitsListMaint_Partial"), new VeloctyLimitListMaintModel());
                case "txn":
                    return PartialView(this.getPartialPath("Accounts", "TxnAdjustment_Partial"), new TxnAdjustment());
                case "pay":
                    return PartialView(this.getPartialPath("Accounts", "PaymentTxn_Partial"), new PaymentTxn());
                case "loc":
                    return PartialView(this.getPartialPath("Accounts", "LocationAcceptanceList_Partial"), new LocationAcceptListModel());
                case "tem":
                    return PartialView(this.getPartialPath("Accounts", "TemporaryCreditControl_Partial"), new TempCreditCtrlModel());
                case "con":
                    return PartialView(this.getPartialPath("Accounts", "Contact_Partial"), new ContactLstModel());
                case "add":
                    return PartialView(this.getPartialPath("Applications", "Address_Partial"), new AddrListMaintModel());
                case "txs":
                    return PartialView(this.getPartialPath("Accounts", "TransactionSearch_Partial"), new AcctPostedTxnSearch());
                case "bil_Main":
                    return PartialView(this.getPartialPath("Accounts/BillingItem", "BillingItem_Partial"), new BillingItem());
                case "bil_detail":
                    return PartialView(this.getPartialPath("Accounts/BillingItem", "BillingItemDetail_Partial"), new BillingItem());
                case "usm":
                    return PartialView(this.getPartialPath("Accounts", "AccountUsers_Partial"));
                case "pdc":
                    return PartialView(this.getPartialPath("Accounts", "ProductDiscount_Partial"), new ProductDiscount());
                case "cos":
                    return PartialView(this.getPartialPath("Accounts", "CostCentre_Partial"), new CostCentre());
                case "puk":
                    return PartialView(this.getPartialPath("Accounts", "Pukal_Partial"), new Pukal());
                case "sta":
                    return PartialView(this.getPartialPath("Accounts", "StatusMaint_Partial"), new ChangeStatus());
                case "pad":
                    return PartialView(this.getPartialPath("Accounts", "PointAdjustment_Partial"), new PointAdjustment());
                case "aps":
                    return PartialView(this.getPartialPath("Accounts", "AcctPostedTxn_Search"), new AcctPostedTxnSearch());
                case "eve":
                    return PartialView(this.getPartialPath("Accounts", "EventConfigurations/EventConf_Partial"), new LookupParameters());
                default:
                    return PartialView();
            }
        }
        #endregion
        #region "Fill Data"
        [CompressFilter]
        public async Task<JsonResult> FillData(string Prefix, int AcctNo)
        {
            switch (Prefix.ToLower())
            {
                case "gen":
                    var _GeData = await objAcctOps.FtGeneralInfoForm(AcctNo);
                    var PaymentTerm = await WebGetRefLib("PaymtTerm");
                    var temp = PaymentTerm.SkipWhile(p => p.Value == "").ToList();
                    PaymentTerm = (temp.OrderBy(p => Convert.ToInt32(p.Value))).ToList();

                    var GenSelects = new GeneralInfoModel
                    {
                        AccountType = await WebGetRefLib("BankAcctType"),
                        PlasticType = await WebGetPlasticType("I"),
                        CompanyType = await WebGetRefLib("CmpyType"),
                        CorpName = await WebGetCorpCd2(),
                        SIC = await WebGetMerchType("S"),  //(M)CC or (S)IC
                        ClientClass = await WebGetRefLib("ClientClass"),
                        ClientType = await WebGetRefLib("ClientType"),
                        BusnEstablishment = await WebGetRefLib("BusnEst"),
                        //AcctSts = await WebGetRefLib("AcctSts"),
                        ReasonCode = await WebGetRefLib("ReasonCd"),
                        OvrStatus = await WebGetRefLib("OverrideSts"),
                        BusnCategory = await WebGetRefLib("BusnCategory"),
                        SaleTerritory = await WebGetRefLib("SaleTerritory"),
                        //CurrentStatus = await WebGetRefLib("AcctSts"),
                        //PaymentTerm = await WebGetRefLib("PaymtTerm"),
                        PaymentTerm = PaymentTerm,
                        LangId = await BaseClass.WebGetRefLib("Language"),
                    };

                    return Json(new { Model = _GeData, Selects = GenSelects }, JsonRequestBehavior.AllowGet);

                case "fin":
                    var _FiData = await objAcctOps.FtFinancialInfoForm(AcctNo);
                    var FinSelects = new FinancialInfoModel
                    {
                        DunningCd = await WebGetRefLib("Dunning"),
                        CycNo = await WebGetCycle("I"),
                        StmtType = await WebGetRefLib("BillingType"),
                        StmtInd = await WebGetRefLib("InvPrefer"),
                        PaymtMethod = await WebGetRefLib("PaymtMethod"),
                        BankAcctType = await WebGetRefLib("BankAcctType"),
                        BankName = await WebGetRefLib("Bank"),
                        TaxCategory = await WebGetRefLib("TaxCategory"),
                        AssessmentType = await WebGetRefLib("AssessmentType"),
                        RiskCategory = await WebGetRefLib("RiskCategory"),
                        AssignCollector = await BaseClass.WebGetUserAccess("InternalUsers") 
                    };
                    return Json(new { Model = _FiData, Selects = FinSelects }, JsonRequestBehavior.AllowGet);

                case "upd":
                    var _uptodateBalance = await objAcctOps.FtUpToBalDetail(AcctNo);
                    return Json(new { Model = _uptodateBalance }, JsonRequestBehavior.AllowGet);

                case "cao":
                    var _Cao = await objAcctOps.FtCreditApplAssessentForm(AcctNo, 0);
                    PaymentTerm = await BaseClass.WebGetRefLib("PaymtTerm");
                    temp = PaymentTerm.SkipWhile(p => p.Value == "").ToList();
                    PaymentTerm = (temp.OrderBy(p => Convert.ToInt32(p.Value))).ToList();

                    var CaoSelects = new CreditAssesOperation
                    {
                        PaymentMode = await WebGetRefLib("PaymtMethod"),
                        PaymentTerm = PaymentTerm, //await WebGetRefLib("PaymtTerm"),
                        TerritoryCd = await WebGetRefLib("SaleTerritory"),
                        RiskCategory = await WebGetRefLib("RiskCategory"),
                        AssesmtType = await WebGetRefLib2("AssessmentType"),
                        DepositType = await WebGetRefLib("DepositType"),
                        BankAcctType = await WebGetRefLib("BankAcctType"),
                        BankName = await WebGetRefLib("Bank"),
                        ReasonCd = await WebGetCAOReasonCd(),
                        Qualitative = await BaseClass.WebGetRefLib("QualitativeRating"),
                        Quantitative = await BaseClass.WebGetRefLib("QuantitativeRating")
                    };
                    _Cao.GracePeriod = 20;
                    return Json(new { Model = _Cao, Selects = CaoSelects }, JsonRequestBehavior.AllowGet);

                case "dep":
                    var _adi = new CreditAssesOperation
                    {
                        DepositType = await BaseClass.WebGetRefLib("DepositType", null, "1"),
                        BankAcctType = await BaseClass.WebGetRefLib("BankAcctType"),
                        BankName = await BaseClass.WebGetRefLib("SecurityDepositBank"),
                    };
                    return Json(new { Selects = _adi, Model = new CreditAssesOperation() }, JsonRequestBehavior.AllowGet);
                case "add":
                    var AddrSelects = new AddrListMaintModel
                    {
                        addrtype = await WebGetRefLib("Address"),
                        State = await WebGetState(GetIssNo, "CtryCd"),//changes
                        Country = await WebGetRefLib("Country"),
                        region = await WebGetRefLib("RegionCd"),
                    };
                    var AddrModel = new AddrListMaintModel
                    {
                        UserId = this.GetUserId,
                        CreationDate = System.DateTime.Now.ToString(),
                        RefTo = "ACCT",
                        RefKey = Convert.ToString(AcctNo)
                    };
                    return Json(new { Selects = AddrSelects, Model = AddrModel }, JsonRequestBehavior.AllowGet);
                case "con":
                    var otherContactList = new ContactLstModel
                    {
                        ContactType = await WebGetRefLib("Contact"),
                        Occupation = await WebGetRefLib("Occupation"),
                        Sts = await WebGetRefLib("ContactSts"),
                    };
                    var model = new ContactLstModel
                    {
                        UserId = HttpContext.User.Identity.Name,
                        CreationDate = System.DateTime.Now.ToString()
                    };
                    return Json(new { Selects = otherContactList, Model = model }, JsonRequestBehavior.AllowGet);
                case "vel":
                    var velocityLimitsList = new VeloctyLimitListMaintModel
                    {
                        VelocityInd = await BaseClass.WebGetRefLib("VelocityInd"),
                        ProdCd = await BaseClass.WebGetProduct(null),
                        CtrlType = await BaseClass.WebGetRefLib("CollateralType"),
                    };
                    var _Model = new VeloctyLimitListMaintModel
                    {
                        UserId = HttpContext.User.Identity.Name,
                        CreationDate = System.DateTime.Now.ToString("dd/MM/yyyy")
                    };
                    return Json(new { Selects = velocityLimitsList, Model = _Model }, JsonRequestBehavior.AllowGet);
                case "veh":
                    var _VehiclesListModel = new VehiclesListModel
                    {
                        VehColor = await BaseClass.WebGetRefLib("Color"),
                        VehMaker = await BaseClass.WebGetRefLib("VehMaker"),
                        VehModel = await BaseClass.WebGetRefLib("VehSubModel"),
                        CardType = await BaseClass.WebGetCardType(),
                        Sts = await BaseClass.WebGetRefLib("AcctSts"),
                        VehYr = BaseClass.WebGetYear(),
                        VehType = await BaseClass.WebGetRefLib("VehType")
                    };
                    return Json(new { Selects = _VehiclesListModel, Model = new VehiclesListModel() }, JsonRequestBehavior.AllowGet);
                case "loc":
                    var locationAcceptanceList = new LocationAcceptListModel
                    {
                        State = await WebGetState(1, "458"),
                        BusnLocations = new List<SelectListItem>(),
                        UserId = HttpContext.User.Identity.Name,
                        CreationDate = System.DateTime.Now.ToString()
                    };
                    return Json(new { Selects = locationAcceptanceList, Model = new LocationAcceptListModel() }, JsonRequestBehavior.AllowGet);
                case "aps":
                    var _AcctPostedTxnSearch = new AcctPostedTxnSearch
                    {
                        CardNo = await WebGetCardNo(Convert.ToString(AcctNo)),
                        TxnCategory = await WebGetTxnCategory("I"),
                        TxnCd = await WebGetTxnCode("I")

                    };
                     var json = Json(new { Selects = _AcctPostedTxnSearch, Model = new AcctPostedTxnSearch() }, JsonRequestBehavior.AllowGet);
                    json.MaxJsonLength = int.MaxValue;
                    return json;
                case "evt":
                    var _eventLoggerInfo = new EventLogger
                   {
                       EventType = await WebGetRefLib("EventType"),
                       EventSts = await WebGetRefLib("EventSts"),
                       ReasonCd = await WebGetRefLib("ReasonCd"),
                       Module = await WebGetRefLib("ModuleId")
                   };
                    return Json(new { Selects = _eventLoggerInfo, Model = new EventLogger() }, JsonRequestBehavior.AllowGet);
                case "pay":
                    var _pyTxn = new PaymentTxn
                    {
                        PyTxnCd = await WebGetTxnCode("I", "PaymtTxnCategoryMapInd", "Y"),
                        Sts = await WebGetRefLib("entrysts"),
                        Owner = await BaseClass.WebUserAccessListSelect()

                    };
                    return Json(new { Selects = _pyTxn, Model = new PaymentTxn() }, JsonRequestBehavior.AllowGet);

                case "txn":
                    var _TxnAdjustment = new TxnAdjustment
                      {
                          TxnCd = await WebGetTxnCode("I", "AdjustTxnCategoryMapInd", "Y"),//("Module", "Deff", "ManualEntry"),
                          Sts = await WebGetRefLib("EntrySts", "0"),
                          Owner = await BaseClass.WebUserAccessListSelect(),
                          IssueingBank = await WebGetRefLib("Bank")
                      };
                    return Json(new { Selects = _TxnAdjustment, Model = new TxnAdjustment() }, JsonRequestBehavior.AllowGet);
                case "bil":
                    var bil = new BillingItem
                    {
                        Sts = await WebGetRefLib("BillItemSts"),
                        TxnCategory = await WebGetBillItemTxnCategory("I")
                    };
                    return Json(new { Selects = bil, Model = new BillingItem() }, JsonRequestBehavior.AllowGet);
                case "pdc":
                    var _prodDiscount = new ProductDiscount
                    {
                        ProdCd = await WebProductGroupSelect(1),//BaseClass.WebGetProduct(null, false),
                        RebatePlan = await BaseClass.WebGetPlan("2"),
                        DiscPlan = await BaseClass.WebGetPlan("1"),
                        ProdDiscType = await BaseClass.WebGetRefLib("ProdDiscType"),
                        PlanId = new List<SelectListItem>()
                    };
                    return Json(new { Selects = _prodDiscount, Model = new ProductDiscount() }, JsonRequestBehavior.AllowGet);
                case "tem":
                    var data = await objAcctOps.FtTempCreditLimitDetail(AcctNo);
                    return Json(new { Model = data, Selects = "" }, JsonRequestBehavior.AllowGet);
                case "sta":
                    var StsDetails = await objAcctOps.FtChangedAcctStsDetail(AcctNo.ToString(), "ACCT");
                    var selecs = new ChangeStatus
                    {
                        CurrentStatus = await WebGetRefLib("AcctSts"),
                        RefType = await WebGetRefLib("EventType"),
                        ReasonCode = await WebGetRefLib("ReasonCd", "64"),
                        ChangeStatusTo = await WebGetRefLib("AcctSts", "")
                    };
                    return Json(new { Model = StsDetails, Selects = selecs }, JsonRequestBehavior.AllowGet);
                case "pad":
                    var _Adj = new PointAdjustment
                    {
                        Status = await BaseClass.WebGetRefLib("EntrySts"),
                        TxnCd = await WebGetTxnCode("I")
                    };
                    return Json(new { Model = new PointAdjustment(), Selects = _Adj }, JsonRequestBehavior.AllowGet);
                case "csc":
                    return Json(new { Model = new CostCentre(), Selects = "" }, JsonRequestBehavior.AllowGet);
                case "puk":
                    var _data = await objAcctOps.WebPukalSelect(AcctNo, "ACCT");
                    var _pukal = new Pukal
                    {
                        RefCd = await BaseClass.WebGetRefLib("PaymtInfoType"),
                        AcctOfficeCode = await BaseClass.WebGetRefLib("AcctOfficeCd"),
                        TermFlag = await BaseClass.WebGetRefLib("TerminationFlag", null, null, null, false),
                        AgObjectCode = await WebGetRefLib("AGObjCd")
                    };
                    return Json(new { Model = _data, Selects = _pukal }, JsonRequestBehavior.AllowGet);
<<<<<<< HEAD
                //    return PartialView(this.getPartialPath("CardAndAcctMaint", "Pokal_Partial"), Pukal);
=======
>>>>>>> p5.0.38
                case "ast":
                    var acctSubsidy = new SKDS
                     {
                         SkdsAcctSub = await BaseClass.WebGetAcctSubsidy(AcctNo.ToString()),
                         Sts = await BaseClass.WebGetRefLib("SubsidySts"),
                     };
                    List<SelectListItem> xx = acctSubsidy.Sts.ToList();
                    xx.Insert(0, new SelectListItem { Text = "", Value = "" });
                    acctSubsidy.Sts = xx;
                    return Json(new { Model = new SKDS(), Selects = acctSubsidy }, JsonRequestBehavior.AllowGet);
                case "eve":
                    EventConfigMaint _EventConfigMaint = new EventConfigMaint();
                    var Selects = new LookupParameters
                    {
                        EventType = await _EventConfigMaint.WebGetEvtType(),
                        Priority = await WebGetRefLib("Priority"),
                        Status = await WebGetRefLib("Status"),
                        Scope = await WebGetRefLib("Scope"),
                        Owner = await WebGetRefLib("NtfEventOwner"),
                        Frequency = await WebGetRefLib("NtfEventPeriodType"),
                        Languages = await WebGetRefLib("Language"),
                    };
                    return Json(new { Selects = Selects, Model = new LookupParameters() }, JsonRequestBehavior.AllowGet);
                default:
                    HttpContext.Response.StatusCode = 404;
                    return Json(null, JsonRequestBehavior.AllowGet);
            }
        }
        #endregion
        #region "Cards Holder"
        [CompressFilter]
        public async Task<ActionResult> ftCardHolderList(jQueryDataTableParamModel Params, string AcctNo)
        {
            var _filtered = new List<CardHolderInfoModel>();
            var list = await objAcctOps.FtCardHolderList(AcctNo);

            if (!string.IsNullOrEmpty(Params.sSearch))
            {
                Params.sSearch = Params.sSearch.ToLower();
            }

            if (!string.IsNullOrEmpty(Params.sSearch))
            {
                _filtered = list.Where(p => p.CardNo.Contains(Params.sSearch) || p.EmbossName.ToLower().Contains(Params.sSearch) || p.vehRegNo.Contains(Params.sSearch) || p.SelectedCurrentStatus.ToLower().Contains(Params.sSearch) || p.CardExpiry.Contains(Params.sSearch) || p.SelectedCardType.ToLower().Contains(Params.sSearch) || p.FullName.ToLower().Contains(Params.sSearch)).ToList();
                _filtered = _filtered.Skip(Params.iDisplayStart).Take(Params.iDisplayLength).ToList();
            }
            else
            {
                _filtered = list.Skip(Params.iDisplayStart).Take(Params.iDisplayLength).ToList();
            }

            return Json(new
            {
                sEcho = Params.sEcho,
                iTotalRecords = list.Count,
                iTotalDisplayRecords = list.Count,
                aaData = _filtered.Select(x => new object[] { x.CardNo, x.EmbossName, x.SelectedCurrentStatus, x.CardExpiry, x.SelectedCardType, x.SelectedPINInd, x.vehRegNo, x.DriverCd, x.FullName, x.BlockedDate, x.TerminatedDate, x.SelectedCostCentre })//, x.XRefCardNo
            }, JsonRequestBehavior.AllowGet);
        }
        #region"Address"
        [CompressFilter]
        public async Task<ActionResult> FtAddressList(jQueryDataTableParamModel Params, string AcctNo)
        {
            var _filtered = new List<AddrListMaintModel>();
            var list = await objAcctOps.FtAddressList("Acct", AcctNo);

            if (!string.IsNullOrEmpty(Params.sSearch))
            {
                Params.sSearch = Params.sSearch.ToLower();
            }

            if (!string.IsNullOrEmpty(Params.sSearch))
            {
                _filtered = list.Where(p => p.SelectedAddrType.ToLower().Contains(Params.sSearch) || p.SelectedMailInd.Contains(Params.sSearch) || p.Address.ToLower().Contains(Params.sSearch) || p.District.ToLower().Contains(Params.sSearch) || p.City.ToLower().Contains(Params.sSearch) || p.Selectedstate.ToLower().Contains(Params.sSearch) || p.PostalCode.Contains(Params.sSearch) || p.SelectedCountry.ToLower().Contains(Params.sSearch) || p.selectedregion.ToLower().Contains(Params.sSearch)).ToList();
                _filtered = _filtered.Skip(Params.iDisplayStart).Take(Params.iDisplayLength).ToList();
            }
            else
            {
                _filtered = list.Skip(Params.iDisplayStart).Take(Params.iDisplayLength).ToList();
            }

            return Json(new
            {
                sEcho = Params.sEcho,
                iTotalRecords = list.Count(),
                iTotalDisplayRecords = list.Count(),
                aaData = _filtered.Select(x => new object[] { x.SelectedRefCd, x.SelectedAddrType, x.SelectedMailInd, x.Address, x.District, x.City, x.Selectedstate, x.PostalCode, x.SelectedCountry, x.selectedregion })
            }, JsonRequestBehavior.AllowGet);
            //var list = await objAcctOps.FtAddressList("Acct", AcctNo);

            //var filtered = list.Skip(Params.iDisplayStart).Take(Params.iDisplayLength);
            //return Json(new
            //{
            //    sEcho = Params.sEcho,
            //    iTotalRecords = list.Count,
            //    iTotalDisplayRecords = list.Count,

            //    aaData = filtered.Select(x => new object[] { x.SelectedRefCd, x.SelectedAddrType, x.SelectedMailInd, x.Address, x.District, x.City, x.Selectedstate, x.PostalCode, x.SelectedCountry, x.selectedregion, x.SelectedRefCd })


            //}, JsonRequestBehavior.AllowGet);
        }
        #endregion
        #region"Contact"
        [CompressFilter]
        public async Task<ActionResult> ftContactList(jQueryDataTableParamModel Params, string RefTo, string RefKey)
        {
            var _filtered = new List<ContactLstModel>();
            var list = await objAcctOps.FtContactlist(RefTo, RefKey);

            if (!string.IsNullOrEmpty(Params.sSearch))
            {
                Params.sSearch = Params.sSearch.ToLower();
            }

            if (!string.IsNullOrEmpty(Params.sSearch))
            {
                _filtered = list.Where(p => p.SelectedContactType.ToLower().Contains(Params.sSearch) || p.ContactName.ToLower().Contains(Params.sSearch) || p.ContactNo.Contains(Params.sSearch) || p.SelectedSts.ToLower().Contains(Params.sSearch) || p.SelectedOccupation.ToLower().Contains(Params.sSearch) || p.EmailAddr.ToLower().Contains(Params.sSearch) || p.CreationDate.Contains(Params.sSearch) || p.UserId.ToLower().Contains(Params.sSearch)).ToList();
                _filtered = _filtered.Skip(Params.iDisplayStart).Take(Params.iDisplayLength).ToList();
            }
            else
            {
                _filtered = list.Skip(Params.iDisplayStart).Take(Params.iDisplayLength).ToList();
            }

            return Json(new
            {
                sEcho = Params.sEcho,
                iTotalRecords = list.Count(),
                iTotalDisplayRecords = list.Count(),
                aaData = _filtered.Select(x => new object[] { x.RefCd, x.SelectedContactType, x.ContactName, x.ContactNo, x.SelectedOccupation, x.EmailAddr, x.CreationDate, x.UserId })
            }, JsonRequestBehavior.AllowGet);
            //var filtered = await objAcctOps.FtContactlist(RefTo, RefKey);
            //return Json(new
            //{
            //    sEcho = Params.sEcho,
            //    iTotalRecords = filtered.Count,
            //    iTotalDisplayRecords = filtered.Count,
            //    aaData = filtered.Select(x => new object[] { x.RefCd, x.SelectedContactType, x.ContactName, x.ContactNo, x.SelectedSts, x.SelectedOccupation, x.EmailAddr, x.CreationDate, x.UserId })
            //}, JsonRequestBehavior.AllowGet);
        }
        #endregion
        #region "Cost Centre"
        [CompressFilter]
        public async Task<ActionResult> ftCostCentreList(jQueryDataTableParamModel Params, CostCentre _costcentre, bool isExport = false)
        {
            var _filtered = new List<CostCentre>();
            var list = await objAcctOps.FtCostCentreListSelect(_costcentre);

            if (!string.IsNullOrEmpty(Params.sSearch))
            {
                Params.sSearch = Params.sSearch.ToLower();
            }

            if (!string.IsNullOrEmpty(Params.sSearch))
            {
                _filtered = list.Where(p => p.SelectedCostCentre.ToLower().Contains(Params.sSearch) || p.Descp.ToLower().Contains(Params.sSearch) || p.PersoninCharge.ToLower().Contains(Params.sSearch)).ToList();
                _filtered = _filtered.Skip(Params.iDisplayStart).Take(Params.iDisplayLength).ToList();
            }
            else
            {
                _filtered = list.Skip(Params.iDisplayStart).Take(Params.iDisplayLength).ToList();
            }

            //var list = await objAcctOps.FtCostCentreListSelect(_costcentre);
            //var filtered = list.Skip(Params.iDisplayStart).Take(Params.iDisplayLength);
            if (isExport)
            {
                var title = "Cost Centre";
                var toExport = new List<string[]>();
                var Header = list.First().XlsHeader();
                foreach (var item in list)
                {
                    toExport.Add(item.XlsBody());
                }
                var ExcelPkg = CreateExcel(Header, toExport, title);
                return File(ExcelPkg.GetAsByteArray(), "application/vnd.ms-excel", title + ".xlsx");
            }
            return Json(new
             {
                 sEcho = Params.sEcho,
                 iTotalRecords = list.Count(),
                 iTotalDisplayRecords = list.Count(),
                 aaData = _filtered.Select(x => new object[] { 
                    x.SelectedCostCentre,x.Descp,x.PersoninCharge
                })
             }, JsonRequestBehavior.AllowGet);
        }
        #endregion
        #region "Velocity Limit"
        [CompressFilter]
        public async Task<ActionResult> ftVelocityList(jQueryDataTableParamModel Params, VeloctyLimitListMaintModel _AcctVelocity, CardnAccNo cardnAccNo)
        {
            _AcctVelocity._CardnAccNo = cardnAccNo;

            var _filtered = new List<VeloctyLimitListMaintModel>();
            var list = await objAcctOps.ftCustAcctVelocityList(_AcctVelocity);

            if (!string.IsNullOrEmpty(Params.sSearch))
            {
                Params.sSearch = Params.sSearch.ToLower();
            }

            if (!string.IsNullOrEmpty(Params.sSearch))
            {
                _filtered = list.Where(p => p.VelocityIndDescp.ToLower().Contains(Params.sSearch) || p.ProdCdDescp.ToLower().Contains(Params.sSearch) || p.CntrLimit.ToString().Contains(Params.sSearch) || p.ddlVelocityLimit.Contains(Params.sSearch) || p.ddlVelocityLitre.ToString().Contains(Params.sSearch) || p.LastUpdateDate.Contains(Params.sSearch) || p.UserId.ToLower().Contains(Params.sSearch) || p.CreationDate.Contains(Params.sSearch) || p.SelectedVelocityInd.Contains(Params.sSearch) || p.SelectedProdCd.ToLower().Contains(Params.sSearch)).ToList();
                _filtered = _filtered.Skip(Params.iDisplayStart).Take(Params.iDisplayLength).ToList();
            }
            else
            {
                _filtered = list.Skip(Params.iDisplayStart).Take(Params.iDisplayLength).ToList();
            }
            return Json(new
            {
                sEcho = Params.sEcho,
                iTotalRecords = list.Count(),
                iTotalDisplayRecords = list.Count(),
                aaData = _filtered.Select(x => new object[] { x.VelocityIndDescp, x.ProdCdDescp, x.CntrLimit, x.ddlVelocityLimit, x.ddlVelocityLitre, x.LastUpdateDate, x.UserId, x.CreationDate, x.SelectedVelocityInd, x.SelectedProdCd, })
            }, JsonRequestBehavior.AllowGet);
            //var list = await objAcctOps.ftCustAcctVelocityList(_AcctVelocity);
            //var filtered = list.Skip(Params.iDisplayStart).Take(Params.iDisplayLength);
            //return Json(new
            //{
            //    sEcho = Params.sEcho,
            //    iTotalRecords = list.Count(),
            //    iTotalDisplayRecords = list.Count(),
            //    aaData = filtered.Select(x => new object[] { x.VelocityIndDescp, x.ProdCdDescp, x.CntrLimit, x.ddlVelocityLimit, x.ddlVelocityLitre, x.LastUpdateDate, x.UserId, x.CreationDate, x.SelectedVelocityInd, x.SelectedProdCd, })

            //}, JsonRequestBehavior.AllowGet);
        }


        #endregion
        #region "Location Acceptance"
        [CompressFilter]
        public async Task<ActionResult> ftLocationList(jQueryDataTableParamModel Params, string AcctNo, CardnAccNo _CardnAccNo)
        {
            var _filtered = new List<LocationAcceptListModel>();
            var list = await objAcctOps.FtLocationAcceptList(AcctNo, _CardnAccNo);

            if (!string.IsNullOrEmpty(Params.sSearch))
            {
                Params.sSearch = Params.sSearch.ToLower();
            }

            if (!string.IsNullOrEmpty(Params.sSearch))
            {
                _filtered = list.Where(p => p.BusnLoc.ToLower().Contains(Params.sSearch) || p.DBAName.ToLower().Contains(Params.sSearch) || p.s_state.ToLower().Contains(Params.sSearch) || p.CreationDate.Contains(Params.sSearch)).ToList();
                _filtered = _filtered.Skip(Params.iDisplayStart).Take(Params.iDisplayLength).ToList();
            }
            else
            {
                _filtered = list.Skip(Params.iDisplayStart).Take(Params.iDisplayLength).ToList();
            }
            return Json(new
            {
                sEcho = Params.sEcho,
                iTotalRecords = list.Count(),
                iTotalDisplayRecords = list.Count(),
                aaData = _filtered.Select(x => new object[] { null, x.BusnLoc, x.busnName, x.DBAName, x.s_state, x.SiteId, x.UserId, x.CreationDate })
            }, JsonRequestBehavior.AllowGet);
        }
        #endregion
        #region "Event Logger"
        [CompressFilter]
        public async Task<ActionResult> ftEventLoggerList(jQueryDataTableParamModel Params, EventLogger _loggerevent)
        {
            var _filtered = new List<EventLogger>();
            var list = await objAcctOps.GetEventlist(_loggerevent);

            if (!string.IsNullOrEmpty(Params.sSearch))
            {
                Params.sSearch = Params.sSearch.ToLower();
            }

            if (!string.IsNullOrEmpty(Params.sSearch))
            {
                _filtered = list.Where(p => p.SelectedEventType.ToLower().Contains(Params.sSearch) || p.SelectedEventSts.ToLower().Contains(Params.sSearch) || p.acctNo.Contains(Params.sSearch) || p.XreferenceDoc.ToLower().Contains(Params.sSearch) || p.SelectedReasonCode.ToLower().Contains(Params.sSearch) || p.ClosedDate.Contains(Params.sSearch) || p.sysInd.Contains(Params.sSearch) || p.EventId.Contains(Params.sSearch) || p.Description.ToLower().Contains(Params.sSearch) || p.CreationDate.Contains(Params.sSearch)).ToList();
                _filtered = _filtered.Skip(Params.iDisplayStart).Take(Params.iDisplayLength).ToList();
            }
            else
            {
                _filtered = list.Skip(Params.iDisplayStart).Take(Params.iDisplayLength).ToList();
            }
            return Json(new
            {
                sEcho = Params.sEcho,
                iTotalRecords = list.Count(),
                iTotalDisplayRecords = list.Count(),
                aaData = _filtered.Select(x => new object[] { x.SelectedEventType, x.SelectedEventSts, x.acctNo, x.XreferenceDoc, x.SelectedReasonCode, x.ClosedDate, null, x.sysInd, x.EventId, x.Description, x.CreationDate })
            }, JsonRequestBehavior.AllowGet);
            //var data = await objAcctOps.GetEventlist(_loggerevent);
            //var filtered = data.Skip(Params.iDisplayStart).Take(Params.iDisplayLength);
            //return Json(new
            //{
            //    sEcho = Params.sEcho,
            //    iTotalRecords = data.Count(),
            //    iTotalDisplayRecords = data.Count(),
            //    aaData = filtered.Select(x => new object[] { x.SelectedEventType, x.SelectedEventSts, x.AccountNo, x.XreferenceDoc, x.SelectedReasonCode, x.ClosedDate, null, x.sysInd, x.EventId, x.Description, x.CreationDate })
            //}, JsonRequestBehavior.AllowGet);
        }
        #endregion
        #region "Payment"
        public async Task<ActionResult> ftPaymentTxnList(jQueryDataTableParamModel Params, Int64 AcctNo)//
        {
            var _filtered = new List<PaymentTxn>();
            var list = await objAcctOps.FtPaymentTxnList(AcctNo);

            if (!string.IsNullOrEmpty(Params.sSearch))
            {
                Params.sSearch = Params.sSearch.ToLower();
            }

            if (!string.IsNullOrEmpty(Params.sSearch))
            {
                _filtered = list.Where(p => p.AcctNo.Contains(Params.sSearch) || p.TxnDate.Contains(Params.sSearch) || p.displayTotAmnt.Contains(Params.sSearch) || p.CreationDate.Contains(Params.sSearch) || p.SelectedTxnType.ToLower().Contains(Params.sSearch) || p.PyTxnId.ToLower().Contains(Params.sSearch) || p.SelectedPyTxnCd.ToLower().Contains(Params.sSearch) || p.UserId.ToLower().Contains(Params.sSearch) || p.Descp.ToLower().Contains(Params.sSearch) || p.StsDescp.ToLower().Contains(Params.sSearch)).ToList();
                _filtered = _filtered.Skip(Params.iDisplayStart).Take(Params.iDisplayLength).ToList();
            }
            else
            {
                _filtered = list.Skip(Params.iDisplayStart).Take(Params.iDisplayLength).ToList();
            }

            return Json(new
            {
                sEcho = Params.sEcho,
                iTotalRecords = list.Count(),
                iTotalDisplayRecords = list.Count(),
                aaData = _filtered.Select(x => new object[] { x.TxnDate, x.CreationDate, x.SelectedTxnType, x.displayTotAmnt, x.Descp, x.PyTxnId, x.AppRemarks, x.StsDescp, x.UserId })
            }, JsonRequestBehavior.AllowGet);

        }
        #endregion
        #region "Settlement Billing Item"
        [CompressFilter]
        public async Task<ActionResult> ftBillingItemSettlementList(jQueryDataTableParamModel Params, int Txn)
        {
            var _filtered = new List<BillingItem>();
            var list = await objAcctOps.FtBillingItemSettlementList(Txn);

            if (!string.IsNullOrEmpty(Params.sSearch))
            {
                Params.sSearch = Params.sSearch.ToLower();
            }

            if (!string.IsNullOrEmpty(Params.sSearch))
            {
                _filtered = list.Where(p => p.TxnId.ToString().Contains(Params.sSearch) || p.SettledDate.Contains(Params.sSearch) || p.DisplaySettledAmt.Contains(Params.sSearch) || p.PrcsDate.Contains(Params.sSearch) || p._CreationDatenUserId.UserId.ToLower().Contains(Params.sSearch) || p._CreationDatenUserId.CreationDate.Contains(Params.sSearch) || p.RefId.Contains(Params.sSearch)).ToList();
                _filtered = _filtered.Skip(Params.iDisplayStart).Take(Params.iDisplayLength).ToList();
            }
            else
            {
                _filtered = list.Skip(Params.iDisplayStart).Take(Params.iDisplayLength).ToList();
            }

            return Json(new
            {
                sEcho = Params.sEcho,
                iTotalRecords = list.Count(),
                iTotalDisplayRecords = list.Count(),
                aaData = _filtered.Select(x => new object[] { x.TxnId, x.SettledDate, x.DisplaySettledAmt, x.PrcsDate, x._CreationDatenUserId.UserId, x._CreationDatenUserId.CreationDate, x.RefId })
            }, JsonRequestBehavior.AllowGet);

            //var list = await objAcctOps.FtBillingItemSettlementList(Txn);

            //var filtered = list.Skip(Params.iDisplayStart).Take(Params.iDisplayLength);
            //return Json(new
            //{
            //    sEcho = Params.sEcho,
            //    iTotalRecords = list.Count(),
            //    iTotalDisplayRecords = list.Count(),
            //    aaData = filtered.Select(x => new object[] { x.TxnId, x.SettledDate, x.DisplaySettledAmt, x.PrcsDate, x._CreationDatenUserId.UserId, x._CreationDatenUserId.CreationDate, x.RefId })

            //}, JsonRequestBehavior.AllowGet);

        }
        #endregion
        #region "Billing Item"
        [CompressFilter]
        public async Task<ActionResult> ftBillingItemTxnList(jQueryDataTableParamModel Params, int Txn)
        {
            var _filtered = new List<BillingItem>();
            var list = await objAcctOps.FtBillingItemSettlementList(Txn);

            if (!string.IsNullOrEmpty(Params.sSearch))
            {
                Params.sSearch = Params.sSearch.ToLower();
            }

            if (!string.IsNullOrEmpty(Params.sSearch))
            {
                _filtered = list.Where(p => p.TxnId.ToString().Contains(Params.sSearch) || p._CardnAccNo.CardNo.Contains(Params.sSearch) || p.TxnDate.Contains(Params.sSearch) || p.BookingDate.Contains(Params.sSearch) || p.PrcsDate.Contains(Params.sSearch) || p.DisplayBillingTxnAmt.Contains(Params.sSearch) || p.Descp.ToLower().Contains(Params.sSearch) || p.BusnLocation.ToLower().Contains(Params.sSearch) || p.TermId.Contains(Params.sSearch) || p._CreationDatenUserId.UserId.ToLower().Contains(Params.sSearch)).ToList();
                _filtered = _filtered.Skip(Params.iDisplayStart).Take(Params.iDisplayLength).ToList();
            }
            else
            {
                _filtered = list.Skip(Params.iDisplayStart).Take(Params.iDisplayLength).ToList();
            }

            return Json(new
            {
                sEcho = Params.sEcho,
                iTotalRecords = list.Count(),
                iTotalDisplayRecords = list.Count(),
                aaData = _filtered.Select(x => new object[] { x.TxnId, x._CardnAccNo.CardNo, x.TxnDate, x.BookingDate, x.PrcsDate, x.DisplayBillingTxnAmt, x.Descp, x.BusnLocation, x.TermId, x._CreationDatenUserId.UserId })
            }, JsonRequestBehavior.AllowGet);

            //var list = await objAcctOps.FtBillingItemTxnList(Txn);

            //var filtered = list.Skip(Params.iDisplayStart).Take(Params.iDisplayLength);
            //return Json(new
            //{
            //    sEcho = Params.sEcho,
            //    iTotalRecords = list.Count(),
            //    iTotalDisplayRecords = list.Count(),
            //    aaData = filtered.Select(x => new object[] { x.TxnId, x._CardnAccNo.CardNo, x.TxnDate, x.BookingDate, x.PrcsDate, x.DisplayBillingTxnAmt, x.Descp, x.BusnLocation, x.TermId, x._CreationDatenUserId.UserId })

            //}, JsonRequestBehavior.AllowGet);

        }
        #endregion
        #region "Deposit Info"
        [CompressFilter]
        public async Task<ActionResult> ftGetAcctDepositInfoList(jQueryDataTableParamModel Params, string AcctNo)
        {
            var _filtered = new List<CreditAssesOperation>();
            var list = await objAcctOps.FtAcctDepositInfoList(null, AcctNo);

            if (!string.IsNullOrEmpty(Params.sSearch))
            {
                Params.sSearch = Params.sSearch.ToLower();
            }

            if (!string.IsNullOrEmpty(Params.sSearch))
            {
                _filtered = list.Where(p => p.SelectedDepositType.ToLower().Contains(Params.sSearch) || p.SelectedBankAcctType.ToLower().Contains(Params.sSearch) || p.SelectedBankName.ToLower().Contains(Params.sSearch) || p.BankAcctNo.Contains(Params.sSearch) || p.Txnid.Contains(Params.sSearch)).ToList();
                _filtered = _filtered.Skip(Params.iDisplayStart).Take(Params.iDisplayLength).ToList();
            }
            else
            {
                _filtered = list.Skip(Params.iDisplayStart).Take(Params.iDisplayLength).ToList();
            }

            return Json(new
            {
                sEcho = Params.sEcho,
                iTotalRecords = list.Count(),
                iTotalDisplayRecords = list.Count(),
                aaData = list.Select(x => new object[] {
                    x.SelectedDirectDebitInd,
                    x.SelectedDepositType,
                    x.SelectedBankAcctType, 
                    x.SelectedBankName,
                    x.BankAcctNo, 
                    x.DepositAmt, 
                    x.Txnid,
                    x.BgSerialNo,
                    x.SAPRefNo,
                    x.UserId,
                    x.Creationdt,
                    x.DepositFromDate+"-"+x.DepositToDate})
            }, JsonRequestBehavior.AllowGet);



        }

        #endregion
        #endregion
        #region "General Info Detail"
        public async Task<ActionResult> ftGeneralInfo(Int64 acctNo)
        {
            var _GeData = await objAcctOps.FtGeneralInfoForm(acctNo);
            return Json(_GeData, JsonRequestBehavior.AllowGet);
        }
        [HttpPost]
        public async Task<ActionResult> GeneralInfoMaint(GeneralInfoModel _generalinfoData)
        {
            var _TraceInfo = await objAcctOps.ftGeneralInfoMaint(_generalinfoData);
            return Json(new { result = _TraceInfo }, JsonRequestBehavior.AllowGet);
        }

        public ActionResult LoadPointBalance(String AcctNo, String RequestorId, String Token)
        {
            var PointBalance = objAcctOps.LoadPointBalance(RequestorId, Token, AcctNo);
            return Json(new { PointBal = PointBalance }, JsonRequestBehavior.AllowGet);
        }

        #endregion
        #region "Financial Info Detail"
        public async Task<ActionResult> ftFinancialInfo(int acctNo)
        {
            var _FiData = await objAcctOps.FtFinancialInfoForm(acctNo);
            return Json(_FiData, JsonRequestBehavior.AllowGet);

        }
        [HttpPost]
        public async Task<ActionResult> FinancialInfoMaint(FinancialInfoModel _financialinfoData)
        {
            var _TraceInfo = await objAcctOps.FtFinancialInfoMaint(_financialinfoData);
            return Json(new { result = _TraceInfo }, JsonRequestBehavior.AllowGet);
        }

        [HttpPost]
        public async Task<ActionResult> SaveCollectionCaseInfo(FinancialInfoModel _financialinfoData)
        {
            var _TraceInfo = await objAcctOps.SaveCollectionCaseInfo(_financialinfoData);
            return Json(new { result = _TraceInfo }, JsonRequestBehavior.AllowGet);
        }
        #endregion
        #region "Credit Appl Assessment Info Detail"
        public async Task<ActionResult> ftCreditApplAssessmentInfo(int acctNo)
        {
            var _CaoData = await objAcctOps.FtCreditApplAssessentForm(acctNo, 0);
            return Json(_CaoData, JsonRequestBehavior.AllowGet);
        }
        [HttpPost]
        public async Task<ActionResult> FtCreditApplAssessmentMaint(CreditAssesOperation _CreditApplAssessmentData)
        {
            var _TraceInfo = await objAcctOps.FtCreditApplAssessmentMaint(_CreditApplAssessmentData);
            return Json(new { result = _TraceInfo }, JsonRequestBehavior.AllowGet);
        }
        public async Task<JsonResult> WebAcctHistoryListSelect(int acctNo,string type, jQueryDataTableParamModel Params)
        {
            if (!string.IsNullOrEmpty(Params.sSearch))
                Params.sSearch = Params.sSearch.ToLower();
            var _filtered = new List<CreditLimitHistory>();
            var list = _filtered;
           if(type.ToLower() == "credit")
                list = await objAcctOps.WebAcctHistoryListSelect(acctNo);
            else if(type.ToLower() == "sec")
                list = await objAcctOps.WebSecHistoryDepositList(acctNo);

            if (!string.IsNullOrEmpty(Params.sSearch))
            {
                Params.sSearch = Params.sSearch.ToLower();
            }
            if (!string.IsNullOrEmpty(Params.sSearch))
            {
                _filtered = list.Where(p => p.CreationDate.Contains(Params.sSearch) || p.From.Contains(Params.sSearch) || p.To.Contains(Params.sSearch) || p.UserId.ToLower().Contains(Params.sSearch)).ToList();
                _filtered = _filtered.Skip(Params.iDisplayStart).Take(Params.iDisplayLength).ToList();
            }
            else
            {
                _filtered = list.Skip(Params.iDisplayStart).Take(Params.iDisplayLength).ToList();
            }

            return Json(new
            {
                sEcho = Params.sEcho,
                iTotalRecords = list.Count,
                iTotalDisplayRecords = list.Count,
                aaData = (type.ToLower() == "sec"? _filtered.Select(x => new object[] { x.Field, x.AcctNo, x.DepositType, x.From, x.To, x.UserId, x.CreationDate, })
                         : _filtered.Select(x => new object[] { x.Field, x.AcctNo, x.From, x.To, x.UserId, x.CreationDate, }))
            }, JsonRequestBehavior.AllowGet);
        }
        public async Task<JsonResult> SecurityHistoryLogList(int acctNo, jQueryDataTableParamModel Params)
        {
            if (!string.IsNullOrEmpty(Params.sSearch))
                Params.sSearch = Params.sSearch.ToLower();
            var _filtered = new List<CreditLimitHistory>();
            var list = await objAcctOps.WebSecHistoryDepositList(acctNo);
            if (!string.IsNullOrEmpty(Params.sSearch))
            {
                Params.sSearch = Params.sSearch.ToLower();
            }
            if (!string.IsNullOrEmpty(Params.sSearch))
            {
                _filtered = list.Where(p => p.Field.Contains(Params.sSearch) || p.CreationDate.Contains(Params.sSearch) || p.From.Contains(Params.sSearch) || p.To.Contains(Params.sSearch) || p.UserId.ToLower().Contains(Params.sSearch)).ToList();
                _filtered = _filtered.Skip(Params.iDisplayStart).Take(Params.iDisplayLength).ToList();
            }
            else
            {
                _filtered = list.Skip(Params.iDisplayStart).Take(Params.iDisplayLength).ToList();
            }
            return Json(new
            {
                sEcho = Params.sEcho,
                iTotalRecords = list.Count,
                iTotalDisplayRecords = list.Count,
                aaData = _filtered.Select(x => new object[] { x.Field, x.AcctNo, x.From, x.To, x.UserId, x.CreationDate, })//, x.XRefCardNo
            }, JsonRequestBehavior.AllowGet);
        }
        public async Task<JsonResult> WebRemarksHistoryListSelect(int acctNo,string eventType,jQueryDataTableParamModel Params)
        {
            if (!string.IsNullOrEmpty(Params.sSearch))
                Params.sSearch = Params.sSearch.ToLower();
            var _filtered = new List<RemarkHistory>();
            var list = await objAcctOps.GetSecDepRemarksListSelect(acctNo.ToString(), eventType,string.Empty);

            if (!string.IsNullOrEmpty(Params.sSearch))
            {
                _filtered = list.Where(p => p.Content.Contains(Params.sSearch)).ToList();
                _filtered = _filtered.Skip(Params.iDisplayStart).Take(Params.iDisplayLength).ToList();
            }
            else
            {
                _filtered = list.Skip(Params.iDisplayStart).Take(Params.iDisplayLength).ToList();
            }
            return Json(new
            {
                sEcho = Params.sEcho,
                iTotalRecords = list.Count,
                iTotalDisplayRecords = list.Count,
                aaData = _filtered.Select(x => new object[] { x.Content, x.UserId, x.CreationDate, })
            }, JsonRequestBehavior.AllowGet);
        }
        #endregion
        #region "Address"
        public async Task<ActionResult> ftAddress(Int64 acctNo, string RefTo, string refcd)
        {
            var _AddrData = await objAcctOps.FtAddressDetail(RefTo, Convert.ToString(acctNo), refcd);
            return Json(_AddrData, JsonRequestBehavior.AllowGet);
        }
        [HttpPost]
        public async Task<ActionResult> AddressMaint(AddrListMaintModel _AddressData, string _refto, string _refkey, string _refcd)
        {
            var _TraceInfo = await objAcctOps.FtAddressMaint(_AddressData, _refto, _refkey, _refcd);
            return Json(new { result = _TraceInfo }, JsonRequestBehavior.AllowGet);
        }
        public async Task<ActionResult> DelAddress(string RefTo, string RefKey, string RefCd)
        {
            var _deleteContactMaint = await objAcctOps.DelAddress(RefTo, RefKey, RefCd);
            return Json(new { resultCd = _deleteContactMaint }, JsonRequestBehavior.AllowGet);
        }
        #endregion
        #region"Contact"
        public async Task<ActionResult> ftContactDetail(string RefTo, string RefKey, string RefCd)
        {
            var data = await objAcctOps.FtContactDetail(RefTo, RefKey, RefCd);

            return Json(new { contact = data }, JsonRequestBehavior.AllowGet);
        }
        [HttpPost]
        public async Task<ActionResult> ContactMaint(ContactLstModel _ContactList, string RefTo, string Func)
        {
            var _saveContactMaint = await objAcctOps.FtContactsMaint(_ContactList, RefTo, Func);
            return Json(new { resultCd = _saveContactMaint }, JsonRequestBehavior.AllowGet);
        }
        public async Task<ActionResult> DelContact(string RefTo, string RefKey, string RefCd)
        {
            var _deleteContactMaint = await objAcctOps.DelContact(RefTo, RefKey, RefCd);
            return Json(new { resultCd = _deleteContactMaint }, JsonRequestBehavior.AllowGet);
        }
        #endregion
        #region "Cost Centre"
        public async Task<ActionResult> FtCostCentreDetail(CostCentre CostCentre)
        {
            var _CostCentre = await objAcctOps.WebCostCentreSelect(CostCentre);
            return Json(_CostCentre, JsonRequestBehavior.AllowGet);
        }
        [HttpPost]
        public async Task<ActionResult> CostCentreMaint(CostCentre _CostCentreMaint)
        {
            var _saveCostCentreMaint = await objAcctOps.WebCostCentreMaint(_CostCentreMaint);
            return Json(new { resultCd = _saveCostCentreMaint }, JsonRequestBehavior.AllowGet);
        }
        public async Task<JsonResult> SearchCostCentre(CostCentre CostCentre, jQueryDataTableParamModel Params)
        {
            var _filtered = new List<CostCentre>();
            var list = await objAcctOps.WebCostCentreSearch(CostCentre);

            if (!string.IsNullOrEmpty(Params.sSearch))
            {
                Params.sSearch = Params.sSearch.ToLower();
            }

            if (!string.IsNullOrEmpty(Params.sSearch))
            {
                _filtered = list.Where(p => p.SelectedCostCentre.ToLower().Contains(Params.sSearch) || p.Descp.ToLower().Contains(Params.sSearch) || p.PersoninCharge.ToLower().Contains(Params.sSearch)).ToList();
                _filtered = _filtered.Skip(Params.iDisplayStart).Take(Params.iDisplayLength).ToList();
            }
            else
            {
                _filtered = list.Skip(Params.iDisplayStart).Take(Params.iDisplayLength).ToList();
            }

            return Json(new
            {
                sEcho = Params.sEcho,
                iTotalRecords = list.Count(),
                iTotalDisplayRecords = list.Count(),
                aaData = _filtered.Select(x => new object[] { x.SelectedCostCentre, x.Descp, x.PersoninCharge })
            }, JsonRequestBehavior.AllowGet);

            //var list = await objAcctOps.WebCostCentreSearch(CostCentre);
            //var filtered = list.Skip(Params.iDisplayStart).Take(Params.iDisplayLength);
            //return Json(new
            //{
            //    sEcho = Params.sEcho,
            //    iTotalRecords = list.Count(),
            //    iTotalDisplayRecords = list.Count(),
            //    aaData = filtered.Select(x => new object[] { 
            //        x.SelectedCostCentre,x.Descp,x.PersoninCharge
            //    })
            //}, JsonRequestBehavior.AllowGet);
        }
        #endregion
        #region"Up Todate Balance"
        public async Task<ActionResult> FtUpToBalDetail(Int64 AcctNo)
        {
            var _UpToDateBal = await objAcctOps.FtUpToBalDetail(AcctNo);
            return Json(_UpToDateBal, JsonRequestBehavior.AllowGet);
        }

        [CompressFilter]
        public async Task<ActionResult> TxnInstantListSelect(jQueryDataTableParamModel Params, string AcctNo)
        {
            var _filtered = new List<FinancilInfoItemsList>();
            var list = await objAcctOps.TxnInstantListSelect(AcctNo);

            if (!string.IsNullOrEmpty(Params.sSearch))
            {
                Params.sSearch = Params.sSearch.ToLower();
            }

            if (!string.IsNullOrEmpty(Params.sSearch))
            {
                _filtered = list.Where(p => p.TxnId.Contains(Params.sSearch) || p.Lbe.Contains(Params.sSearch) || p.CardNo.Contains(Params.sSearch) || p.TxnAmt.Contains(Params.sSearch) || p.BookingDate.Contains(Params.sSearch) || p.TxnDate.Contains(Params.sSearch) || p.DueDate.Contains(Params.sSearch) || p.Descp.ToLower().Contains(Params.sSearch) || p.UserId.ToLower().Contains(Params.sSearch) || p.CreationDate.Contains(Params.sSearch) || p.RcptNo.Contains(Params.sSearch) || p.TxnCd.ToLower().Contains(Params.sSearch) || p.ShortDescp.ToLower().Contains(Params.sSearch) || p.SiteId.Contains(Params.sSearch) || p.DriverCardNo.Contains(Params.sSearch)).ToList();
                _filtered = _filtered.Skip(Params.iDisplayStart).Take(Params.iDisplayLength).ToList();
            }
            else
            {
                _filtered = list.Skip(Params.iDisplayStart).Take(Params.iDisplayLength).ToList();
            }

            return Json(new
            {
                sEcho = Params.sEcho,
                iTotalRecords = list.Count(),
                iTotalDisplayRecords = list.Count(),
                aaData = _filtered.Select(x => new object[] { x.TxnId, x.Lbe, x.CardNo, x.TxnAmt, x.BookingDate, x.TxnDate, x.DueDate, x.Descp, x.UserId, x.CreationDate, x.RcptNo, x.TxnCd, x.ShortDescp, x.SiteId, x.DriverCardNo })
            }, JsonRequestBehavior.AllowGet);
            //var list = await objAcctOps.TxnInstantListSelect(AcctNo);
            //var filtered = list.Skip(Params.iDisplayStart).Take(Params.iDisplayLength);
            //return Json(new
            //{
            //    sEcho = Params.sEcho,
            //    iTotalRecords = list.Count(),
            //    iTotalDisplayRecords = list.Count(),

            //    aaData = filtered.Select(x => new object[] { x.TxnId, x.Lbe, x.CardNo, x.TxnAmt, x.BookingDate, x.TxnDate, x.DueDate, x.Descp, x.UserId, x.CreationDate, x.RcptNo, x.TxnCd, x.ShortDescp, x.SiteId, x.DriverCardNo })

            //}, JsonRequestBehavior.AllowGet);
        }

        [CompressFilter]
        public async Task<ActionResult> TxnUnpostedListSelect(jQueryDataTableParamModel Params, string AcctNo)
        {
            var _filtered = new List<FinancilInfoItemsList>();
            var list = await objAcctOps.TxnInstantUnpostedTxnList(AcctNo);

            if (!string.IsNullOrEmpty(Params.sSearch))
            {
                Params.sSearch = Params.sSearch.ToLower();
            }

            if (!string.IsNullOrEmpty(Params.sSearch))
            {
                _filtered = list.Where(p => p.TxnId.Contains(Params.sSearch) || p.Lbe.Contains(Params.sSearch) || p.CardNo.Contains(Params.sSearch) || p.TxnAmt.Contains(Params.sSearch) || p.BookingDate.Contains(Params.sSearch) || p.TxnDate.Contains(Params.sSearch) || p.DueDate.Contains(Params.sSearch) || p.Descp.ToLower().Contains(Params.sSearch) || p.UserId.ToLower().Contains(Params.sSearch) || p.CreationDate.Contains(Params.sSearch) || p.TxnCd.ToLower().Contains(Params.sSearch) || p.ShortDescp.ToLower().Contains(Params.sSearch)).ToList();
                _filtered = _filtered.Skip(Params.iDisplayStart).Take(Params.iDisplayLength).ToList();
            }
            else
            {
                _filtered = list.Skip(Params.iDisplayStart).Take(Params.iDisplayLength).ToList();
            }

            return Json(new
            {
                sEcho = Params.sEcho,
                iTotalRecords = list.Count(),
                iTotalDisplayRecords = list.Count(),
                aaData = _filtered.Select(x => new object[] { x.TxnId, x.Lbe, x.CardNo, x.TxnAmt, x.BookingDate, x.TxnDate, x.DueDate, x.Descp, x.UserId, x.CreationDate, x.TxnCd, x.ShortDescp })
            }, JsonRequestBehavior.AllowGet);
            //var list = await objAcctOps.TxnInstantUnpostedTxnList(AcctNo);
            //var filtered = list.Skip(Params.iDisplayStart).Take(Params.iDisplayLength);
            //return Json(new
            //{
            //    sEcho = Params.sEcho,
            //    iTotalRecords = list.Count(),
            //    iTotalDisplayRecords = list.Count(),
            //    aaData = filtered.Select(x => new object[] { 
            //    x.TxnId,x.Lbe,x.CardNo,x.TxnAmt,x.BookingDate,x.TxnDate,x.DueDate,x.Descp,x.UserId,x.CreationDate,x.TxnCd,x.ShortDescp
            //    })
            //}, JsonRequestBehavior.AllowGet);
        }

        #endregion
        #region "Velocity Limit"
        public async Task<ActionResult> ftVelocityDetail(VeloctyLimitListMaintModel _VelocityLimit, CardnAccNo _CardnAcct)
        {
            _VelocityLimit._CardnAccNo = _CardnAcct;
            var data = await objAcctOps.ftCustAcctVelocityDetail(_VelocityLimit);

            return Json(new { velocity = data }, JsonRequestBehavior.AllowGet);
        }
        public async Task<ActionResult> FtVelocityLimitMaint(VeloctyLimitListMaintModel _VelocityLimitnList, CardnAccNo _cardnAcct, string Func)
        {
            _VelocityLimitnList._CardnAccNo = _cardnAcct;
            var _saveCustAcctVelocity = await objAcctOps.ftCustAcctVelocityMaint(_VelocityLimitnList, Func);
            return Json(new { resultCd = _saveCustAcctVelocity }, JsonRequestBehavior.AllowGet);
        }
        public async Task<ActionResult> DelVelocityLimit(string AcctNo, string CardNo, string ApplId, string AppcId, string VelInd, string ProdCd, string CostCentre, string corpCd)
        {
            var _deleteCustAcctVelocity = await objAcctOps.DelCustAcctVelocity(AcctNo, CardNo, ApplId, AppcId, VelInd, ProdCd, CostCentre, corpCd);
            return Json(new { resultCd = _deleteCustAcctVelocity }, JsonRequestBehavior.AllowGet);
        }
        #endregion
        #region Location Acceptance"
        [CompressFilter]
        public async Task<ActionResult> ftLocationDetail(string AcctNo, string BusnLoc, string CardNo)
        {
            var data = await objAcctOps.FtLocationAcceptDetail(AcctNo, BusnLoc, CardNo);
            return Json(new { address = data }, JsonRequestBehavior.AllowGet);
        }


        public async Task<ActionResult> getBusnLocations(string States, string AcctNo = null, string CardNo = null)
        {
            var states = States.Split(new string[] { "," }, StringSplitOptions.RemoveEmptyEntries);
            var list = new List<SelectListItem>();
            foreach (var item in states)
            {
                var list_item = await WebGetDealerBusnLoc(AcctNo, CardNo, item);
                foreach (var item2 in list_item)
                {
                    list.Add(new SelectListItem
                    {
                        Text = string.Format("{0}:{1}:{2}", item, item2.Text, item2.Value),
                        Value = item2.Text + ":" + item
                    });
                }
            }
            return Json(list, JsonRequestBehavior.AllowGet);
        }
        [HttpPost]
        public async Task<ActionResult> SaveLocationAccept(LocationAcceptListModel _LocationAcceptList, CardnAccNo _CardnAcctNo)
        {
            _LocationAcceptList._CardnAccNo = _CardnAcctNo;
            var _saveLocationAccept = await objAcctOps.FtLocationAcceptanceMaint(_LocationAcceptList);
            return Json(new { resultCd = _saveLocationAccept }, JsonRequestBehavior.AllowGet);
        }
        public async Task<ActionResult> DelLocation(string AcctNo, List<string> BusnLoc, string CardNo)
        {
            var resultCd = await objAcctOps.DeleteLocationAcceptance(AcctNo, BusnLoc, CardNo);
            return Json(new { resultCd = resultCd }, JsonRequestBehavior.AllowGet);
        }
        #endregion
        #region "Temporary Credit Limit"
        [CompressFilter]
        public async Task<ActionResult> ftTempCreditCtrlDetail(int AcctNo)//int AcctNo
        {
            var data = await objAcctOps.FtTempCreditLimitDetail(AcctNo);
            return Json(new { TempCredit = data }, JsonRequestBehavior.AllowGet);
        }
        [HttpPost]
        public async Task<ActionResult> TempCreditCtrlMaint(TempCreditCtrlModel _tempCredit, int acctNo)//, int acctNo
        {
            var _SaveTempCreditCtrlMaint = await objAcctOps.FtTempCreditCtrlMaint(_tempCredit, acctNo);
            return Json(new { resultCd = _SaveTempCreditCtrlMaint }, JsonRequestBehavior.AllowGet);
        }
        [CompressFilter]
        public async Task<ActionResult> WebEventSearchWithoutDate(jQueryDataTableParamModel Params, EventLogger _Logger)
        {
            var _filtered = new List<EventLogger>();
            var list = await objAcctOps.WebEventSearchWithoutDate(_Logger);

            if (!string.IsNullOrEmpty(Params.sSearch))
            {
                Params.sSearch = Params.sSearch.ToLower();
            }
            if (!string.IsNullOrEmpty(Params.sSearch))
            {
                _filtered = list.Where(p => p.SelectedEventType.ToLower().Contains(Params.sSearch) || p.acctNo.Contains(Params.sSearch) || p.ClosedDate.Contains(Params.sSearch) || p.ReminderDatetime.Contains(Params.sSearch) || p.sysInd.Contains(Params.sSearch) || p.EventId.ToLower().Contains(Params.sSearch) || p.Description.ToLower().Contains(Params.sSearch) || p.UserId.ToLower().Contains(Params.sSearch)).ToList();
                _filtered = _filtered.Skip(Params.iDisplayStart).Take(Params.iDisplayLength).ToList();
            }
            else
            {
                _filtered = list.Skip(Params.iDisplayStart).Take(Params.iDisplayLength).ToList();
            }
            //<th>Event Type</th>
            //<th>Account No</th>
            //<th>Description</th>
            //<th>Eff.From</th>
            //<th>Eff.To</th>
            //<th>Closed Date</th>
            //<th>Recall Date</th>
            //<th>System Ind</th>
            //<th>Creation Date</th>
            //<th>User Id</th>

            return Json(new
            {
                sEcho = Params.sEcho,
                iTotalRecords = list.Count(),
                iTotalDisplayRecords = list.Count(),
                aaData = _filtered.Select(x => new object[] { x.SelectedEventType, x.acctNo, x.Description, x.sysInd, x.CreationDate, x.UserId })
            }, JsonRequestBehavior.AllowGet);
        }
        #endregion
        #region "Status Maintenances"
        [CompressFilter]
        public async Task<ActionResult> ftChangeStatusDetail(string id)
        {
            var data = await objAcctOps.FtChangedAcctStsDetail(id, Request.QueryString["refCd"]);

            return Json(new { address = data }, JsonRequestBehavior.AllowGet);
        }
        [HttpPost]
        public async Task<ActionResult> FtChangedStatusMaint(ChangeStatus _ChangeStatus, CardnAccNo _cardnAcctNo)
        {
            _ChangeStatus._CardnAccNo = _cardnAcctNo;
            var _SaveChangedStatus = await objAcctOps.FtChangedAcctStsMaint(_ChangeStatus);
            return Json(new { resultCd = _SaveChangedStatus }, JsonRequestBehavior.AllowGet);
        }
        #endregion
        #region "Event Logger"

        public async Task<ActionResult> FtEventDetail(EventLogger _Logger, string eventID)
        {

            var data = await objAcctOps.FtEventLoggerDetail(_Logger, eventID);

            return Json(new { evt = data }, JsonRequestBehavior.AllowGet);
        }
        [HttpPost]
        [CompressFilter]
        public async Task<ActionResult> SaveEventLoggerDetails(EventDetails _loggerDetails)
        {
            var _saveEventDetailLogger = await objAcctOps.SaveEventDetailMaint(_loggerDetails);
            return Json(new { result = _saveEventDetailLogger }, JsonRequestBehavior.AllowGet);
        }
        [CompressFilter]
        public async Task<ActionResult> EventSearch(jQueryDataTableParamModel Params, EventLogger _Logger)
        {
            var _filtered = new List<EventLogger>();
            var list = await objAcctOps.FtEventSearch(_Logger);

            if (!string.IsNullOrEmpty(Params.sSearch))
            {
                _filtered = list.Where(p => p.SelectedEventType.Contains(Params.sSearch) || p.SelectedEventSts.Contains(Params.sSearch) || p.acctNo.Contains(Params.sSearch) || p.CardNo.Contains(Params.sSearch) || p.SelectedReasonCode.Contains(Params.sSearch) || p.ClosedDate.Contains(Params.sSearch) || p.ReminderDatetime.Contains(Params.sSearch) || p.sysInd.Contains(Params.sSearch) || p.EventId.Contains(Params.sSearch) || p.Description.Contains(Params.sSearch) || p.UserId.Contains(Params.sSearch)).ToList();
                _filtered = _filtered.Skip(Params.iDisplayStart).Take(Params.iDisplayLength).ToList();
            }
            else
            {
                _filtered = list.Skip(Params.iDisplayStart).Take(Params.iDisplayLength).ToList();
            }

            return Json(new
            {
                sEcho = Params.sEcho,
                iTotalRecords = list.Count(),
                iTotalDisplayRecords = list.Count(),
                aaData = _filtered.Select(x => new object[] { x.SelectedEventType, x.SelectedEventSts, x.acctNo, x.CardNo, x.SelectedReasonCode, x.ClosedDate, x.ReminderDatetime, x.sysInd, x.EventId, x.Description, x.UserId })
            }, JsonRequestBehavior.AllowGet);

            //var list = await objAcctOps.FtEventSearch(_Logger);
            //return Json(new
            //{
            //    sEcho = Params.sEcho,
            //    iTotalRecords = list.Count(),
            //    iTotalDisplayRecords = list.Count(),
            //    aaData = list.Select(x => new object[] { x.SelectedEventType, x.SelectedEventSts, x.AccountNo, x.CardNo, x.SelectedReasonCode, x.ClosedDate, x.ReminderDatetime, x.sysInd, x.EventId, x.Description, x.UserId })
            //}, JsonRequestBehavior.AllowGet);
        }
        #endregion
        #region "Accct Subsidy"

        public async Task<ActionResult> ftAcctSubsidyInfoList(jQueryDataTableParamModel Params, string AcctNo, string SkdsNo)
        {
            var _filtered = new List<SKDS>();
            var list = await objAcctOps.GetAcctSubsidyInfoList(AcctNo, SkdsNo);

            if (!string.IsNullOrEmpty(Params.sSearch))
            {
                Params.sSearch = Params.sSearch.ToLower();
            }

            if (!string.IsNullOrEmpty(Params.sSearch))
            {
                _filtered = list.Where(p => p.VehRegsNo.Contains(Params.sSearch) || p.CardNo.Contains(Params.sSearch) || p.CardSts.ToLower().Contains(Params.sSearch) ||
                    p.SelectedSts.ToLower().Contains(Params.sSearch) || p.SKDSNo.Contains(Params.sSearch) || p.EffFromDate.Contains(Params.sSearch) ||
                    p.EffToDate.Contains(Params.sSearch)).ToList();//).ToList();
                _filtered = _filtered.Skip(Params.iDisplayStart).Take(Params.iDisplayLength).ToList();
            }
            else
            {
                _filtered = list.Skip(Params.iDisplayStart).Take(Params.iDisplayLength).ToList();
            }

            return Json(new
            {
                sEcho = Params.sEcho,
                iTotalRecords = list.Count(),
                iTotalDisplayRecords = list.Count(),
                aaData = _filtered.Select(x => new object[] { x.VehRegsNo, x.CardNo, x.CardSts, x.SKDSNo, x.SKDSQuota, x.SelectedSts, x.EffFromDate, x.EffToDate })
            }, JsonRequestBehavior.AllowGet);

            //var list = await objAcctOps.GetAcctSubsidyInfoList(AcctNo, SkdsNo);
            //var filtered = list.Skip(Params.iDisplayStart).Take(Params.iDisplayLength);
            //return Json(new
            //{
            //    sEcho = Params.sEcho,
            //    iTotalRecords = list.Count(),
            //    iTotalDisplayRecords = list.Count(),

            //    aaData = filtered.Select(x => new object[] { x.VehRegsNo, x.CardNo, x.CardSts, x.SKDSNo, x.SKDSQuota, x.SelectedSts, x.EffFromDate, x.EffToDate })

            //}, JsonRequestBehavior.AllowGet);
        }
        public async Task<ActionResult> SaveAcctSubsidyInfoList(List<SKDS> skds, string AcctNo, string SKDSNo)
        {
            var result = await objAcctOps.SaveAcctSubsidyTag(skds, AcctNo, SKDSNo);
            return Json(new { result = result }, JsonRequestBehavior.AllowGet);
        }


        #endregion
        #region "Payment"
        [CompressFilter]
        public async Task<ActionResult> ftPaymentTxnDetail(PaymentTxn _PyTxn)
        {
            var data = await objAcctOps.FtPaymentTxnDetail(_PyTxn);

            return Json(new { txn = data }, JsonRequestBehavior.AllowGet);
        }

        [HttpPost]
        public async Task<ActionResult> ftPaymentTxnMaint(PaymentTxn _PyTxn)//_PyTxn
        {
            var data = await objAcctOps.FtPaymentTxnMaint(_PyTxn);

            return Json(new { resultCd = data }, JsonRequestBehavior.AllowGet);
        }
        #endregion
        #region "Deposit"
        //public async Task<ActionResult> ftGetGetAcctDepositInfoDetail(string AccNo, string TxnId)
        //{
        //    var data = await objAcctOps.FtAcctDepositInfoDetail(TxnId, null, AccNo);

        //    return Json(new { Adi = data }, JsonRequestBehavior.AllowGet);
        //}
        [HttpPost]
        public async Task<ActionResult> AcctDepositInfoMaint(CreditAssesOperation _AcctDepositInfo, string applId)
        {
            var _SaveTxn = await objAcctOps.AcctDepositInfoMaint(_AcctDepositInfo, applId);

            return Json(new { result = _SaveTxn }, JsonRequestBehavior.AllowGet);
        }
        #endregion
        #region "AcctGuarantee"
        [HttpPost]
        [CompressFilter]
        public async Task<ActionResult> AcctGuaranteeMaint(AcctGuarantee _AcctGuarantee)
        {
            var _saveAcctGuarantee = await objAcctOps.FtAcctGuaranteeMaint(_AcctGuarantee);
            return Json(new { resultCd = _saveAcctGuarantee }, JsonRequestBehavior.AllowGet);
        }
        #endregion
        #region "Point Adjustment"
        public async Task<JsonResult> WebPointAdjustmentListSelect(string AcctNo, jQueryDataTableParamModel Params)
        {
            var _filtered = new List<PointAdjustment>();
            var list = await objAcctOps.WebPointAdjustmentListSelect(AcctNo);

            if (!string.IsNullOrEmpty(Params.sSearch))
            {
                Params.sSearch = Params.sSearch.ToLower();
            }

            if (!string.IsNullOrEmpty(Params.sSearch))
            {
                _filtered = list.Where(p => p.TxnType.ToLower().Contains(Params.sSearch) || p.CardNo.Contains(Params.sSearch) || p.Points.Contains(Params.sSearch) || p.TxnDate.Contains(Params.sSearch) || p.TxnDescription.ToLower().Contains(Params.sSearch) || p.SelectedStatus.ToLower().Contains(Params.sSearch) || p.SelectedTxnCd.ToLower().Contains(Params.sSearch) || p.TxnId.Contains(Params.sSearch) || p.WUId.Contains(Params.sSearch) || p.CreationDate.Contains(Params.sSearch)).ToList();
                _filtered = _filtered.Skip(Params.iDisplayStart).Take(Params.iDisplayLength).ToList();
            }
            else
            {
                _filtered = list.Skip(Params.iDisplayStart).Take(Params.iDisplayLength).ToList();
            }

            return Json(new
            {
                sEcho = Params.sEcho,
                iTotalRecords = list.Count(),
                iTotalDisplayRecords = list.Count(),
                aaData = _filtered.Select(x => new object[] { x.TxnType, x.CardNo, x.Points, x.TxnDate, x.TxnDescription, x.SelectedStatus, x.SelectedTxnCd, x.TxnId, x.WUId, x.CreationDate, x.TxnId })
            }, JsonRequestBehavior.AllowGet);

            //var list = await objAcctOps.WebPointAdjustmentListSelect(AcctNo);
            //var filtered = list.Skip(Params.iDisplayStart).Take(Params.iDisplayLength);
            //return Json(new
            //{
            //    sEcho = Params.sEcho,
            //    iTotalRecords = list.Count(),
            //    iTotalDisplayRecords = list.Count(),
            //    aaData = filtered.Select(x => new object[] { 
            //        x.TxnType,x.CardNo,x.Points,x.TxnDate,x.TxnDescription,x.SelectedStatus,x.SelectedTxnCd,x.TxnId,x.WUId,x.CreationDate,x.TxnId
            //    })
            //}, JsonRequestBehavior.AllowGet);

        }


        public async Task<JsonResult> WebPointAdjustmentSelect(string AcctNo, string TxnId)
        {

            var Adj = await objAcctOps.WebPointAdjustmentSelect(TxnId);
            return Json(new { Adj = Adj }, JsonRequestBehavior.AllowGet);
        }

        [HttpPost]
        public async Task<JsonResult> WebPointAdjustmentMaint(string AcctNo, PointAdjustment Adj)
        {
            var result = await objAcctOps.WebPointAdjustmentMaint(Adj, AcctNo);
            return Json(new { result = result });
        }

        #endregion "POint Adjustment"
        #region "AcctPostedTxnSearch"
        [CompressFilter]
        public async Task<ActionResult> ftAcctPostedTxnSearch(jQueryDataTableParamModel Params, AcctPostedTxnSearch _acctPostedTxnSearch, bool isExport = false)
        {
            var _filtered = new List<AcctPostedTxnSearch>();
            var list = await objAcctOps.FtAcctPostedTxnSearch(_acctPostedTxnSearch);

            if (!string.IsNullOrEmpty(Params.sSearch))
            {
                Params.sSearch = Params.sSearch.ToLower();
            }

            if (!string.IsNullOrEmpty(Params.sSearch))
            {
                _filtered = list.Where(p => p.InvoicDt.Contains(Params.sSearch) || p.TxnDate.Contains(Params.sSearch) || p.SelectedCardNo.Contains(Params.sSearch) || p.TxnDesp.ToLower().Contains(Params.sSearch) || p.TxnAmt.Contains(Params.sSearch) || p.Quantity.Contains(Params.sSearch) || p.Dealer.ToLower().Contains(Params.sSearch) || p.AuthCardNo.Contains(Params.sSearch) || p.PrcsDate.Contains(Params.sSearch) || p.TxnId.Contains(Params.sSearch) || p.RecieptId.Contains(Params.sSearch) || p.Batch.ToLower().Contains(Params.sSearch) || p.VehRegNo.Contains(Params.sSearch) || p.DriverName.ToLower().Contains(Params.sSearch) || p.SiteId.Contains(Params.sSearch) || p.TotalTxnAmt.Contains(Params.sSearch)).ToList();
                _filtered = _filtered.Skip(Params.iDisplayStart).Take(Params.iDisplayLength).ToList();
            }
            else
            {
                _filtered = list.Skip(Params.iDisplayStart).Take(Params.iDisplayLength).ToList();
            }

            //var _TxnSearch = await objAcctOps.FtAcctPostedTxnSearch(_acctPostedTxnSearch);
            //var filtered = _TxnSearch.Skip(Params.iDisplayStart).Take(Params.iDisplayLength);

            if (isExport)
            {
                var title = "Transaction Search-" + DateTime.Now.ToString("ddMMyyyyhhmmss");
                var toExport = new List<string[]>();
                var Header = list.First().ExcelHeader;
                foreach (var item in list)
                {
                    toExport.Add(item.ExcelBody());
                }
                var ExcelPkg = CreateExcel(Header, toExport, title);
                return File(ExcelPkg.GetAsByteArray(), "application/vnd.ms-excel", title + ".xlsx");
                //return this.File(new UTF8Encoding().GetBytes(toExport.ToString()), "text/csv", "CardsList-"+AcctNo+".csv");
            }
            return Json(new
            {
                sEcho = Params.sEcho,
                iTotalRecords = list.Count,
                iTotalDisplayRecords = list.Count,
                aaData = _filtered.Select(x => new object[] {null, x.InvoicDt, x.TxnDate, x.PrcsDate, x.SelectedCardNo, x.AuthCardNo, x.TxnDesp, x.VehRegNo, x.Stan, x.ApproveCd, x.RRn, x.VATNo, x.Dealer, x.TxnId, x.TxnAmt,
                    x.ProductDescp, x.Quantity, x.ProductAmt, x.VATAmt, x.VATCd, x.VATRate  })
            }, JsonRequestBehavior.AllowGet);

        }
        #endregion
        #region "Billing Item"
        [CompressFilter]
        public async Task<ActionResult> ftSearchBillingItem(jQueryDataTableParamModel Params, BillingItem _BillingItem, CardnAccNo _CardnAccNo)
        {
            _BillingItem._CardnAccNo = _CardnAccNo;

            var _filtered = new List<BillingItem>();
            var list = await objAcctOps.SearchBillingItem(_BillingItem);

            if (!string.IsNullOrEmpty(Params.sSearch))
            {
                Params.sSearch = Params.sSearch.ToLower();
            }

            if (!string.IsNullOrEmpty(Params.sSearch))
            {
                _filtered = list.Where(p => p.Level.ToLower().Contains(Params.sSearch) || p.Descp.ToLower().Contains(Params.sSearch) || p.TxnDate.Contains(Params.sSearch) || p.DueDate.Contains(Params.sSearch) || p.DisplayBillingTxnAmt.Contains(Params.sSearch) || p.SettledAmt.Contains(Params.sSearch) || p.SettledDate.Contains(Params.sSearch) || p._CreationDatenUserId.CreationDate.Contains(Params.sSearch) || p.SelectedSts.ToLower().Contains(Params.sSearch) || p.TxnId.ToString().Contains(Params.sSearch) || p.TarBalance.Contains(Params.sSearch) || p.ClosedDate.Contains(Params.sSearch) || p.TotalTxnAmount.Contains(Params.sSearch) || p.TotalSettledAmt.Contains(Params.sSearch)).ToList();
                _filtered = _filtered.Skip(Params.iDisplayStart).Take(Params.iDisplayLength).ToList();
            }
            else
            {
                _filtered = list.Skip(Params.iDisplayStart).Take(Params.iDisplayLength).ToList();
            }

            return Json(new
            {
                sEcho = Params.sEcho,
                iTotalRecords = list.Count(),
                iTotalDisplayRecords = list.Count(),
                aaData = _filtered.Select(x => new object[] { x.Level, x.Descp, x.TxnDate, x.DueDate, x.DisplayBillingTxnAmt, x.SettledAmt, x.SettledDate, x._CreationDatenUserId.CreationDate, x.TxnId, x.TarBalance, x.ClosedDate, x.TotalTxnAmount, x.TotalSettledAmt })//x.SelectedSts, 
            }, JsonRequestBehavior.AllowGet);

            //var list = await objAcctOps.SearchBillingItem(_BillingItem);

            //var filtered = list.Skip(Params.iDisplayStart).Take(Params.iDisplayLength);
            //return Json(new
            //{
            //    sEcho = Params.sEcho,
            //    iTotalRecords = list.Count(),
            //    iTotalDisplayRecords = list.Count(),
            //    aaData = filtered.Select(x => new object[] { x.Level, x.Descp, x.TxnDate, x.DueDate, x.DisplayBillingTxnAmt, x.SettledAmt, x.SettledDate, x._CreationDatenUserId.CreationDate, x.SelectedSts, x.TxnId, x.TarBalance, x.ClosedDate, x.TotalTxnAmount, x.TotalSettledAmt })

            //}, JsonRequestBehavior.AllowGet);

        }
        #endregion
        #region "Pukal"
        //[CompressFilter]
        //public async Task<ActionResult> ftWebPukalSelect(String RefKey, String RefTo)
        //{
        //    var data = await objAcctOps.WebPukalSelect(RefKey, RefTo);

        //    return Json(new { resultCd = data }, JsonRequestBehavior.AllowGet);
        //}

        [HttpPost]
        public async Task<JsonResult> SavePukalInfo(Pukal Pukal, string RefKey)
        {
            var result = await objAcctOps.WebPukalMaint(Pukal, RefKey);

            return Json(new { resultCd = result }, JsonRequestBehavior.AllowGet);
        }
        #endregion "Pukal"
        #region "Fetch Table List & Details"
        [CompressFilter]
        public async Task<ActionResult> ftTxnAdjList(jQueryDataTableParamModel Params, string AcctNo, bool isExport = false)
        {
            var _filtered = new List<TxnAdjustment>();
            var list = await objTxnAdjustmentOps.GetTxnAdjustmentList(AcctNo);

            if (!string.IsNullOrEmpty(Params.sSearch))
            {
                Params.sSearch = Params.sSearch.ToLower();
            }

            if (!string.IsNullOrEmpty(Params.sSearch))
            {
                _filtered = list.Where(p => p._CardnAccNo.CardNo.Contains(Params.sSearch) || p.TxnDate.Contains(Params.sSearch) || p.DisplayTotAmt.Contains(Params.sSearch) || p.TxnId.Contains(Params.sSearch)).ToList();
                _filtered = _filtered.Skip(Params.iDisplayStart).Take(Params.iDisplayLength).ToList();
            }
            else
            {
                _filtered = list.Skip(Params.iDisplayStart).Take(Params.iDisplayLength).ToList();
            }

            if (isExport)
            {
                var title = "Transaction Adjustment-" + AcctNo;
                var toExport = new List<string[]>();
                var Header = list.First().Excelheader();
                foreach (var item in list)
                {
                    toExport.Add(item.ExcelBody());
                }
                var ExcelPkg = CreateExcel(Header, toExport, title);
                return File(ExcelPkg.GetAsByteArray(), "application/vnd.ms-excel", title + ".xlsx");
                //return this.File(new UTF8Encoding().GetBytes(toExport.ToString()), "text/csv", "CardsList-"+AcctNo+".csv");
            }


            return Json(new
            {
                sEcho = Params.sEcho,
                iTotalRecords = list.Count(),
                iTotalDisplayRecords = list.Count(),
                aaData = _filtered.Select(x => new object[] { x.RefType, x._CardnAccNo.CardNo, x.TxnDate, x.DisplayTotAmt, x.Descp, x.StsDescp, x.UserId, x.TxnId, x.AppvRemarks, x.CreationDate })
            }, JsonRequestBehavior.AllowGet);

        }
        public async Task<ActionResult> ftTxnAdjDetail(TxnAdjustment _TxnAdjustment)
        {
            var data = await objTxnAdjustmentOps.GetTxnAdjustmentDetail(_TxnAdjustment);
            return Json(new { txn = data }, JsonRequestBehavior.AllowGet);
        }
        #endregion
        #region "Save & Delete Info"
        [HttpPost]
        public async Task<ActionResult> SaveTxnAdj(TxnAdjustment _TxnAdjustment, CardnAccNo _CardnAcct)
        {
            _TxnAdjustment._CardnAccNo = _CardnAcct;
            var _SaveTxn = await objTxnAdjustmentOps.SaveTxnAdjustment(_TxnAdjustment);

            return Json(new { txn = _SaveTxn }, JsonRequestBehavior.AllowGet);
        }
        public async Task<ActionResult> DelTxnAdj(TxnAdjustment _TxnAdjustment, CardnAccNo _CardnAcctNo)
        {
            _TxnAdjustment._CardnAccNo = _CardnAcctNo;
            var _deleteTxnAdj = await objTxnAdjustmentOps.DelTxnAdjustment(_TxnAdjustment);
            return Json(new { resultCd = _deleteTxnAdj }, JsonRequestBehavior.AllowGet);
        }
        #endregion
        #region "Account Users"

        [CompressFilter]
        public async Task<ActionResult> AccountUsersListSelect(jQueryDataTableParamModel Params, string AcctNo, String CorpCd)
        {
            var _filtered = new List<AccountUser>();
            var list = await objAcctOps.GetAccountUsers(AcctNo, CorpCd);

            if (!string.IsNullOrEmpty(Params.sSearch))
            {
                _filtered = list.Where(p => p.Username.ToLower().Contains(Params.sSearch) || p.PrivilegeCd.Contains(Params.sSearch) || p.Status.Contains(Params.sSearch)).ToList();
                _filtered = _filtered.Skip(Params.iDisplayStart).Take(Params.iDisplayLength).ToList();
            }
            else
            {
                _filtered = list.Skip(Params.iDisplayStart).Take(Params.iDisplayLength).ToList();
            }

            if (String.IsNullOrEmpty(CorpCd))
            {
                return Json(new
                {
                    sEcho = Params.sEcho,
                    iTotalRecords = list.Count(),
                    iTotalDisplayRecords = list.Count(),
                    aaData = _filtered.Select(x => new object[] { x.Username, x.PrivilegeCd, x.Status })
                }, JsonRequestBehavior.AllowGet);
            }
            else
            {
                return Json(new
                {
                    sEcho = Params.sEcho,
                    iTotalRecords = list.Count(),
                    iTotalDisplayRecords = list.Count(),
                    aaData = _filtered.Select(x => new object[] { x.Username, x.AcctNo, x.CompanyName, x.PrivilegeCd, x.Status })
                }, JsonRequestBehavior.AllowGet);
            }

            //var list = await objAcctOps.GetAccountUsers(AcctNo);
            //var filtered = list.Skip(Params.iDisplayStart).Take(Params.iDisplayLength);
            //return Json(new
            //{
            //    sEcho = Params.sEcho,
            //    iTotalRecords = list.Count(),
            //    iTotalDisplayRecords = list.Count(),
            //    aaData = filtered.Select(x => new object[] { 
            //   x.Username,x.PrivilegeCd,x.Status
            //    })
            //}, JsonRequestBehavior.AllowGet);
        }
        [HttpPost]
        public async Task<ActionResult> ResendActivationEmail(ResendAccountMail _Resend)
        {
            var resultCd = await objAcctOps.RensendActivationEmail(_Resend);
            return Json(new { resultCd = resultCd }, JsonRequestBehavior.AllowGet);
        }
        //public ActionResult MailMerge(string AcctNo)
        //{
        //    var resultCd = objAcctOps.MailMerge(AcctNo);
        //    return Json(new { resultCd = resultCd }, JsonRequestBehavior.AllowGet);
        //}
        public async Task<ActionResult> ResetPasswordCounter(string AcctNo, string UserId)
        {
            var resultCd = await objAcctOps.ResetPasswordCounter(AcctNo, UserId);
            return Json(new { resultCd = resultCd }, JsonRequestBehavior.AllowGet);
        }
        #endregion
        #region "Product Discount"
        public async Task<JsonResult> WebProductDiscountListSelect(string AcctNo, string DiscType, string RefTo, jQueryDataTableParamModel Params)
        {
            var _filtered = new List<ProductDiscount>();
            var list = await objAcctOps.WebProductDiscountListSelect(AcctNo, DiscType, RefTo);

            if (!string.IsNullOrEmpty(Params.sSearch))
            {
                Params.sSearch = Params.sSearch.ToLower();
            }

            if (!string.IsNullOrEmpty(Params.sSearch))
            {
                _filtered = list.Where(p => p.SelectedProdCd.ToLower().Contains(Params.sSearch) || p.ProdCdDescp.ToLower().Contains(Params.sSearch) || p.SelectedProdDiscType.ToLower().Contains(Params.sSearch) || p.ProdDiscDescp.ToLower().Contains(Params.sSearch) || p.SelectedPlanId.ToLower().Contains(Params.sSearch) || p.EffDateFrom.Contains(Params.sSearch) || p.CreatedBy.ToLower().Contains(Params.sSearch) || p.CreationDate.Contains(Params.sSearch) || p.Remarks.ToLower().Contains(Params.sSearch) || p.Id.Contains(Params.sSearch)).ToList();
                _filtered = _filtered.Skip(Params.iDisplayStart).Take(Params.iDisplayLength).ToList();
            }
            else
            {
                _filtered = list.Skip(Params.iDisplayStart).Take(Params.iDisplayLength).ToList();
            }

            return Json(new
            {
                sEcho = Params.sEcho,
                iTotalRecords = list.Count(),
                iTotalDisplayRecords = list.Count(),
                aaData = _filtered.Select(x => new object[] { x.SelectedProdCd, x.ProdCdDescp, x.SelectedProdDiscType, x.ProdDiscDescp, x.SelectedPlanId, x.EffDateFrom, x.EffDateTo, x.CreatedBy, x.CreationDate, x.Remarks, x.Id })
            }, JsonRequestBehavior.AllowGet);

            //var list = await objAcctOps.WebProductDiscountListSelect(AcctNo, DiscType);
            //var filtered = list.Skip(Params.iDisplayStart).Take(Params.iDisplayLength);
            //return Json(new
            //{
            //    sEcho = Params.sEcho,
            //    iTotalRecords = list.Count(),
            //    iTotalDisplayRecords = list.Count(),
            //    aaData = filtered.Select(x => new object[] { 
            //        x.SelectedProdCd,x.ProdCdDescp,x.SelectedProdDiscType,x.ProdDiscDescp,x.SelectedPlanId,x.EffDateFrom,x.CreatedBy,x.CreationDate,x.Remarks,x.Id
            //    })
            //}, JsonRequestBehavior.AllowGet);
        }
        public async Task<JsonResult> ProductDiscountSelect(string AcctNo, string DiscType, string Id, string RefTo)
        {
            var Discount = await objAcctOps.WebProductDiscountSelect(AcctNo, DiscType, Id, RefTo);
            return Json(new { Discount = Discount }, JsonRequestBehavior.AllowGet);
        }

        public async Task<JsonResult> PlanIDProdDisc(ProductDiscount _Discount)
        {
            var PlanId = _Discount.PlanId;

            if (_Discount.SelectedProdDiscType == "AMT")
            {
                _Discount.PlanId = await WebGetPlan("1");
            }
            else
            {
                _Discount.PlanId = await WebGetPlan("2");
            }


            //_Discount.PlanId = await BaseClass.WebGetPlan("2");
            return Json(new { PlanId = _Discount.PlanId }, JsonRequestBehavior.AllowGet);
        }

        [HttpPost]
        public async Task<JsonResult> ProductDiscountMaint(string AcctNo, ProductDiscount _Discount, string Func, string RefTo)//_Discount _Dicount
        {
            var result = await objAcctOps.ProductDiscountMaint(_Discount, AcctNo, Func, RefTo);
            return Json(new { result = result });
        }

        [HttpPost]
        public async Task<JsonResult> DeleteProductDiscount(ProductDiscount _Discount, string AcctNo, string RefTo)
        {
            var result = await objAcctOps.ProductDiscountDelete(_Discount, AcctNo, RefTo);
            return Json(new { result = result }, JsonRequestBehavior.AllowGet);
        }

        #endregion
        #region "Acct Milestone"
        [CompressFilter]
        public async Task<ActionResult> WebAcctMilestoneListSelect(jQueryDataTableParamModel Params, Milestone _milestone)
        {
            var _filtered = new List<Milestone>();
            var list = await objAcctOps.WebAcctMilestoneListSelect(_milestone);

            if (!string.IsNullOrEmpty(Params.sSearch))
            {
                Params.sSearch = Params.sSearch.ToLower();
            }

            if (!string.IsNullOrEmpty(Params.sSearch))
            {
                _filtered = list.Where(p => p.RefKey.ToString().Contains(Params.sSearch) || p.SelectedTaskNo.Contains(Params.sSearch) || p.selectedPriority.ToLower().Contains(Params.sSearch) || p.selectedStatus.ToLower().Contains(Params.sSearch) || p.CreationDate.Contains(Params.sSearch)).ToList();
                _filtered = _filtered.Skip(Params.iDisplayStart).Take(Params.iDisplayLength).ToList();
            }
            else
            {
                _filtered = list.Skip(Params.iDisplayStart).Take(Params.iDisplayLength).ToList();
            }
            return Json(new
            {
                sEcho = Params.sEcho,
                iTotalRecords = list.Count(),
                iTotalDisplayRecords = list.Count(),
                aaData = _filtered.Select(x => new object[] { x.RefKey, x.AcctNo, x.SelectedTaskNo, x.TaskDescp, x.selectedPriority, x.selectedStatus, x.CreationDate, x.LastUpdDate })
                //aaData = _filtered.Select(x => new object[] { x.RefKey, x.SelectedTaskNo, x.selectedPriority, x.selectedStatus, x.CreationDate, x.LastUpdDate })// x.selectedReasonCd, x.Remarks, x.Remarks, x.RecallDate,
            }, JsonRequestBehavior.AllowGet);
        }
        #endregion
        #region "Account Event Configuration"

        public async Task<ActionResult> WebEventAcctConfListSelect(jQueryDataTableParamModel Params, string RefTo, string RefKey = "ACCT")
        {
            EventConfigMaint _EventConfigMaint = new EventConfigMaint();
            var _filtered = new List<LookupParameters>();
            var list = await _EventConfigMaint.WebEventAcctConfListSelect(RefTo, RefKey);

            if (!string.IsNullOrEmpty(Params.sSearch))
            {
                Params.sSearch = Params.sSearch.ToLower();
            }

            if (!string.IsNullOrEmpty(Params.sSearch))
            {
                _filtered = list.Where(p => p.EventScheduleId.ToLower().Contains(Params.sSearch) || p.type.ToLower().Contains(Params.sSearch) || p.ShortDescp.ToLower().Contains(Params.sSearch) || p.DetailedDescp.ToLower().Contains(Params.sSearch) || p.SelectedStatus.ToLower().Contains(Params.sSearch)).ToList();
                _filtered = _filtered.Skip(Params.iDisplayStart).Take(Params.iDisplayLength).ToList();
            }
            else
            {
                _filtered = list.Skip(Params.iDisplayStart).Take(Params.iDisplayLength).ToList();
            }

            return Json(new
            {
                sEcho = Params.sEcho,
                iTotalRecords = list.Count(),
                iTotalDisplayRecords = list.Count(),
                aaData = _filtered.Select(x => new object[] { x.EventTypeId, x.EventScheduleId, x.type, x.ShortDescp, x.DetailedDescp, x.SelectedStatus, x.LastUpdated, x.UpdatedBy })
            }, JsonRequestBehavior.AllowGet);
        }

        public async Task<ActionResult> WebEventAcctConfSelect(string EventTypeId, string EventScheduleId, string AcctNo)
        {
            EventConfigMaint _EventConfigMaint = new EventConfigMaint();
            var Selects = new LookupParameters
            {
                EventType = await _EventConfigMaint.WebGetEvtType(),
                Priority = await WebGetRefLib("Priority"),
                Status = await WebGetRefLib("Status"),
                Scope = await WebGetRefLib("Scope"),
                Owner = await WebGetRefLib("NtfEventOwner"),
                Frequency = await WebGetRefLib("NtfEventPeriodType"),
                Languages = await WebGetRefLib("Language"),
                RefTo = await WebGetEvtRefConf(EventTypeId)
            };
            var Model = await _EventConfigMaint.WebEventAcctConfSelect(EventTypeId, EventScheduleId, AcctNo);
            return Json(new { Model = Model, Selects = Selects }, JsonRequestBehavior.AllowGet);
        }

        public async Task<ActionResult> WebEventAcctRcptListSelect(string ScheduleId)
        {
            EventConfigMaint _EventConfigMaint = new EventConfigMaint();
            var list = await _EventConfigMaint.WebEventAcctRcptListSelect(ScheduleId);
            return Json(list, JsonRequestBehavior.AllowGet);
        }

        [HttpPost]
        public async Task<ActionResult> WebEventAcctConfMaint(LookupParameters Param)
        {
            var result= await new EventConfigMaint().WebEventAcctConfMaint(Param);
            return Json(result);
        }



        #endregion
    }
}