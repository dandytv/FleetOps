using AutoMapper;
using CardTrend.Common.Extensions;
using CardTrend.Domain.Dto.Account;
using CardTrend.Domain.Dto.Applicant;
using ModelSector;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;

namespace FleetSys.Helpers
{
    public class ApplicantSignUpMappingProfile : Profile
    {
        protected override void Configure()
        {
            this.CreateMap<CardAppcInfoDTO, CardAppcInfoModel>()
                .ForMember(d => d.DialogueInd, m => m.Ignore())
                .ForMember(d => d.SKDSNo, m => m.Ignore())
                .ForMember(d => d.CardType, m => m.Ignore())
                .ForMember(d => d.PinInd, m => m.Ignore())
                .ForMember(d => d.JoiningFee, m => m.Ignore())
                .ForMember(d => d.CostCentre, m => m.Ignore())
                .ForMember(d => d.BranchCd, m => m.Ignore())
                .ForMember(d => d.DeptCd, m => m.Ignore())
                .ForMember(d => d.CardMedia, m => m.Ignore())

                .ForMember(d => d.AppcId, m => m.MapFrom(src => NumberExtensions.ConvertLong(src.AppcId)))
                .ForMember(d => d.CardType, m => m.MapFrom(src => CustomMapperExtensions.MapIEnumerableToList(src.CardTypeLst)))
                .ForMember(d => d.CardNo, m => m.MapFrom(src => src.CardNo))
                .ForMember(d => d.DriverName, m => m.MapFrom(src => src.DriverName))
                .ForMember(d => d.SelectedSKDSNo, m => m.MapFrom(src => src.SKDSNo))
                .ForMember(d => d.vehRegNo, m => m.MapFrom(src => src.VehRegsNo))
                .ForMember(d => d.SelectedCurrentStatus, m => m.MapFrom(src => src.Sts))
                .ForMember(d => d.SKDSInd, m => m.MapFrom(src => NumberExtensions.BoolConverter(src.SKDSInd)))
                .ForMember(d => d.SKDSQuota, m => m.MapFrom(src => src.SKDSQuota.HasValue ? NumberExtensions.CustomNumberFormat(String.Format("{0:0.00}", src.SKDSQuota)) : ""))
                .ForMember(d => d.PushAlertInd, m => m.MapFrom(src => NumberExtensions.BoolConverter(src.PushAlertInd)))
                .ForMember(d => d.LitreLimit, m => m.MapFrom(src => src.LitLimit.HasValue ? NumberExtensions.CustomNumberFormat(String.Format("{0:0.00}", src.LitLimit)) : ""))
                .ForMember(d => d.TxnLimit, m => m.MapFrom(src => src.TxnLimit.HasValue ? NumberExtensions.CustomNumberFormat(String.Format("{0:0.00}", src.TxnLimit)) : ""))
                .ForMember(d => d.PINExceedCnt, m => m.MapFrom(src => src.PINExceedCnt.HasValue ? Convert.ToInt32(src.PINExceedCnt) : 0))

                .ForMember(d => d.SelectedPinInd, m => m.MapFrom(src => src.PINInd))
                .ForMember(d => d.OdometerReadingInd, m => m.MapFrom(src => NumberExtensions.BoolConverter(src.OdometerInd)))
                .ForMember(d => d.SelectedVehicleModel, m => m.MapFrom(src => src.Model))
                .ForMember(d => d.EmbossName, m => m.MapFrom(src => src.EmbName))
                .ForMember(d => d.SelectedCardType, m => m.MapFrom(src => src.CardType))
                .ForMember(d => d.SelectedDialogueInd, m => m.MapFrom(src => src.DialogueInd))
                .ForMember(d => d.SelectedCostCentre, m => m.MapFrom(src => src.CostCentre))
                .ForMember(d => d.AcctNo, m => m.MapFrom(src => src.AcctNo))
                .ForMember(d => d.PriAppcId, m => m.MapFrom(src => src.PriAppcId.HasValue? src.PriAppcId:0))
                .ForMember(d => d.PrimaryCard, m => m.MapFrom(src => src.PrimaryCard))
                .ForMember(d => d.SelectedJoining, m => m.MapFrom(src => src.JoiningFeeCd))
                .ForMember(d => d.SelectedAnnualFee, m => m.MapFrom(src => src.AnnlFeeCd))
                .ForMember(d => d.SelectedCardMedia, m => m.MapFrom(src => src.CardMedia))
                .ForMember(d => d.SelectedBranchCd, m => m.MapFrom(src => src.BranchCd))
                .ForMember(d => d.SelectedDivisionCode, m => m.MapFrom(src => src.DivisionCd))
                .ForMember(d => d.SelectedDeptCd, m => m.MapFrom(src => src.DeptCd))
                .ForMember(d => d.SelectedProductUtilization, m => m.MapFrom(src => src.ProdGroup))

                .ForMember(d => d.BranchCd, m => m.MapFrom(src => CustomMapperExtensions.MapIEnumerableToList(src.BranchCdLst)))
                .ForMember(d => d.DivisionCode, m => m.MapFrom(src => CustomMapperExtensions.MapIEnumerableToList(src.DivisionCodeLst)))
                .ForMember(d => d.DeptCd, m => m.MapFrom(src => CustomMapperExtensions.MapIEnumerableToList(src.DeptCdLst)))
                ;
            this.CreateMap<CardAppcInfoModel, CardAppcInfoDTO>()
                .ForMember(d => d.DialogueInd, m => m.Ignore())
                .ForMember(d => d.SKDSNo, m => m.Ignore())
                .ForMember(d => d.CardType, m => m.Ignore())
                .ForMember(d => d.CostCentre, m => m.Ignore())
                .ForMember(d => d.BranchCd, m => m.Ignore())
                .ForMember(d => d.DeptCd, m => m.Ignore())
                .ForMember(d => d.CardMedia, m => m.Ignore())
                .ForMember(d => d.AppcId, m => m.MapFrom(src =>Convert.ToInt32(src.AppcId)))
                .ForMember(d => d.CardType, m => m.MapFrom(src => src.SelectedCardType))
                .ForMember(d => d.SKDSNo, m => m.MapFrom(src => src.SelectedSKDSNo))
                .ForMember(d => d.VehRegsNo, m => m.MapFrom(src => src.vehRegNo))
                .ForMember(d => d.Sts, m => m.MapFrom(src => src.SelectedCurrentStatus))
                .ForMember(d => d.SKDSInd, m => m.MapFrom(src => NumberExtensions.ConvertBoolDB(src.SKDSInd)))
                .ForMember(d => d.SKDSQuota, m => m.MapFrom(src => NumberExtensions.ConvertDecimalToDb(src.SKDSQuota)))
                .ForMember(d => d.PushAlertInd, m => m.MapFrom(src => NumberExtensions.ConvertBoolDB(src.PushAlertInd)))
                .ForMember(d => d.LitLimit, m => m.MapFrom(src => NumberExtensions.ConvertDecimalToDb(src.LitreLimit)))
                .ForMember(d => d.TxnLimit, m => m.MapFrom(src => NumberExtensions.ConvertDecimalToDb(src.TxnLimit)))
                .ForMember(d => d.PINExceedCnt, m => m.MapFrom(src => Convert.ToByte(src.PINExceedCnt)))
                .ForMember(d => d.PINInd, m => m.MapFrom(src => src.SelectedPinInd))
                .ForMember(d => d.OdometerInd, m => m.MapFrom(src => NumberExtensions.ConvertBoolDB(src.OdometerReadingInd)))
                .ForMember(d => d.Model, m => m.MapFrom(src => src.SelectedVehicleModel))
                .ForMember(d => d.EmbName, m => m.MapFrom(src => src.EmbossName))
                .ForMember(d => d.CardType, m => m.MapFrom(src => src.SelectedCardType))
                .ForMember(d => d.DialogueInd, m => m.MapFrom(src => src.SelectedDialogueInd))
                .ForMember(d => d.CostCentre, m => m.MapFrom(src => src.SelectedCostCentre))
                .ForMember(d => d.PriAppcId, m => m.MapFrom(src => src.PriAppcId ))
                .ForMember(d => d.PrimaryCard, m => m.MapFrom(src => src.PrimaryCard))
                .ForMember(d => d.JoiningFeeCd, m => m.MapFrom(src => src.SelectedJoining))
                .ForMember(d => d.AnnlFeeCd, m => m.MapFrom(src => src.SelectedAnnualFee))
                .ForMember(d => d.CardMedia, m => m.MapFrom(src => src.SelectedCardMedia))
                .ForMember(d => d.BranchCd, m => m.MapFrom(src => src.SelectedBranchCd))
                .ForMember(d => d.DivisionCd, m => m.MapFrom(src => src.SelectedDivisionCode))
                .ForMember(d => d.DeptCd, m => m.MapFrom(src => src.SelectedDeptCd))
                .ForMember(d => d.ProdGroup, m => m.MapFrom(src => src.SelectedProductUtilization))
                .ForMember(d => d.BranchCdLst, m => m.MapFrom(src => CustomMapperExtensions.MapIEnumerableToList(src.BranchCd)))
                .ForMember(d => d.DivisionCodeLst, m => m.MapFrom(src => CustomMapperExtensions.MapIEnumerableToList(src.DivisionCode)))
                .ForMember(d => d.DeptCdLst, m => m.MapFrom(src => CustomMapperExtensions.MapIEnumerableToList(src.DeptCd)))
                ;
            this.CreateMap<CardFinancialInfoModel, CardFinancialInfoDTO>()
                 .ForMember(d => d.TxnLimit, m => m.MapFrom(src => NumberExtensions.ConvertDecimalToDb(src.txnLimit)))
                 .ForMember(d => d.LitLimit, m => m.MapFrom(src => NumberExtensions.ConvertDecimalToDb(src.litLimit)))
                 .ForMember(d => d.PinExceedCnt, m => m.MapFrom(src => NumberExtensions.ConvertIntToDb(src.PinAttempted)))
                 .ForMember(d => d.PinAttempted, m => m.MapFrom(src => NumberExtensions.ConvertIntToDb(src.PinAttempted)))
                 .ForMember(d => d.PinTriedUpdDate, m => m.MapFrom(src => NumberExtensions.DateConverterDB(src.PinTriedUpdDate)))
                 ;
            this.CreateMap<CardFinancialInfoDTO, CardFinancialInfoModel>()
                .ForMember(d => d.txnLimit, m => m.MapFrom(src => src.TxnLimit.HasValue ? NumberExtensions.CustomNumberFormat(String.Format("{0:0.00}",(src.TxnLimit)))  : ""))
                .ForMember(d => d.litLimit, m => m.MapFrom(src => src.TxnLimit.HasValue ? NumberExtensions.CustomNumberFormat(String.Format("{0:0.00}",(src.LitLimit)))  : ""))
                .ForMember(d => d.PinExceedCnt, m => m.MapFrom(src => src.PinExceedCnt.HasValue ? Convert.ToInt32(src.PinExceedCnt) : 0))
                .ForMember(d => d.PinAttempted, m => m.MapFrom(src => Convert.ToInt32(src.PinAttempted)))
                .ForMember(d => d.PinTriedUpdDate, m => m.MapFrom(src => NumberExtensions.DateConverter(src.PinTriedUpdDate)))
                ;

            this.CreateMap<AccountCaoDTO, CreditAssesOperation>()
                .ForMember(d => d.TerritoryCd, m => m.Ignore())
                .ForMember(d => d.RiskCategory, m => m.Ignore())
                .ForMember(d => d.remarkHistory, m => m.Ignore())
                .ForMember(d => d.AssesmtType, m => m.Ignore())
                .ForMember(d => d.BankAcctType, m => m.Ignore())
                .ForMember(d => d.BankName, m => m.Ignore())
                .ForMember(d => d.DepositType, m => m.Ignore())
                .ForMember(d => d.ReasonCd, m => m.Ignore())
                .ForMember(d => d.PaymentMode, m => m.Ignore())
                .ForMember(d => d.PaymentTerm, m => m.Ignore())
                .ForMember(d => d.Quantitative, m => m.Ignore())
                .ForMember(d => d.Qualitative, m => m.Ignore())
                .ForMember(d => d.CreditLimit, m => m.MapFrom(src => src.CreditLimit.HasValue ? NumberExtensions.CustomNumberFormat(String.Format("{0:0.00}", src.CreditLimit)) : ""))
                .ForMember(d => d.SelectedPaymentMode, m => m.MapFrom(src => !string.IsNullOrEmpty(src.PymtMode)? src.PymtMode : "0"))
                .ForMember(d => d.SelectedPaymentTerm, m => m.MapFrom(src => src.PymtTerms))
                .ForMember(d => d.TxnAmtLimit, m => m.MapFrom(src => src.TxnAmtLimit.HasValue ? NumberExtensions.CustomNumberFormat(String.Format("{0:0.00}", src.TxnAmtLimit)) : ""))
                .ForMember(d => d.TxnLitLimit, m => m.MapFrom(src => src.TxnLitLimit.HasValue ? NumberExtensions.CustomNumberFormat(String.Format("{0:0.00}", src.TxnLitLimit)) : ""))
                .ForMember(d => d.SelectedTerritoryCd, m => m.MapFrom(src => src.SaleTerritory))
                .ForMember(d => d.SelectedRiskCategry, m => m.MapFrom(src => string.IsNullOrEmpty(src.RiskCategory) ? "1" : src.RiskCategory))
                .ForMember(d => d.SelectedAssesmtType, m => m.MapFrom(src => src.AssessmentType))
                .ForMember(d => d.SecurityAmt, m => m.MapFrom(src => src.SecurityAmt.HasValue ? NumberExtensions.CustomNumberFormat(String.Format("{0:0.00}", src.SecurityAmt)) : ""))
                .ForMember(d => d.DirectDebitInd, m => m.MapFrom(src => NumberExtensions.BoolConverter(src.DirectDebitInd)))
                .ForMember(d => d.SelectedDepositType, m => m.MapFrom(src => src.DepositType))

                .ForMember(d => d.DepositExp, m => m.MapFrom(src => NumberExtensions.DateConverter(src.DepositExp)))
                .ForMember(d => d.SelectedBankAcctType, m => m.MapFrom(src => src.BankAcctType))
                .ForMember(d => d.SelectedBankName, m => m.MapFrom(src => src.BankName))

                //.ForMember(d => d.BankBranchCode, m => m.MapFrom(src => src.SAPRefNo))
                .ForMember(d => d.DepositFromDate, m => m.MapFrom(src => NumberExtensions.DateConverter(src.EffFromDate)))
                .ForMember(d => d.DepositToDate, m => m.MapFrom(src => NumberExtensions.DateConverter(src.EffToDate)))

                .ForMember(d => d.BankAcctNo, m => m.MapFrom(src => src.BankAcctNo))
                .ForMember(d => d.BankBranchCode, m => m.MapFrom(src => src.BGSerialNo))
                .ForMember(d => d.DepositAmt, m => m.MapFrom(src => src.DepositAmt.HasValue ? NumberExtensions.CustomNumberFormat(String.Format("{0:0.00}", src.DepositAmt)) : ""))

                .ForMember(d => d.ValidityDate, m => m.MapFrom(src => NumberExtensions.DateConverter(src.ValidityDate)))
                .ForMember(d => d.NRID, m => m.MapFrom(src => NumberExtensions.DateConverter(src.NRID)))
                .ForMember(d => d.SelectedReasonCode, m => m.MapFrom(src => src.ReasonCd))

                .ForMember(d => d.AppvUserIdQAOff, m => m.MapFrom(src => src.AppvUserId1))
                .ForMember(d => d.SelectedAppvStsQAOff, m => m.MapFrom(src => src.AppvSts1))
                .ForMember(d => d.AppvDateQAOff, m => m.MapFrom(src => NumberExtensions.DateConverter(src.AppvDate1)))

                .ForMember(d => d.AppvUserIdBackOff, m => m.MapFrom(src => src.AppvUserId2))
                .ForMember(d => d.SelectedAppvStsBackOff, m => m.MapFrom(src => src.AppvSts2))
                .ForMember(d => d.AppvDateBackOff, m => m.MapFrom(src => NumberExtensions.DateConverter(src.AppvDate2)))

                .ForMember(d => d.AppvUserIdEDP, m => m.MapFrom(src => src.AppvUserId4))
                .ForMember(d => d.SelectedAppvStsEDP, m => m.MapFrom(src => src.AppvSts4))
                .ForMember(d => d.AppvDateEDP, m => m.MapFrom(src => NumberExtensions.DateConverter(src.AppvDate4)))

                .ForMember(d => d.Txnid, m => m.MapFrom(src => src.TxnId))
                .ForMember(d => d.Creationdt, m => m.MapFrom(src => NumberExtensions.DateConverter(src.CreationDate)))
                .ForMember(d => d.remarks, m => m.MapFrom(src => src.Remarks))
                .ForMember(d => d.SelectedQuantitative, m => m.MapFrom(src => src.Quantitativerating))
                .ForMember(d => d.SelectedQualitative, m => m.MapFrom(src => src.Qualitativerating))

                .ForMember(d => d.ProposeCreditLimit, m => m.MapFrom(src => src.PropCreditLimit.HasValue ? NumberExtensions.CustomNumberFormat(String.Format("{0:0.00}", src.PropCreditLimit)) : ""))
                .ForMember(d => d.RecommendCreditLimit, m => m.MapFrom(src => src.RecCreditLimit.HasValue ? NumberExtensions.CustomNumberFormat(String.Format("{0:0.00}", src.RecCreditLimit)) : ""))
                .ForMember(d => d.ProposeSecurityAmt, m => m.MapFrom(src => src.PropSecurityAmt.HasValue ? NumberExtensions.CustomNumberFormat(String.Format("{0:0.00}", src.PropSecurityAmt)) : ""))

                .ForMember(d => d.RecommendSecurityAmt, m => m.MapFrom(src => src.RecSecurityAmt.HasValue ? NumberExtensions.CustomNumberFormat(String.Format("{0:0.00}", src.RecSecurityAmt)) : ""))
                .ForMember(d => d.DocPath, m => m.MapFrom(src => src.DocPath))
                .ForMember(d => d.SelectedTradingArea, m => m.MapFrom(src => src.TradingArea))
                //.ForMember(d => d.remarkHistory, m => m.MapFrom(s => CustomMapperExtensions.MapIEnumerableToList(s.remarkHistory)))
                ;

            this.CreateMap<CreditAssesOperation, AccountCaoDTO>()
               .ForMember(d => d.RiskCategory, m => m.Ignore())
               .ForMember(d => d.BankAcctType, m => m.Ignore())
               .ForMember(d => d.BankName, m => m.Ignore())
               .ForMember(d => d.DepositType, m => m.Ignore())
               .ForMember(d => d.ReasonCd, m => m.Ignore())
               .ForMember(d => d.AcctNo, m => m.MapFrom(src => src.acctNo))
               .ForMember(d => d.CreditLimit, m => m.MapFrom(src => NumberExtensions.ConvertDecimalToDb(src.CreditLimit)))
               .ForMember(d => d.PymtTerms, m => m.MapFrom(src => Convert.ToInt32(src.SelectedPaymentTerm)))
               .ForMember(d => d.TxnAmtLimit, m => m.MapFrom(src => NumberExtensions.ConvertDecimalToDb(src.TxnAmtLimit)))
               .ForMember(d => d.TxnLitLimit, m => m.MapFrom(src => NumberExtensions.ConvertDecimalToDb(src.TxnLitLimit)))
               .ForMember(d => d.SaleTerritory, m => m.MapFrom(src => src.SelectedTerritoryCd))
               .ForMember(d => d.RiskCategory, m => m.MapFrom(src => src.SelectedRiskCategry))
               .ForMember(d => d.AssessmentType, m => m.MapFrom(src => src.SelectedAssesmtType))

               //.ForMember(d => d.SecurityAmt, m => m.MapFrom(src => src.SecurityAmt.HasValue ? NumberExtensions.CustomNumberFormat(String.Format("{0:0.00}", src.SecurityAmt)) : ""))
               .ForMember(d => d.DirectDebitInd, m => m.MapFrom(src => NumberExtensions.ConvertBoolDB(src.DirectDebitInd)))
               .ForMember(d => d.DepositType, m => m.MapFrom(src => src.SelectedDepositType))

               .ForMember(d => d.DepositExp, m => m.MapFrom(src => NumberExtensions.DateConverter(src.DepositExp)))
               .ForMember(d => d.BankAcctType, m => m.MapFrom(src => src.SelectedBankAcctType))
               .ForMember(d => d.BankName, m => m.MapFrom(src => src.SelectedBankName))

               .ForMember(d => d.BankAcctNo, m => m.MapFrom(src => src.BankAcctNo))
               .ForMember(d => d.BankBranchCd, m => m.MapFrom(src => src.BankBranchCode))
               .ForMember(d => d.DepositAmt, m => m.MapFrom(src => NumberExtensions.ConvertDecimalToDb(src.DepositAmt)))

               .ForMember(d => d.ValidityDate, m => m.MapFrom(src => NumberExtensions.DateConverterDB(src.ValidityDate)))
               .ForMember(d => d.NRID, m => m.MapFrom(src => NumberExtensions.DateConverterDB(src.NRID)))
               .ForMember(d => d.ReasonCd, m => m.MapFrom(src => src.SelectedReasonCode))

               .ForMember(d => d.AppvUserId1, m => m.MapFrom(src => src.AppvUserIdQAOff))
               .ForMember(d => d.AppvSts1, m => m.MapFrom(src => src.SelectedAppvStsQAOff))
               .ForMember(d => d.AppvDate1, m => m.MapFrom(src => NumberExtensions.DateConverterDB(src.AppvDateQAOff)))

               .ForMember(d => d.AppvUserId2, m => m.MapFrom(src => src.AppvUserIdBackOff))
               .ForMember(d => d.AppvSts2, m => m.MapFrom(src => src.SelectedAppvStsBackOff))
               .ForMember(d => d.AppvDate2, m => m.MapFrom(src => NumberExtensions.DateConverterDB(src.AppvDateBackOff)))

               .ForMember(d => d.AppvUserId4, m => m.MapFrom(src => src.AppvUserIdEDP))
               .ForMember(d => d.AppvSts4, m => m.MapFrom(src => src.SelectedAppvStsEDP))
               .ForMember(d => d.AppvDate4, m => m.MapFrom(src => NumberExtensions.DateConverterDB(src.AppvDateEDP)))
               .ForMember(d => d.PymtMode, m => m.MapFrom(src => src.SelectedPaymentMode))

               .ForMember(d => d.Remarks, m => m.MapFrom(src => src.remarks))
               .ForMember(d => d.Quantitativerating, m => m.MapFrom(src => src.SelectedQuantitative))
               .ForMember(d => d.Qualitativerating, m => m.MapFrom(src => src.SelectedQualitative))

               .ForMember(d => d.PropCreditLimit, m => m.MapFrom(src => NumberExtensions.ConvertDecimalToDb(src.ProposeCreditLimit)))
               .ForMember(d => d.RecCreditLimit, m => m.MapFrom(src => NumberExtensions.ConvertDecimalToDb(src.RecommendCreditLimit)))
               .ForMember(d => d.PropSecurityAmt, m => m.MapFrom(src => NumberExtensions.ConvertDecimalToDb(src.ProposeSecurityAmt)))

               .ForMember(d => d.RecSecurityAmt, m => m.MapFrom(src => NumberExtensions.ConvertDecimalToDb(src.RecommendSecurityAmt)))
               .ForMember(d => d.DocPath, m => m.MapFrom(src => src.DocPath))
               .ForMember(d => d.TradingArea, m => m.MapFrom(src => src.SelectedTradingArea))
               ;
            this.CreateMap<WebSecDepRemarksDTO, RemarkHistory>()
                 .ForMember(d => d.Content, m => m.MapFrom(src => src.RemarkHistory))
                 .ForMember(d => d.CreationDate, m => m.MapFrom(src => src.CreationDate))
                 .ForMember(d => d.UserId, m => m.MapFrom(src => src.CreatedBy))
                ;

            this.CreateMap<AcctDepositInfoDTO, CreditAssesOperation>()
               .ForMember(d => d.TerritoryCd, m => m.Ignore())
               .ForMember(d => d.RiskCategory, m => m.Ignore())
               .ForMember(d => d.remarkHistory, m => m.Ignore())
               .ForMember(d => d.AssesmtType, m => m.Ignore())
               .ForMember(d => d.BankAcctType, m => m.Ignore())
               .ForMember(d => d.BankName, m => m.Ignore())
               .ForMember(d => d.DepositType, m => m.Ignore())
               .ForMember(d => d.ReasonCd, m => m.Ignore())
               .ForMember(d => d.PaymentMode, m => m.Ignore())
               .ForMember(d => d.PaymentTerm, m => m.Ignore())
               .ForMember(d => d.Quantitative, m => m.Ignore())
               .ForMember(d => d.Qualitative, m => m.Ignore())
               .ForMember(d => d.DirectDebitInd, m => m.MapFrom(src => NumberExtensions.BoolConverter(src.DirectDebitInd)))
               .ForMember(d => d.SelectedDepositType, m => m.MapFrom(src => src.DepositType))
               .ForMember(d => d.SelectedBankAcctType, m => m.MapFrom(src => src.BankAcctType))
               .ForMember(d => d.SelectedBankName, m => m.MapFrom(src => src.BankName))
               .ForMember(d => d.BankAcctNo, m => m.MapFrom(src => src.BankAcctNo))
               .ForMember(d => d.DepositAmt, m => m.MapFrom(src => src.DepositAmt.HasValue ? NumberExtensions.CustomNumberFormat(String.Format("{0:0.00}", src.DepositAmt)) : ""))
               .ForMember(d => d.Txnid, m => m.MapFrom(src => src.TxnId))
               .ForMember(d => d.Creationdt, m => m.MapFrom(src => src.CreationDate))
               .ForMember(d => d.DepositFromDate, m => m.MapFrom(src => NumberExtensions.DateConverter(src.DepositFromDate)))
               .ForMember(d => d.DepositToDate, m => m.MapFrom(src => NumberExtensions.DateConverter(src.DepositToDate)))
               .ForMember(d => d.BgSerialNo, m => m.MapFrom(src => src.BGSerialNo))
               .ForMember(d => d.SecurityAmt, m => m.MapFrom(src => src.SecurityDeposit.HasValue ? NumberExtensions.CustomNumberFormat(String.Format("{0:0.00}", src.SecurityDeposit)) : ""))
               .ForMember(d => d.SAPRefNo, m => m.MapFrom(src => src.SAPRefNo))
               .ForMember(d => d.ValidityDate, m => m.MapFrom(src => NumberExtensions.DateConverter(src.ValidityDate)))
               ;
        }
    }
}