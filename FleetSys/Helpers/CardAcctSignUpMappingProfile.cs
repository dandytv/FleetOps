using AutoMapper;
using CardTrend.Common.Extensions;
using CardTrend.Domain.Dto;
using CardTrend.Domain.Dto.Account;
using CardTrend.Domain.Dto.Application;
using CardTrend.Domain.Dto.CardHolder;
using CCMS.ModelSector;
using ModelSector;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;

namespace FleetSys.Helpers
{
    public class CardAcctSignUpMappingProfile : Profile
    {
        protected override void Configure()
        {
            this.CreateMap<MilestoneDTO, Milestone>()
                .ForMember(d => d.Priority, m => m.Ignore())
                .ForMember(d => d.TaskNo, m => m.Ignore())
                .ForMember(d => d.Owner, m => m.Ignore())
                .ForMember(d => d.ReasonCd, m => m.Ignore())
                .ForMember(d => d.SelectedTaskNo, m => m.MapFrom(src => src.TaskNo))
                .ForMember(d => d.selectedStatus, m => m.MapFrom(src => src.StsDescp))
                .ForMember(d => d.CreationDate, m => m.MapFrom(src => NumberExtensions.DateTimeConverter2(src.CreationDate)))
                .ForMember(d => d.LastUpdDate, m => m.MapFrom(src => (!src.LastUpdDate.HasValue ? string.Empty : src.LastUpdDate.ToString())))
                .ForMember(d => d.selectedReasonCd, m => m.MapFrom(src => src.ReasonCd))
                .ForMember(d => d.CompanyName, m => m.MapFrom(src => (src.WorkflowCd == "APPL" ? src.CmpyName1 : src.CmpyName)))
                .ForMember(d => d.RecallDate, m => m.MapFrom(src => (src.WorkflowCd == "APPL" ? src.RecallDate : src.LastUpdDate.ToString())))
                .ForMember(d => d.selectedPriority, m => m.MapFrom(src => src.Priority))
                .ForMember(d => d.ID, m => m.MapFrom(src => src.Id))
                .ForMember(d => d.BatchID, m => m.MapFrom(src => src.BatchId))
                .ForMember(d => d.Descp, m => m.MapFrom(src => (!string.IsNullOrEmpty(src.AssessmentType) ? src.AssessmentType : src.RequestType)))
                .ForMember(d => d.CardNumber, m => m.MapFrom(src => Convert.ToString(src.CardNo)))
                .ForMember(d => d.RequestValue, m => m.MapFrom(src => src.ReqVal))
                .ForMember(d => d.workflowcd, m => m.MapFrom(src => src.WorkflowCd))
                .ForMember(d => d.selectedOwner, m => m.MapFrom(src => src.Owner))
                .ForMember(d => d.CreditLimit, m => m.MapFrom(src => NumberExtensions.ConverterDecimal(src.CreditLimit.ToString())))
                .ForMember(d => d.SecurityAmt, m => m.MapFrom(src => NumberExtensions.ConverterDecimal(src.SecurityAmt.ToString())))
                ;
            this.CreateMap<SPOMilestoneDTO, Milestone>()
                .ForMember(d => d.TaskNo, m => m.Ignore())
                .ForMember(d => d.RefKey, m => m.MapFrom(src => src.EventId))
                .ForMember(d => d.Descp, m => m.MapFrom(src => src.ReqType))
                .ForMember(d => d.RequestValue, m => m.MapFrom(src => src.ReqValue))
                .ForMember(d => d.SelectedTaskNo, m => m.MapFrom(src => Convert.ToString(src.TaskNo)))
                .ForMember(d => d.AcctNo, m => m.MapFrom(src => Convert.ToString(src.AcctNo)))
                .ForMember(d => d.CardNumber, m => m.MapFrom(src => Convert.ToString(src.CardNo)))
                .ForMember(d => d.CompanyName, m => m.MapFrom(src => (src.CmpyName)))
                .ForMember(d => d.selectedStatus, m => m.MapFrom(src => src.Sts))
                .ForMember(d => d.CreationDate, m => m.MapFrom(src => NumberExtensions.DateTimeConverter2(src.ReqDate)))
                .ForMember(d => d.LastUpdDate, m => m.MapFrom(src => NumberExtensions.DateTimeConverter2(src.LastUpdDate)))
                .ForMember(d => d.RequestBy, m => m.MapFrom(src => src.ReqBy))
                .ForMember(d => d.workflowcd, m => m.MapFrom(src => src.WorkflowCd))
                ;
            this.CreateMap<AcctSignUp, AcctSignUpDTO>()
                .ForMember(d => d.ReasonCd, m => m.Ignore())
                .ForMember(d => d.ClientType, m => m.Ignore())
                .ForMember(d => d.ClientClass, m => m.Ignore())
                .ForMember(d => d.LangId, m => m.Ignore())
                .ForMember(d => d.TaxCategory, m => m.Ignore())
                .ForMember(d => d.InvoicePref, m => m.Ignore())
                .ForMember(d => d.PlasticType, m => m.Ignore())
                .ForMember(d => d.PlasticType, m => m.MapFrom(src => src.selectedPlasticType))
                .ForMember(d => d.CycNo, m => m.MapFrom(src => Convert.ToByte(src.SelectedCycleNo)))
                .ForMember(d => d.ApplId, m => m.MapFrom(src => src.ApplicationId))
                .ForMember(d => d.CorpCd, m => m.MapFrom(src => src.SelectedCorporateAcct))
                .ForMember(d => d.Reference, m => m.MapFrom(src => src.ApplicationRef))
                .ForMember(d => d.CmpyLegalName, m => m.MapFrom(src => src.CompanyLegalName))
                .ForMember(d => d.CmpyName, m => m.MapFrom(src => src.CompanyName))
                .ForMember(d => d.CmpyEmbName, m => m.MapFrom(src => src.CompanyEmbName))
                .ForMember(d => d.ContactPerson, m => m.MapFrom(src => src.ContactPerson))
                .ForMember(d => d.BusnCategory, m => m.MapFrom(src => src.SelectedBusinessCategory))
                .ForMember(d => d.CmpyType, m => m.MapFrom(src => src.selectedCompanyType))
                .ForMember(d => d.SAPNo, m => m.MapFrom(src => src.SapNo))
                .ForMember(d => d.EmailAddr, m => m.MapFrom(src => src.emailAddress))
                .ForMember(d => d.CmpyRegsNo, m => m.MapFrom(src => src.CompanyRegnNo))
                .ForMember(d => d.CmpyRegsDate, m => m.MapFrom(src => NumberExtensions.DateConverterDB(src.CompanyRegnDate)))
                .ForMember(d => d.NatureOfBusn, m => m.MapFrom(src => src.SelectedNatureOfBusiness))
                .ForMember(d => d.BillMethod, m => m.MapFrom(src => src.SelectedBillingType))
                .ForMember(d => d.InvoicePref, m => m.MapFrom(src => src.SelectedInvoicePref))
                .ForMember(d => d.InvBillInd, m => m.MapFrom(src => NumberExtensions.ConvertBoolDB(src.InvoiceBillingIndicator)))
                .ForMember(d => d.PymtInd, m => m.MapFrom(src => NumberExtensions.ConvertBoolDB(src.PymtInd)))
                .ForMember(d => d.VehPerfRptInd, m => m.MapFrom(src => NumberExtensions.ConvertBoolDB(src.VehiclePerformanceReportInd)))
                .ForMember(d => d.LoyaltyeBusn, m => m.MapFrom(src => NumberExtensions.ConvertBoolDB(src.LoyaltyeBusn)))
                .ForMember(d => d.TaxCategory, m => m.MapFrom(src => src.SelectedTaxCategory))
                .ForMember(d => d.WithHoldingTax, m => m.MapFrom(src => NumberExtensions.ConvertBoolDB(src.WithholdingTaxInd)))
                .ForMember(d => d.LangId, m => m.MapFrom(src => src.SelectedLangId))
                .ForMember(d => d.Website, m => m.MapFrom(src => src.website))
                .ForMember(d => d.ClientClass, m => m.MapFrom(src => src.SelectedClientClass))
                .ForMember(d => d.ClientType, m => m.MapFrom(src => src.SelectedClientType))
                .ForMember(d => d.ReasonCd, m => m.MapFrom(src => src.SelectedReasonCode))
                .ForMember(d => d.AuthName, m => m.MapFrom(src => src.AuthSignatory))
                ;
            this.CreateMap<AcctSignUpDTO, AcctSignUp>()
                .ForMember(d => d.ReasonCd, m => m.Ignore())
                .ForMember(d => d.ClientType, m => m.Ignore())
                .ForMember(d => d.ClientClass, m => m.Ignore())
                .ForMember(d => d.LangId, m => m.Ignore())
                .ForMember(d => d.TaxCategory, m => m.Ignore())
                .ForMember(d => d.InvoicePref, m => m.Ignore())
                .ForMember(d => d.PlasticType, m => m.Ignore())
                .ForMember(d => d.selectedPlasticType, m => m.MapFrom(src => src.PlasticType))
                .ForMember(d => d.SelectedCycleNo, m => m.MapFrom(src => Convert.ToString(src.CycNo)))
                .ForMember(d => d.ApplicationId, m => m.MapFrom(src => src.ApplId))
                .ForMember(d => d.AcctNo, m => m.MapFrom(src => src.AcctNo))
                .ForMember(d => d.SelectedCorporateAcct, m => m.MapFrom(src => src.CorpCd))
                .ForMember(d => d.ApplicationRef, m => m.MapFrom(src => src.Reference))
                .ForMember(d => d.CompanyLegalName, m => m.MapFrom(src => src.CmpyLegalName))
                .ForMember(d => d.CompanyName, m => m.MapFrom(src => src.CmpyName))
                .ForMember(d => d.CompanyEmbName, m => m.MapFrom(src => src.CmpyEmbName))
                .ForMember(d => d.ContactPerson, m => m.MapFrom(src => src.ContactPerson))
                .ForMember(d => d.SelectedBusinessCategory, m => m.MapFrom(src => src.BusnCategory))
                .ForMember(d => d.selectedCompanyType, m => m.MapFrom(src => src.CmpyType))
                .ForMember(d => d.SapNo, m => m.MapFrom(src => src.SAPNo))
                .ForMember(d => d.emailAddress, m => m.MapFrom(src => src.EmailAddr))
                .ForMember(d => d.CompanyRegnNo, m => m.MapFrom(src => src.CmpyRegsNo))
                .ForMember(d => d.CompanyRegnDate, m => m.MapFrom(src => NumberExtensions.DateConverter(src.CmpyRegsDate)))
                .ForMember(d => d.SelectedNatureOfBusiness, m => m.MapFrom(src => src.NatureOfBusn))
                .ForMember(d => d.SelectedBillingType, m => m.MapFrom(src => !string.IsNullOrEmpty(src.BillMethod) ? src.BillMethod : "F"))
                .ForMember(d => d.SelectedInvoicePref, m => m.MapFrom(src => !string.IsNullOrEmpty(src.InvoicePref) ? src.InvoicePref : "0"))
                .ForMember(d => d.InvoiceBillingIndicator, m => m.MapFrom(src => NumberExtensions.BoolConverter(src.InvBillInd)))
                .ForMember(d => d.PymtInd, m => m.MapFrom(src => NumberExtensions.BoolConverter(src.PymtInd)))
                .ForMember(d => d.VehiclePerformanceReportInd, m => m.MapFrom(src => true))
                .ForMember(d => d.LoyaltyeBusn, m => m.MapFrom(src => NumberExtensions.BoolConverter(src.LoyaltyeBusn)))
                .ForMember(d => d.SelectedTaxCategory, m => m.MapFrom(src => src.TaxCategory))
                .ForMember(d => d.WithholdingTaxInd, m => m.MapFrom(src => NumberExtensions.BoolConverter(src.WithHoldingTax)))
                .ForMember(d => d.SelectedLangId, m => m.MapFrom(src => src.LangId))
                .ForMember(d => d.website, m => m.MapFrom(src => src.Website))
                .ForMember(d => d.SelectedClientClass, m => m.MapFrom(src => src.ClientClass))
                .ForMember(d => d.SelectedClientType, m => m.MapFrom(src => src.ClientType))
                .ForMember(d => d.SelectedReasonCode, m => m.MapFrom(src => src.ReasonCd))
                .ForMember(d => d.AuthSignatory, m => m.MapFrom(src => src.AuthName))
                ;

            this.CreateMap<VeloctyLimitListMaintDTO, VeloctyLimitListMaintModel>()
                .ForMember(d => d.VelocityIndDescp, m => m.MapFrom(src => src.VelocityIndicatorDescription))
                .ForMember(d => d.velocityCounter, m => m.MapFrom(src => src.Counter.ToString()))
                .ForMember(d => d.ddlVelocityLimit, m => m.MapFrom(src => decimal.Round(src.VelocityAmount, 2, MidpointRounding.AwayFromZero)))
                .ForMember(d => d.VelocityLitre, m => m.MapFrom(src => decimal.Round(src.VelocityLitre, 2, MidpointRounding.AwayFromZero)))
                .ForMember(d => d.SpentCnt, m => m.MapFrom(src => Convert.ToInt32(src.SpentCounter)))
                .ForMember(d => d.SpentLimit, m => m.MapFrom(src => decimal.Round(src.SpentAmount, 2, MidpointRounding.AwayFromZero)))
                .ForMember(d => d.SpentLitre, m => m.MapFrom(src => decimal.Round(src.SpentLitre, 3, MidpointRounding.AwayFromZero)))
                .ForMember(d => d.LastUpdateDate, m => m.MapFrom(src => src.LastUpdateDate.HasValue ? NumberExtensions.DateTimeConverter(src.LastUpdateDate) : ""))
                .ForMember(d => d.UserId, m => m.MapFrom(src => src.UserId))
                .ForMember(d => d.CreationDate, m => m.MapFrom(src => src.CreationDate.HasValue ? NumberExtensions.DateTimeConverter(src.CreationDate) : ""))
                .ForMember(d => d.SelectedVelocityInd, m => m.MapFrom(src => src.VelocityIndicator))
                .ForMember(d => d.SelectedProdCd, m => m.MapFrom(src => src.ProductCode))
                .ForMember(d => d.CostCentreDescription, m => m.MapFrom(src => src.CostCentreDescription))
                .ForMember(d => d.CostCentre, m => m.MapFrom(src => src.CostCentreCode))
                ;
            this.CreateMap<VeloctyLimitListMaintModel, VeloctyLimitListMaintDTO>()
                .ForMember(d => d.AccNo, m => m.MapFrom(src => src._CardnAccNo.AccNo))
                .ForMember(d => d.CardNo, m => m.MapFrom(src => src._CardnAccNo.CardNo))
                .ForMember(d => d.ApplId, m => m.MapFrom(src => src.ApplId))
                .ForMember(d => d.AppcId, m => m.MapFrom(src => src.AppcId))
                .ForMember(d => d.CostCentre, m => m.MapFrom(src => src.CostCentre))
                .ForMember(d => d.SelectedCorpCd, m => m.MapFrom(src => src.SelectedCorpCd))
                .ForMember(d => d.LastUpdateDate, m => m.MapFrom(src => NumberExtensions.ConvertToDatetimeDB(src.LastUpdateDate)))
                .ForMember(d => d.CreationDate, m => m.MapFrom(src => NumberExtensions.ConvertToDatetimeDB(src.CreationDate)))
                .ForMember(d => d.VelocityIndicator, m => m.MapFrom(src => src.SelectedVelocityInd))
                .ForMember(d => d.VelocityAmount, m => m.MapFrom(src => NumberExtensions.ConvertDecimalToDb(src.ddlVelocityLimit)))
                .ForMember(d => d.Counter, m => m.MapFrom(src => Convert.ToInt32(src.velocityCounter)))
                .ForMember(d => d.VelocityLitre, m => m.MapFrom(src => src.VelocityLitre))
                ;

            this.CreateMap<VehicleDTO, VehiclesListModel>()
                .ForMember(d => d.CardType, m => m.Ignore())
                .ForMember(d => d.VehMaker, m => m.Ignore())
                .ForMember(d => d.VehModel, m => m.Ignore())
                .ForMember(d => d.VehYr, m => m.Ignore())
                .ForMember(d => d.VehType, m => m.Ignore())
                .ForMember(d => d.VehColor, m => m.Ignore())
                .ForMember(d => d.Sts, m => m.Ignore())
                .ForMember(d => d.SelectedCardType, m => m.MapFrom(src => src.CardType))
                .ForMember(d => d.pin, m => m.MapFrom(src => src.PIN))
                .ForMember(d => d.VehRegtNo, m => m.MapFrom(src => src.VRN))
                .ForMember(d => d.SkdsInd, m => m.MapFrom(src => NumberExtensions.BoolConverter(src.SKDSInd)))
                .ForMember(d => d.VehRegDate, m => m.MapFrom(src => src.RegisteredDate.HasValue ? NumberExtensions.DateConverter(src.RegisteredDate) : ""))
                .ForMember(d => d.SelectedVehMaker, m => m.MapFrom(src => src.VehicleMaker))
                .ForMember(d => d.SelectedSts, m => m.MapFrom(src => src.Status))
                .ForMember(d => d.XrefCardNo, m => m.MapFrom(src => src.XrefCardNo.HasValue ? Convert.ToString(src.XrefCardNo):""))
                .ForMember(d => d.OdoMeterReading, m => m.MapFrom(src => src.OdometerReading.HasValue? Convert.ToString(src.OdometerReading):""))
                .ForMember(d => d.OdoMeterUpdate, m => m.MapFrom(src => src.OdometerUpdate.HasValue ? NumberExtensions.DateConverter(src.OdometerUpdate) : ""))
                .ForMember(d => d.PolicyExpDate, m => m.MapFrom(src => src.CardExpiry))
                .ForMember(d => d.RoadTaxExpDate, m => m.MapFrom(src => src.RoadTaxExpiry.HasValue ? NumberExtensions.DateConverter(src.RoadTaxExpiry) : ""))
                .ForMember(d => d.SelectedVehType, m => m.MapFrom(src => src.VehicleType))
                .ForMember(d => d.SelectedVehColor, m => m.MapFrom(src => src.VehicleColor))
                .ForMember(d => d.SelectedVehModel, m => m.MapFrom(src => src.VehicleModel))
                ;
            this.CreateMap<VehiclesListModel,VehicleDTO>()
                .ForMember(d => d.CardType, m => m.Ignore())
                .ForMember(d => d.CardType, m => m.MapFrom(src => src.SelectedCardType))
                .ForMember(d => d.PIN, m => m.MapFrom(src => src.pin))
                .ForMember(d => d.VRN, m => m.MapFrom(src => src.VehRegtNo))
                .ForMember(d => d.RegisteredDate, m => m.MapFrom(src => NumberExtensions.DateConverterDB((src.VehRegDate))))
                .ForMember(d => d.VehicleMaker, m => m.MapFrom(src => src.SelectedVehMaker))
                .ForMember(d => d.Status, m => m.MapFrom(src => src.SelectedSts))
                .ForMember(d => d.XrefCardNo, m => m.MapFrom(src => Convert.ToInt64(src.XrefCardNo)))
                .ForMember(d => d.OdometerReading, m => m.MapFrom(src => Convert.ToInt32(src.OdoMeterReading)))
                .ForMember(d => d.OdometerUpdate, m => m.MapFrom(src => NumberExtensions.DateConverterDB(src.OdoMeterUpdate)))
                .ForMember(d => d.CardExpiry, m => m.MapFrom(src => src.PolicyExpDate))
                .ForMember(d => d.RoadTaxExpiry, m => m.MapFrom(src => NumberExtensions.DateConverterDB(src.RoadTaxExpDate)))
                .ForMember(d => d.VehicleType, m => m.MapFrom(src => src.SelectedVehType))
                .ForMember(d => d.VehicleColor, m => m.MapFrom(src => src.SelectedVehColor))
                .ForMember(d => d.VehicleModel, m => m.MapFrom(src => src.SelectedVehModel))
                .ForMember(d => d.CardTerminated, m => m.MapFrom(src => src.CardTerminated))
                ;

            this.CreateMap<IssContactDTO, ContactLstModel>()
                .ForMember(d => d.RefTo, m => m.Ignore())
                .ForMember(d => d.RefCd, m => m.MapFrom(src => src.RefCd))
                .ForMember(d => d.SelectedContactType, m => m.MapFrom(src => src.ContactType))
                .ForMember(d => d.SelectedSts, m => m.MapFrom(src => src.ContactStatus))
                .ForMember(d => d.RawStatus, m => m.MapFrom(src => src.Status))
                .ForMember(d => d.SelectedOccupation, m => m.MapFrom(src => src.Occupation))
                .ForMember(d => d.RawOccupation, m => m.MapFrom(src => src.Occupation))
                .ForMember(d => d.CreationDate, m => m.MapFrom(src => src.CreationDate.HasValue ? NumberExtensions.DateConverter(src.CreationDate) : ""))
                ;
            this.CreateMap<ContactLstModel,IssContactDTO>()
                .ForMember(d => d.RefTo, m => m.Ignore())
                .ForMember(d => d.ContactType, m => m.MapFrom(src => src.SelectedContactType))
                .ForMember(d => d.ContactStatus, m => m.MapFrom(src => src.SelectedSts))
                .ForMember(d => d.Status, m => m.MapFrom(src => src.RawStatus))
                .ForMember(d => d.Function, m => m.MapFrom(src => src.SelectedOccupation))
                .ForMember(d => d.Occupation, m => m.MapFrom(src => src.RawOccupation))
                .ForMember(d => d.CreationDate, m => m.MapFrom(src =>  NumberExtensions.DateConverterDB(src.CreationDate)))
                ;
            this.CreateMap<WebAddressDTO, AddrListMaintModel>()
                .ForMember(d => d.State, m => m.Ignore())
                .ForMember(d => d.region, m => m.Ignore())
                .ForMember(d => d.Country, m => m.Ignore())
                .ForMember(d => d.SelectedAddrType, m => m.MapFrom(src => src.AddressType))
                .ForMember(d => d.MainMailingInd, m => m.MapFrom(src => NumberExtensions.BoolConverter(src.MainMailing)))
                .ForMember(d => d.SelectedMailInd, m => m.MapFrom(src => src.MainMailing))
                .ForMember(d => d.Address1, m => m.MapFrom(src => src.Street1))
                .ForMember(d => d.Address2, m => m.MapFrom(src => src.Street2))
                .ForMember(d => d.Address3, m => m.MapFrom(src => src.Street3))
                .ForMember(d => d.Address4, m => m.MapFrom(src => src.Street4))
                .ForMember(d => d.Address5, m => m.MapFrom(src => src.Street5))
                .ForMember(d => d.Selectedstate, m => m.MapFrom(src => src.StateCd))
                .ForMember(d => d.PostalCode, m => m.MapFrom(src => src.PostalCd))
                .ForMember(d => d.SelectedCountry, m => m.MapFrom(src => src.Country))
                .ForMember(d => d.selectedregion, m => m.MapFrom(src => src.Region))
                .ForMember(d => d.SelectedRefCd, m => m.MapFrom(src => src.RefCd))
                ;
            this.CreateMap<AddrListMaintModel,WebAddressDTO>()
                .ForMember(d => d.Country, m => m.Ignore())
                .ForMember(d => d.AddressType, m => m.MapFrom(src => src.SelectedAddrType))
                .ForMember(d => d.MainMailing, m => m.MapFrom(src => NumberExtensions.ConvertBoolDB(src.MainMailingInd)))
                .ForMember(d => d.Street1, m => m.MapFrom(src => src.Address1))
                .ForMember(d => d.Street2, m => m.MapFrom(src => src.Address2))
                .ForMember(d => d.Street3, m => m.MapFrom(src => src.Address3))
                .ForMember(d => d.Street4, m => m.MapFrom(src => src.Address4))
                .ForMember(d => d.Street5, m => m.MapFrom(src => src.Address5))
                .ForMember(d => d.StateCd, m => m.MapFrom(src => src.Selectedstate))
                .ForMember(d => d.PostalCd, m => m.MapFrom(src => src.PostalCode))
                .ForMember(d => d.Country, m => m.MapFrom(src => src.SelectedCountry))
                .ForMember(d => d.Region, m => m.MapFrom(src => src.selectedregion))
                .ForMember(d => d.RefCd, m => m.MapFrom(src => src.SelectedRefCd))
                ;

            this.CreateMap<GetAcctSignUpDTO, AcctSignUp>()
                .ForMember(d => d.PlasticType, m => m.Ignore())
                .ForMember(d => d.InvoicePref, m => m.Ignore())
                .ForMember(d => d.TaxCategory, m => m.Ignore())
                .ForMember(d => d.LangId, m => m.Ignore())
                .ForMember(d => d.ClientClass, m => m.Ignore())
                .ForMember(d => d.ClientType, m => m.Ignore())
                .ForMember(d => d.ReasonCd, m => m.Ignore())
                .ForMember(d => d.ApplicationId, m => m.MapFrom(src => src.ApplId))
                .ForMember(d => d.AcctNo, m => m.MapFrom(src => src.AccountNo.HasValue ? Convert.ToString(src.AccountNo) : ""))
                .ForMember(d => d.CompanyName, m => m.MapFrom(src => src.CompanyName))
                .ForMember(d => d.SelectedCorporateAcct, m => m.MapFrom(src => src.CorporateAccount))
                .ForMember(d => d.ApplicationRef, m => m.MapFrom(src => src.ApplRef))
                .ForMember(d => d.CreditLimit, m => m.MapFrom(src => decimal.Round(src.CreditLimit, 2, MidpointRounding.AwayFromZero)))
                .ForMember(d => d.ShownCreditLimit, m => m.MapFrom(src => decimal.Round(src.CreditLimit, 2, MidpointRounding.AwayFromZero)))
                .ForMember(d => d.PendingReasons, m => m.MapFrom(src => src.PendingReason))
                .ForMember(d => d.ApprovedDate, m => m.MapFrom(src => NumberExtensions.DateConverter(src.ApprovedDate)))
                .ForMember(d => d.ReceiveDate, m => m.MapFrom(src => NumberExtensions.DateConverter(src.ReceivedDate)))
                .ForMember(d => d.RejectedDate, m => m.MapFrom(src => NumberExtensions.DateConverter(src.RejectedDate)))
                .ForMember(d => d.SelectedLangId, m => m.MapFrom(src => src.PreferredLanguage))
                .ForMember(d => d.website, m => m.MapFrom(src => src.Website))
                .ForMember(d => d.CreationDatenUserid, m => m.ResolveUsing(model => new CreationDatenUserId() { UserId = model.UserId, CreationDate = CardTrend.Common.Extensions.NumberExtensions.DateConverter(model.CreationDate) }))
                ;
            this.CreateMap<MiscellaneousInfoDTO, MiscellaneousInfoModel>()
                .ForMember(d => d.Designation, m => m.Ignore())
                .ForMember(d => d.SelectedDesignation, m => m.MapFrom(src => src.Designation))
                .ForMember(d => d.AuthDate, m => m.MapFrom(src => NumberExtensions.DateConverter(src.AuthDate)))
                ;
            this.CreateMap<MiscellaneousInfoModel, MiscellaneousInfoDTO>()
                .ForMember(d => d.Designation, m => m.Ignore())
                .ForMember(d => d.Designation, m => m.MapFrom(src => src.SelectedDesignation))
                .ForMember(d => d.AuthDate, m => m.MapFrom(src => NumberExtensions.DateConverterDB(src.AuthDate)))
                ;
            this.CreateMap<SkdsDTO, SKDS>()
                .ForMember(d => d.Sts, m => m.Ignore())
                .ForMember(d => d.SubsidyLevel, m => m.Ignore())
                .ForMember(d => d.SubsidyType, m => m.Ignore())
                .ForMember(d => d.SKDSLitreQuota, m => m.MapFrom(src => src.Quota.HasValue ? NumberExtensions.CustomNumberFormat(String.Format("{0:0.00}", src.Quota)) : null))
                .ForMember(d => d.EffFromDate, m => m.MapFrom(src => NumberExtensions.DateConverter(src.EffFromDate)))
                .ForMember(d => d.EffToDate, m => m.MapFrom(src => NumberExtensions.DateConverter(src.EffToDate)))
                .ForMember(d => d.LastUpdDate, m => m.MapFrom(src => NumberExtensions.DateConverter(src.LastUpdateDate)))
                .ForMember(d => d.LastSubsidyDate, m => m.MapFrom(src => NumberExtensions.DateConverter(src.LastSubsidyDate)))
                .ForMember(d => d.CreationDate, m => m.MapFrom(src => NumberExtensions.DateConverter(src.CreationDate)))
                .ForMember(d => d.QuotaFromDate, m => m.MapFrom(src => NumberExtensions.DateConverter(src.QuotaFromDate)))
                .ForMember(d => d.QuotaToDate, m => m.MapFrom(src => NumberExtensions.DateConverter(src.QuotaToDate)))
                .ForMember(d => d.Refference, m => m.MapFrom(src => src.Reference))
                .ForMember(d => d.SelectedSts, m => m.MapFrom(src => src.Status))
                .ForMember(d => d.SelectedSubsidyLevel, m => m.MapFrom(src =>src.SubsidyLevel))
                ;
            this.CreateMap<SKDS, SkdsDTO>()
                .ForMember(d => d.SubsidyLevel, m => m.Ignore())
                .ForMember(d => d.Quota, m => m.MapFrom(src => NumberExtensions.ConvertDecimalToDb(src.SKDSLitreQuota)))
                .ForMember(d => d.EffFromDate, m => m.MapFrom(src => NumberExtensions.DateConverterDB(src.EffFromDate)))
                .ForMember(d => d.EffToDate, m => m.MapFrom(src => NumberExtensions.DateConverterDB(src.EffToDate)))
                .ForMember(d => d.LastUpdateDate, m => m.MapFrom(src => NumberExtensions.DateConverterDB(src.LastUpdDate)))
                .ForMember(d => d.LastSubsidyDate, m => m.MapFrom(src => NumberExtensions.DateConverterDB(src.LastSubsidyDate)))
                .ForMember(d => d.CreationDate, m => m.MapFrom(src => NumberExtensions.DateConverterDB(src.CreationDate)))
                .ForMember(d => d.QuotaFromDate, m => m.MapFrom(src => NumberExtensions.DateConverterDB(src.QuotaFromDate)))
                .ForMember(d => d.QuotaToDate, m => m.MapFrom(src => NumberExtensions.DateConverterDB(src.QuotaToDate)))
                .ForMember(d => d.Reference, m => m.MapFrom(src => src.Refference))
                .ForMember(d => d.Status, m => m.MapFrom(src => src.SelectedSts))
                .ForMember(d => d.SubsidyLevel, m => m.MapFrom(src => src.SelectedSubsidyLevel))
                ;
        }
    }
}