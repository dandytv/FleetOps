using AutoMapper;
using CardTrend.Common.Extensions;
using CardTrend.Domain.Dto;
using CardTrend.Domain.Dto.Account;
using CardTrend.Domain.Dto.Corporate;
using CCMS.ModelSector;
using ModelSector;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;

namespace FleetSys.Helpers
{
    public class AccountOpMappingProfile : Profile
    {
        protected override void Configure()
        {
            this.CreateMap<CreditAssesOperationDTO, CreditAssesOperation>()
                .ForMember(d => d.DirectDebitInd, m => m.Ignore())
                .ForMember(d => d.BankAcctType, m => m.Ignore())
                .ForMember(d => d.BankName, m => m.Ignore())
                .ForMember(d => d.DepositType, m => m.Ignore())
                .ForMember(d => d.SelectedDirectDebitInd, m => m.MapFrom(src => src.DirectDebitInd))
                .ForMember(d => d.SelectedDepositType, m => m.MapFrom(src => src.DepositType))
                .ForMember(d => d.SelectedBankAcctType, m => m.MapFrom(src => src.BankAcctType != null ? src.BankAcctType : ""))
                .ForMember(d => d.SelectedBankName, m => m.MapFrom(src => src.BankName != null ? src.BankName : ""))
                .ForMember(d => d.BankAcctNo, m => m.MapFrom(src => src.BankAcctNo != null ? src.BankAcctNo : ""))
                .ForMember(d => d.DepositAmt, m => m.MapFrom(src => src.DepositAmt.HasValue ? NumberExtensions.CustomNumberFormat(String.Format("{0:0.00}", src.DepositAmt)) : ""))
                .ForMember(d => d.Txnid, m => m.MapFrom(src => src.TxnId))
                .ForMember(d => d.UserId, m => m.MapFrom(src => src.UserId))
                .ForMember(d => d.Creationdt, m => m.MapFrom(src => src.CreationDate.ToString()))
                .ForMember(d => d.BgSerialNo, m => m.MapFrom(src => src.BGSerialNo != null ? src.BGSerialNo : ""))
                .ForMember(d => d.SecurityAmt, m => m.MapFrom(src => src.SecurityDeposit.HasValue ? NumberExtensions.ConverterDecimal(src.SecurityDeposit.Value.ToString()).ToString() : ""))
                .ForMember(d => d.SAPRefNo, m => m.MapFrom(src => src.SAPRefNo != null ? src.SAPRefNo : ""))
              ;
            this.CreateMap<CreditAssesOperation, CreditAssesOperationDTO>()
                .ForMember(d => d.DirectDebitInd, m => m.Ignore())
                .ForMember(d => d.BankAcctType, m => m.Ignore())
                .ForMember(d => d.BankName, m => m.Ignore())
                .ForMember(d => d.CorpCd, m => m.Ignore())
                .ForMember(d => d.DepositType, m => m.Ignore())
                .ForMember(d => d.DepositFromDate, m => m.Ignore())
                .ForMember(d => d.DepositToDate, m => m.Ignore())
                .ForMember(d => d.EffToDate, m => m.Ignore())
                .ForMember(d => d.EffFromDate, m => m.Ignore())
                .ForMember(d => d.AcctNo, m => m.MapFrom(src => src.acctNo))
                .ForMember(d => d.TxnId, m => m.MapFrom(src => src.Txnid))
                .ForMember(d => d.DepositInd, m => m.MapFrom(src => src.DirectDebitInd == true ? "Y" : "N"))
                .ForMember(d => d.DepositType, m => m.MapFrom(src => src.SelectedDepositType))
                .ForMember(d => d.ValidityDate, m => m.MapFrom(src => DateTime.ParseExact(src.ValidityDate, "dd/MM/yyyy", null)))
                .ForMember(d => d.BankAcctType, m => m.MapFrom(src => src.SelectedBankAcctType))
                .ForMember(d => d.BankName, m => m.MapFrom(src => src.SelectedBankName))
                .ForMember(d => d.DepositAmt, m => m.MapFrom(src => NumberExtensions.ConvertDecimalToDb(src.DepositAmt)))
                .ForMember(d => d.BGSerialNo, m => m.MapFrom(src => src.BankBranchCode))
                .ForMember(d => d.EffFromDate, m => m.MapFrom(src => DateTime.ParseExact(src.DepositFromDate, "dd/MM/yyyy", null)))
                .ForMember(d => d.EffToDate, m => m.MapFrom(src => DateTime.ParseExact(src.DepositToDate, "dd/MM/yyyy", null)))
                .ForMember(d => d.BGSerialNo, m => m.MapFrom(src => src.BankBranchCode))
                .ForMember(d => d.NIRD, m => m.MapFrom(src => DateTime.ParseExact(src.NRID, "dd/MM/yyyy", null)))
                .ForMember(d => d.Remark, m => m.MapFrom(src => src.remarks))
                .ForMember(d => d.SecurityDeposit, m => m.MapFrom(src => NumberExtensions.ConvertDecimalToDb(src.SecurityAmt)))
                ;
            this.CreateMap<GeneralInfoDTO, GeneralInfoModel>()
                .ForMember(d => d.PlasticType, m => m.Ignore())
                .ForMember(d => d.SIC, m => m.Ignore())
                .ForMember(d => d.CustomerGroup, m => m.Ignore())
                .ForMember(d => d.BusnEstablishment, m => m.Ignore())
                .ForMember(d => d.AccountType, m => m.Ignore())
                .ForMember(d => d.LangId, m => m.Ignore())
                .ForMember(d => d.TradingArea, m => m.Ignore())
                .ForMember(d => d.SelectedAccountType, m => m.MapFrom(src => src.AccountType))
                .ForMember(d => d.SelectedPlasticType, m => m.MapFrom(src => src.PlasticType))
                .ForMember(d => d.AccountName, m => m.MapFrom(src => src.AccountName))
                .ForMember(d => d.SelectedCompanyType, m => m.MapFrom(src => src.CmpyType))
                .ForMember(d => d.RegsDate, m => m.MapFrom(src => src.RegsDate.HasValue ? NumberExtensions.DateConverter(src.RegsDate) :""))
                .ForMember(d => d.SelectedSIC, m => m.MapFrom(src => src.SIC))
                .ForMember(d => d.SapNo, m => m.MapFrom(src => src.CustomerNo))
                .ForMember(d => d.CreationDate, m => m.MapFrom(src => NumberExtensions.DateTimeConverter(src.CreationDate)))
                .ForMember(d => d.BlockedDate, m => m.MapFrom(src => NumberExtensions.DateConverter(src.BlockedDate)))
                .ForMember(d => d.SelectedCorpName, m => m.MapFrom(src => src.CorpCd))
                .ForMember(d => d.SelectedClientClass, m => m.MapFrom(src => src.TermsofPayment))
                .ForMember(d => d.selectedClientType, m => m.MapFrom(src => src.CustomerGroup))
                .ForMember(d => d.SelectedBusnEstablishment, m => m.MapFrom(src => src.BusnEstablishment))
                .ForMember(d => d.SourceCode, m => m.MapFrom(src => src.SrcCd))
                .ForMember(d => d.SourceRefNo, m => m.MapFrom(src => src.SrcRefNo))
                .ForMember(d => d.SelectedAcctSts, m => m.MapFrom(src => src.Sts))
                .ForMember(d => d.TerminatedDate, m => m.MapFrom(src => NumberExtensions.DateConverter(src.TerminatedDate)))
                .ForMember(d => d.SelectedReasonCode, m => m.MapFrom(src => src.ReasonCd))
                .ForMember(d => d.OvrStatusTaggedByUserId, m => m.MapFrom(src => src.OverrideStsUserId))
                .ForMember(d => d.SelectedOvrStatus, m => m.MapFrom(src => src.OverrideSts))
                .ForMember(d => d.OvrExpDate, m => m.MapFrom(src => NumberExtensions.DateConverter(src.OverrideStsExpiry)))
                .ForMember(d => d.OvrStartDate, m => m.MapFrom(src => NumberExtensions.DateConverter(src.OverrideStsStart)))
                .ForMember(d => d.ApplId, m => m.MapFrom(src =>src.ApplId.HasValue? Convert.ToString(src.ApplId) : null))
                .ForMember(d => d.CaptDate, m => m.MapFrom(src => src.CreationDate.HasValue ? NumberExtensions.DateTimeConverter(src.CaptDate) : ""))
                .ForMember(d => d.LoyaltyCardNo, m => m.MapFrom(src => src.LoyaltyCardNo.HasValue? Convert.ToString(src.LoyaltyCardNo) : null ))
                .ForMember(d => d.SelectedBusnCategory, m => m.MapFrom(src => src.Industry))
                .ForMember(d => d.SelectedSaleTerritory, m => m.MapFrom(src => src.SalesGroup))
                .ForMember(d => d.SelectedPaymentTerm, m => m.MapFrom(src => src.PymtTerms.HasValue ?  Convert.ToString(src.PymtTerms) : null))
                .ForMember(d => d.ApplCreationDate, m => m.MapFrom(src => NumberExtensions.DateTimeConverter(src.CaptDate)))
                .ForMember(d => d.CutOff, m => m.MapFrom(src => Convert.ToString(src.CutOff)))
                .ForMember(d => d.SelectedCurrentStatus, m => m.MapFrom(src => src.Sts))
                .ForMember(d => d.SelectedLangId, m => m.MapFrom(src => src.LangId))
                .ForMember(d => d.CompanyEmbName, m => m.MapFrom(src => src.CmpyEmbName))
                .ForMember(d => d.ContactPerson, m => m.MapFrom(src => src.FamilyName))
                .ForMember(d => d.AuthSignatory, m => m.MapFrom(src => src.AuthName))
                .ForMember(d => d.SelectedTradingArea, m => m.MapFrom(src => src.TradingArea))
                ;
            this.CreateMap<GeneralInfoModel,GeneralInfoDTO>()
                .ForMember(d => d.PlasticType, m => m.Ignore())
                .ForMember(d => d.SIC, m => m.Ignore())
                .ForMember(d => d.CustomerGroup, m => m.Ignore())
                .ForMember(d => d.BusnEstablishment, m => m.Ignore())
                .ForMember(d => d.AccountType, m => m.Ignore())
                .ForMember(d => d.LangId, m => m.Ignore())
                .ForMember(d => d.TradingArea, m => m.Ignore())
                .ForMember(d => d.CreationDate, m => m.Ignore())
                .ForMember(d => d.SIC, m => m.MapFrom(src => src.SelectedSIC))
                .ForMember(d => d.CustomerNo, m => m.MapFrom(src => src.SapNo))
                .ForMember(d => d.RegsDate, m => m.MapFrom(src => NumberExtensions.DateConverterDB(src.RegsDate)))
                .ForMember(d => d.CreationDate, m => m.MapFrom(src => NumberExtensions.ConvertToDatetimeDB2(src.CreationDate)))
                .ForMember(d => d.BlockedDate, m => m.MapFrom(src => NumberExtensions.DateConverterDB(src.BlockedDate)))
                .ForMember(d => d.CorpCd, m => m.MapFrom(src => src.SelectedCorpName))
                .ForMember(d => d.TermsofPayment, m => m.MapFrom(src => src.SelectedClientClass))
                .ForMember(d => d.CustomerGroup, m => m.MapFrom(src => src.selectedClientType))
                .ForMember(d => d.BusnEstablishment, m => m.MapFrom(src => src.SelectedBusnEstablishment))
                .ForMember(d => d.SrcCd, m => m.MapFrom(src => src.SourceCode))
                .ForMember(d => d.SrcRefNo, m => m.MapFrom(src => src.SourceRefNo))
                .ForMember(d => d.Sts, m => m.MapFrom(src => src.SelectedAcctSts))
                .ForMember(d => d.TerminatedDate, m => m.MapFrom(src => NumberExtensions.DateConverterDB(src.TerminatedDate)))
                .ForMember(d => d.ReasonCd, m => m.MapFrom(src => src.SelectedReasonCode))
                .ForMember(d => d.OverrideStsUserId, m => m.MapFrom(src => src.OvrStatusTaggedByUserId))
                .ForMember(d => d.OverrideSts, m => m.MapFrom(src => src.SelectedOvrStatus))
                .ForMember(d => d.OverrideStsExpiry, m => m.MapFrom(src => NumberExtensions.DateConverterDB(src.OvrExpDate)))
                .ForMember(d => d.ApplId, m => m.MapFrom(src => Convert.ToInt32(src.ApplId)))
                .ForMember(d => d.CaptDate, m => m.MapFrom(src => NumberExtensions.ConvertToDatetimeDB2(src.ApplCreationDate)))
                .ForMember(d => d.LoyaltyCardNo, m => m.MapFrom(src => Convert.ToInt64(src.LoyaltyCardNo)))
                .ForMember(d => d.Industry, m => m.MapFrom(src => src.SelectedBusnCategory))
                .ForMember(d => d.SalesGroup, m => m.MapFrom(src => src.SelectedSaleTerritory))
                .ForMember(d => d.AccountType, m => m.MapFrom(src => src.SelectedAccountType))
                .ForMember(d => d.CutOff, m => m.MapFrom(src => Convert.ToByte(src.CutOff)))
                .ForMember(d => d.PymtTerms, m => m.MapFrom(src => Convert.ToInt32(src.SelectedPaymentTerm)))
                .ForMember(d => d.ReconAcct, m => m.MapFrom(src => src.CustSvcId))
                .ForMember(d => d.OverrideStsStart, m => m.MapFrom(src => NumberExtensions.DateConverterDB(src.OvrStartDate)))
                .ForMember(d => d.LangId, m => m.MapFrom(src => src.SelectedLangId))
                .ForMember(d => d.CmpyEmbName, m => m.MapFrom(src => src.CompanyEmbName))
                .ForMember(d => d.CmpyType, m => m.MapFrom(src => src.SelectedCompanyType))
                .ForMember(d => d.FamilyName, m => m.MapFrom(src => src.ContactPerson))
                .ForMember(d => d.AuthName, m => m.MapFrom(src => src.AuthSignatory))
                .ForMember(d => d.TradingArea, m => m.MapFrom(src => src.SelectedTradingArea))
                .ForMember(d => d.PlasticType, m => m.MapFrom(src => src.SelectedPlasticType))
                ;

            this.CreateMap<FinancialInfoDTO, FinancialInfoModel>()
                .ForMember(d => d.TaxCategory, m => m.Ignore())
                .ForMember(d => d.CycNo, m => m.Ignore())
                .ForMember(d => d.StmtType, m => m.Ignore())
                .ForMember(d => d.StmtInd, m => m.Ignore())
                .ForMember(d => d.PaymtMethod, m => m.Ignore())
                .ForMember(d => d.BankAcctType, m => m.Ignore())
                .ForMember(d => d.BankName, m => m.Ignore())
                .ForMember(d => d.RiskCategory, m => m.Ignore())               
                .ForMember(d => d.AcctNo, m => m.MapFrom(src => src.AcctNo))
                .ForMember(d => d.TaxId, m => m.MapFrom(src => src.TaxId))
                .ForMember(d => d.LatePaymtCharge, m => m.MapFrom(src => NumberExtensions.BoolConverter(src.StopLPC)))
                .ForMember(d => d.SelectedDunningCd, m => m.MapFrom(src => Convert.ToString(src.DunCd)))
                .ForMember(d => d.CredtAllowanceFact, m => m.MapFrom(src => src.AllowanceFactor.HasValue ? NumberExtensions.CustomNumberFormat(String.Format("{0:0.00}", src.AllowanceFactor)) : null))
                .ForMember(d => d.AccrdInterest, m => m.MapFrom(src => src.AccruedInterestAmt.HasValue ? NumberExtensions.CustomNumberFormat(String.Format("{0:0.00}", src.AccruedInterestAmt)) : null))
                .ForMember(d => d.AccrdCrdtUsg, m => m.MapFrom(src => src.AccruedCreditUsageAmt.HasValue ? NumberExtensions.CustomNumberFormat(String.Format("{0:0.00}", src.AccruedCreditUsageAmt)) : null))
                .ForMember(d => d.PromPaymtRebate, m => m.MapFrom(src => src.PromptPaymtRebate.HasValue ? NumberExtensions.CustomNumberFormat(String.Format("{0:0.00}", src.PromptPaymtRebate)) : null))
                .ForMember(d => d.PPRGracePeriod, m => m.MapFrom(src => NumberExtensions.ConvertInt(src.PromptPaymtRebateTerms)))
                .ForMember(d => d.pprExpiry, m => m.MapFrom(src => NumberExtensions.DateConverter(src.PromptPaymtRebateExpiry)))
                .ForMember(d => d.LitreLimitPerTxn, m => m.MapFrom(src => src.LitLimitPerTxn.HasValue ? NumberExtensions.CustomNumberFormat(String.Format("{0:0.00}", src.LitLimitPerTxn)) : null))
                .ForMember(d => d.AmtLimitPerTxn, m => m.MapFrom(src => src.AmtLimitPerTxn.HasValue ? NumberExtensions.CustomNumberFormat(String.Format("{0:0.00}", src.AmtLimitPerTxn)) : null))
                .ForMember(d => d.SelectedCycNo, m => m.MapFrom(src => Convert.ToString(src.CycNo)))
                .ForMember(d => d.SelectedStmtType, m => m.MapFrom(src => src.StmtType))
                .ForMember(d => d.SelectedStmtInd, m => m.MapFrom(src => string.IsNullOrEmpty(src.StmtInd) ? "0" : src.StmtInd))
                .ForMember(d => d.StmtDate, m => m.MapFrom(src => NumberExtensions.DateConverter(src.StmtDate)))
                .ForMember(d => d.SelectedPaymtMethod, m => m.MapFrom(src => src.PaymtMethod))
                .ForMember(d => d.PaymtTerm, m => m.MapFrom(src => src.PymtTerms))
                .ForMember(d => d.GracePeriod, m => m.MapFrom(src => src.GracePeriod.HasValue?Convert.ToInt32(src.GracePeriod) : 0))
                .ForMember(d => d.DirectDebitInd, m => m.MapFrom(src => NumberExtensions.BoolConverter(src.DirectDebitInd)))
                .ForMember(d => d.SelectedBankAcctType, m => m.MapFrom(src => src.BankAcctType))
                .ForMember(d => d.selectedBankName, m => m.MapFrom(src => src.BankName))
                .ForMember(d => d.BankAcctNo, m => m.MapFrom(src => src.BankAcctNo))
                .ForMember(d => d.BankBranchCD, m => m.MapFrom(src => src.BankBranchCd))
                .ForMember(d => d.PayeeCd, m => m.MapFrom(src => src.PayeeCd))
                .ForMember(d => d.SelectedTaxCategory, m => m.MapFrom(src => src.TaxCategory))
                .ForMember(d => d.WriteoffDate, m => m.MapFrom(src => NumberExtensions.DateConverter(src.WriteOffDate)))
                .ForMember(d => d.LastPaymtType, m => m.MapFrom(src => src.LastPaymtRecvType))
                .ForMember(d => d.LastPaymtReceived, m => m.MapFrom(src => src.LastPaymtRecvAmt.HasValue ? NumberExtensions.CustomNumberFormat(String.Format("{0:0.00}", src.LastPaymtRecvAmt)) : null))
                .ForMember(d => d.LastPaymtDate, m => m.MapFrom(src => NumberExtensions.DateConverter(src.LastPaymtDate)))
                .ForMember(d => d.InvoiceBillingIndicator, m => m.MapFrom(src => NumberExtensions.BoolConverter(src.InvBillInd)))
                .ForMember(d => d.PayAdviceBillingIndicator, m => m.MapFrom(src => NumberExtensions.BoolConverter(src.PymtInd)))
                .ForMember(d => d.VehiclePerformanceReportInd, m => m.MapFrom(src => NumberExtensions.BoolConverter(src.VehPerfRptInd)))
                .ForMember(d => d.SelectedAssessmentType, m => m.MapFrom(src => src.SecuredCreditLine))
                .ForMember(d => d.SelectedRiskCategory, m => m.MapFrom(src => src.RiskCategory))
                .ForMember(d => d.CreditLimit, m => m.MapFrom(src => src.CreditLimit.HasValue ? NumberExtensions.CustomNumberFormat(String.Format("{0:0.00}", src.CreditLimit)) : null))
                .ForMember(d => d.WithholdingTaxInd, m => m.MapFrom(src => NumberExtensions.BoolConverter(src.Ewt)))
                .ForMember(d => d.SelectedAssignCollector, m => m.MapFrom(src => src.Owner))
                .ForMember(d => d._skds, m => m.ResolveUsing(model => new SKDS() {
                    SKDSNo = model.SKDSNo,
                    SKDSLitreQuota = model.SKDSQuota.HasValue? NumberExtensions.CustomNumberFormat(String.Format("{0:0.00}",model.SKDSQuota)) : "",
                    EffFromDate = NumberExtensions.DateConverter(model.SKDSFromDate),
                    EffToDate = NumberExtensions.DateConverter(model.SKDSToDate),
                    SKDSRate = model.SKDSRate.HasValue ?  NumberExtensions.CustomNumberFormat(String.Format("{0:0.00}",model.SKDSRate)) : "",
                    SKDSDocXref = model.SKDSRef
                }))
                ;

            this.CreateMap<FinancialInfoModel,FinancialInfoDTO>()
               .ForMember(d => d.TaxCategory, m => m.Ignore())
               .ForMember(d => d.CycNo, m => m.Ignore())
               .ForMember(d => d.StmtType, m => m.Ignore())
               .ForMember(d => d.StmtInd, m => m.Ignore())
               .ForMember(d => d.PaymtMethod, m => m.Ignore())
               .ForMember(d => d.BankAcctType, m => m.Ignore())
               .ForMember(d => d.BankName, m => m.Ignore())
               .ForMember(d => d.RiskCategory, m => m.Ignore())
               .ForMember(d => d.AcctNo, m => m.MapFrom(src => src.AcctNo))
               .ForMember(d => d.TaxId, m => m.MapFrom(src => src.TaxId))
               .ForMember(d => d.StopLPC, m => m.MapFrom(src => NumberExtensions.ConvertBoolDB(src.LatePaymtCharge)))
               .ForMember(d => d.DunCd, m => m.MapFrom(src => Convert.ToByte(src.SelectedDunningCd)))
               .ForMember(d => d.AllowanceFactor, m => m.MapFrom(src => NumberExtensions.ConvertDecimalToDb(src.CredtAllowanceFact)))
               .ForMember(d => d.AccruedInterestAmt, m => m.MapFrom(src => NumberExtensions.ConvertDecimalToDb(src.AccrdInterest)))
               .ForMember(d => d.AccruedCreditUsageAmt, m => m.MapFrom(src => NumberExtensions.ConvertDecimalToDb(src.AccrdCrdtUsg)))
               .ForMember(d => d.PromptPaymtRebate, m => m.MapFrom(src => NumberExtensions.ConvertDecimalToDb(src.PromPaymtRebate)))
               .ForMember(d => d.PromptPaymtRebateTerms, m => m.MapFrom(src => Convert.ToByte(src.PPRGracePeriod)))
               .ForMember(d => d.LitLimitPerTxn, m => m.MapFrom(src => NumberExtensions.ConvertDecimalToDb(src.LitreLimitPerTxn)))
               .ForMember(d => d.AmtLimitPerTxn, m => m.MapFrom(src => NumberExtensions.ConvertDecimalToDb(src.AmtLimitPerTxn)))
               .ForMember(d => d.PromptPaymtRebateExpiry, m => m.MapFrom(src => src.pprExpiry))
               .ForMember(d => d.CycNo, m => m.MapFrom(src => Convert.ToByte(src.SelectedCycNo)))
               .ForMember(d => d.StmtType, m => m.MapFrom(src => src.SelectedStmtType))
               .ForMember(d => d.StmtInd, m => m.MapFrom(src => src.SelectedStmtInd))
               .ForMember(d => d.StmtDate, m => m.MapFrom(src => NumberExtensions.DateConverterDB(src.StmtDate)))
               .ForMember(d => d.PaymtMethod, m => m.MapFrom(src => src.SelectedPaymtMethod))
               .ForMember(d => d.PymtTerms, m => m.MapFrom(src => src.PaymtTerm))
               .ForMember(d => d.GracePeriod, m => m.MapFrom(src => Convert.ToByte(src.GracePeriod)))
               .ForMember(d => d.DirectDebitInd, m => m.MapFrom(src => NumberExtensions.ConvertBoolDB(src.DirectDebitInd)))
               .ForMember(d => d.BankAcctType, m => m.MapFrom(src => src.SelectedBankAcctType))
               .ForMember(d => d.BankName, m => m.MapFrom(src => src.selectedBankName))
               .ForMember(d => d.BankBranchCd, m => m.MapFrom(src => src.BankBranchCD))
               .ForMember(d => d.TaxCategory, m => m.MapFrom(src => src.SelectedTaxCategory))
               .ForMember(d => d.PayeeCd, m => m.MapFrom(src => src.PayeeCd))
               .ForMember(d => d.WriteOffDate, m => m.MapFrom(src => NumberExtensions.DateConverterDB(src.WriteoffDate)))
               .ForMember(d => d.LastPaymtRecvType, m => m.MapFrom(src => src.LastPaymtType))
               .ForMember(d => d.LastPaymtRecvAmt, m => m.MapFrom(src => NumberExtensions.ConvertDecimalToDb(src.LastPaymtReceived)))
               .ForMember(d => d.LastPaymtDate, m => m.MapFrom(src => NumberExtensions.DateConverterDB(src.LastPaymtDate)))
               .ForMember(d => d.InvBillInd, m => m.MapFrom(src => NumberExtensions.ConvertBoolDB(src.InvoiceBillingIndicator)))
               .ForMember(d => d.PymtInd, m => m.MapFrom(src => NumberExtensions.ConvertBoolDB(src.PayAdviceBillingIndicator)))
               .ForMember(d => d.VehPerfRptInd, m => m.MapFrom(src => NumberExtensions.ConvertBoolDB(src.VehiclePerformanceReportInd)))
               .ForMember(d => d.SecuredCreditLine, m => m.MapFrom(src => src.SelectedAssessmentType))
               .ForMember(d => d.RiskCategory, m => m.MapFrom(src => src.SelectedRiskCategory))
               .ForMember(d => d.CreditLimit, m => m.MapFrom(src => NumberExtensions.ConvertDecimalToDb(src.CreditLimit)))
               .ForMember(d => d.Ewt, m => m.MapFrom(src => NumberExtensions.ConvertBoolDB(src.WithholdingTaxInd)))
               ;

            this.CreateMap<CostCentreDTO, CostCentre>()
             .ForMember(d => d.SelectedCostCentre, m => m.MapFrom(src => src.CostCentre))
             ;
            this.CreateMap<CostCentre,CostCentreDTO>()
            .ForMember(d => d.CostCentre, m => m.MapFrom(src => src.SelectedCostCentre))
            ;

            this.CreateMap<CreditLimitHistoryDTO, CreditLimitHistory>()
             .ForMember(d => d.CreationDate, m => m.MapFrom(src => NumberExtensions.DateTimeConverter(src.CreationDate)))
             .ForMember(d => d.AcctNo, m => m.MapFrom(src => src.AccountNo))
             .ForMember(d => d.From, m => m.MapFrom(src => !string.IsNullOrEmpty(src.From) ? NumberExtensions.CustomNumberFormat(String.Format("{0:0.00}", src.From)) : ""))
             .ForMember(d => d.To, m => m.MapFrom(src => !string.IsNullOrEmpty(src.To) ? NumberExtensions.CustomNumberFormat(String.Format("{0:0.00}", src.To)) : ""))
             .ForMember(d => d.DepositType, m => m.MapFrom(src => src.DepositType))
             .ForMember(d => d.UserId, m => m.MapFrom(src => src.UserId))
           ;
            this.CreateMap<EventLoggerDTO, EventLogger>()
            .ForMember(d => d.EventType, m => m.Ignore())
            .ForMember(d => d.ReasonCd, m => m.Ignore())
            .ForMember(d => d.SelectedEventType, m => m.MapFrom(src => src.EventType))
            .ForMember(d => d.RefKey, m => m.MapFrom(src => src.ReferenceKey))
            .ForMember(d => d.SelectedReasonCode, m => m.MapFrom(src => src.ReasonCd))
            .ForMember(d => d.ReminderDatetime, m => m.MapFrom(src => NumberExtensions.DateConverter(src.Reminder)))
            .ForMember(d => d.refDoc, m => m.MapFrom(src => src.RefDocument))
            .ForMember(d => d.ClosedDate, m => m.MapFrom(src => NumberExtensions.DateConverter(src.ClosedDate)))
            .ForMember(d => d.acctNo, m => m.MapFrom(src => src.AcctNo))
            .ForMember(d => d.sysInd, m => m.MapFrom(src => src.SysInd))
            .ForMember(d => d.Description, m => m.MapFrom(src => src.Descp))
            .ForMember(d => d.SelectedEventSts, m => m.MapFrom(src => src.Status))
            .ForMember(d => d.CreationDate, m => m.MapFrom(src => NumberExtensions.DateConverter(src.CreationDate)))
          ;
            this.CreateMap<EventLogger, EventLoggerDTO>()
           .ForMember(d => d.EventType, m => m.Ignore())
           .ForMember(d => d.ReasonCd, m => m.Ignore())
           .ForMember(d => d.EventType, m => m.MapFrom(src => src.SelectedEventType))
           .ForMember(d => d.EventId, m => m.MapFrom(src => src.EventId))
           .ForMember(d => d.ReferenceKey, m => m.MapFrom(src => src.RefKey))
           .ForMember(d => d.ReasonCd, m => m.MapFrom(src => src.SelectedReasonCode))
           .ForMember(d => d.Reminder, m => m.MapFrom(src => NumberExtensions.ConvertDatetimeDB(src.ReminderDatetime)))
           .ForMember(d => d.RefDocument, m => m.MapFrom(src => src.refDoc))
           .ForMember(d => d.ClosedDate, m => m.MapFrom(src => NumberExtensions.DateConverterDB(src.ClosedDate)))
           .ForMember(d => d.AcctNo, m => m.MapFrom(src => src.acctNo))
           .ForMember(d => d.SysInd, m => m.MapFrom(src => src.sysInd))
           .ForMember(d => d.UserId, m => m.MapFrom(src => src.UserId))
           .ForMember(d => d.RefDocument, m => m.MapFrom(src => src.refDoc))
           .ForMember(d => d.Descp, m => m.MapFrom(src => src.Description))
           .ForMember(d => d.Status, m => m.MapFrom(src => src.SelectedEventSts))
           .ForMember(d => d.CreationDate, m => m.MapFrom(src => NumberExtensions.DateConverter(src.CreationDate)))
         ;
           this.CreateMap<TempCreditCtrlDTO, TempCreditCtrlModel>()
             .ForMember(d => d.AllowCreditLimit, m => m.MapFrom(src => src.CreditLimit.HasValue ? NumberExtensions.CustomNumberFormat(String.Format("{0:0.00}", src.CreditLimit)) : null))
             .ForMember(d => d.ExpDateFrom, m => m.MapFrom(src => NumberExtensions.DateConverter(src.EffDateFrom)))
             .ForMember(d => d.ExpDateTo, m => m.MapFrom(src => NumberExtensions.DateConverter(src.EffDateTo)))
             ;

           this.CreateMap<UpToDateBalDTO, UpToDateBal>()
           .ForMember(d => d.AcctType, m => m.MapFrom(src => CustomMapperExtensions.MapIEnumerableToList(src.AcctType)))
           .ForMember(d => d.SelectedAccountType, m => m.MapFrom(src => src.AccountType))
           .ForMember(d => d.CreditLimit, m => m.MapFrom(src => src.CreditLimit.HasValue ? NumberExtensions.CustomNumberFormat(String.Format("{0:0.00}", src.CreditLimit)) : null))
           .ForMember(d => d.OpeningBal, m => m.MapFrom(src => src.OpeningBalance.HasValue ? NumberExtensions.CustomNumberFormat(String.Format("{0:0.00}", src.OpeningBalance)) : null))
           .ForMember(d => d.InstantAmt, m => m.MapFrom(src => src.InstantAmt.HasValue ? NumberExtensions.CustomNumberFormat(String.Format("{0:0.00}", src.InstantAmt)) : null))
           .ForMember(d => d.ClosingBal, m => m.MapFrom(src => src.ClosingBalance.HasValue ? NumberExtensions.CustomNumberFormat(String.Format("{0:0.00}", src.ClosingBalance)) : null))
           .ForMember(d => d.TempCreditLimit, m => m.MapFrom(src => src.TempCreditLimit.HasValue ? NumberExtensions.CustomNumberFormat(String.Format("{0:0.00}", src.TempCreditLimit)) : null))
           .ForMember(d => d.TotalCreditLimit, m => m.MapFrom(src => src.TotalCreditLimit.HasValue ? NumberExtensions.CustomNumberFormat(String.Format("{0:0.00}", src.TotalCreditLimit)) : null))
           .ForMember(d => d.OnlineAmt, m => m.MapFrom(src => src.OnlineAmt.HasValue ? NumberExtensions.CustomNumberFormat(String.Format("{0:0.00}", src.OnlineAmt)) : null))
           .ForMember(d => d.AvailableCredLimit, m => m.MapFrom(src => src.AvailableCredit.HasValue ? NumberExtensions.CustomNumberFormat(String.Format("{0:0.00}", src.AvailableCredit)) : null))
           .ForMember(d => d.QuotaLimit, m => m.MapFrom(src => src.QuotaLimit.HasValue ? NumberExtensions.CustomNumberFormat(String.Format("{0:0.00}", src.QuotaLimit)) : null))
           .ForMember(d => d.QuotaUsage, m => m.MapFrom(src => src.QuotaUsage.HasValue ? NumberExtensions.CustomNumberFormat(String.Format("{0:0.00}", src.QuotaUsage)) : null))
           .ForMember(d => d.OfflineAmt, m => m.MapFrom(src => src.OfflineAmt.HasValue ? NumberExtensions.CustomNumberFormat(String.Format("{0:0.00}", src.OfflineAmt)) : null))
           .ForMember(d => d.BatchAmt, m => m.MapFrom(src => src.BatchAmt.HasValue ? NumberExtensions.CustomNumberFormat(String.Format("{0:0.00}", src.BatchAmt)) : null))
         ;
           this.CreateMap<FinancilInfoItemDTO, FinancilInfoItemsList>()
            .ForMember(d => d.TxnCd, m => m.MapFrom(src => src.TxnCd.HasValue ? Convert.ToString(src.TxnCd) : ""))
            .ForMember(d => d.TxnAmt, m => m.MapFrom(src => src.TxnAmt.HasValue ? NumberExtensions.CustomNumberFormat(String.Format("{0:0.00}", src.TxnAmt)) : null))
            ;
           this.CreateMap<ProductDiscountDTO, ProductDiscount>()
          .ForMember(d => d.ProdDiscType, m => m.Ignore())
          .ForMember(d => d.PlanId, m => m.Ignore())
          .ForMember(d => d.Id, m => m.MapFrom(src => Convert.ToString(src.Id)))
          .ForMember(d => d.SelectedProdCd, m => m.MapFrom(src => src.ProdGroup))
          .ForMember(d => d.SelectedProdDiscType, m => m.MapFrom(src => src.ProdDiscType))
          .ForMember(d => d.ProdDiscDescp, m => m.MapFrom(src => src.ProdDiscDescp))
          .ForMember(d => d.SelectedPlanId, m => m.MapFrom(src => Convert.ToString(src.PlanId)))
          .ForMember(d => d.EffDateFrom, m => m.MapFrom(src => NumberExtensions.DateConverter(src.EffDate)))
          .ForMember(d => d.CreatedBy, m => m.MapFrom(src => src.UserId))
          .ForMember(d => d.CreationDate, m => m.MapFrom(src => NumberExtensions.DateConverter(src.CreationDate)))
          .ForMember(d => d.ProdCdDescp, m => m.MapFrom(src => src.ProductDescp))
          .ForMember(d => d.EffDateTo, m => m.MapFrom(src => NumberExtensions.DateConverter(src.EffEndDate)))
           ;
           this.CreateMap<ProductDiscount, ProductDiscountDTO>()
           .ForMember(d => d.ProdDiscType, m => m.Ignore())
           .ForMember(d => d.PlanId, m => m.Ignore())
           .ForMember(d => d.Id, m => m.MapFrom(src => Convert.ToInt64(src.Id)))
           .ForMember(d => d.ProdGroup, m => m.MapFrom(src => src.SelectedProdCd))
           .ForMember(d => d.PlanId, m => m.MapFrom(src => Convert.ToInt32(src.SelectedPlanId)))
           .ForMember(d => d.ProdDiscType, m => m.MapFrom(src => src.SelectedProdDiscType))
           .ForMember(d => d.EffDate, m => m.MapFrom(src => NumberExtensions.ConvertDatetimeDB(src.EffDateFrom)))
           .ForMember(d => d.UserId, m => m.MapFrom(src => src.CreatedBy))
           .ForMember(d => d.CreationDate, m => m.MapFrom(src => NumberExtensions.ConvertDatetimeDB(src.CreationDate)))
           .ForMember(d => d.ProductDescp, m => m.MapFrom(src => src.ProdCdDescp))
           .ForMember(d => d.EffEndDate, m => m.MapFrom(src => NumberExtensions.ConvertDatetimeDB(src.EffDateTo)))
           .ForMember(d => d.OnlineInd, m => m.MapFrom(src => NumberExtensions.ConvertBoolDB(src.OnlineIndicator)))
            ;
           this.CreateMap<AcctBalanceSelectAmountDTO, OnlineTransaction>()
           .ForMember(d => d.TxnAmt, m => m.MapFrom(src => src.TxnAmt.HasValue ? NumberExtensions.CustomNumberFormat(String.Format("{0:0.00}", src.TxnAmt)) : null))
           .ForMember(d => d.BillingAmt, m => m.MapFrom(src => src.BillingAmt.HasValue ? NumberExtensions.CustomNumberFormat(String.Format("{0:0.00}", src.BillingAmt)) : null))
           .ForMember(d => d.CreationDate, m => m.MapFrom(src => NumberExtensions.DateTimeConverter(src.CreationDate)))
           .ForMember(d => d.TxnDate, m => m.MapFrom(src => NumberExtensions.DateTimeConverter(src.TxnDate)))
           .ForMember(d => d.DueDate, m => m.MapFrom(src => NumberExtensions.DateTimeConverter(src.DueDate)))
           .ForMember(d => d.TxnId, m => m.MapFrom(src => Convert.ToString(src.TxnId)))
           .ForMember(d => d.Ids, m => m.MapFrom(src => Convert.ToString(src.Ids)))
           .ForMember(d => d.CardNo, m => m.MapFrom(src => Convert.ToString(src.CardNo)))
           ;
           this.CreateMap<PaymentTxnDTO, PaymentTxn>()
           .ForMember(d => d.PyTxnCd, m => m.Ignore())
           .ForMember(d => d.TxnType, m => m.Ignore())
           .ForMember(d => d.Affiliate, m => m.Ignore())
           .ForMember(d => d.Sts, m => m.Ignore())
           .ForMember(d => d.AppvCd, m => m.Ignore())
           .ForMember(d => d.SelectedTxnType, m => m.MapFrom(src => src.TxnType))
           .ForMember(d => d.AcctNo, m => m.MapFrom(src => src.AccountNo))
           .ForMember(d => d.CheqNo, m => m.MapFrom(src => src.ChequeNo))
           .ForMember(d => d.selectedOwner, m => m.MapFrom(src => src.Owner))
           .ForMember(d => d.TxnDate, m => m.MapFrom(src => NumberExtensions.DateConverter(src.TxnDate)))
           .ForMember(d => d.TotAmnt, m => m.MapFrom(src => src.TxnAmount.HasValue ? NumberExtensions.CustomNumberFormat(String.Format("{0:0.00}", src.TxnAmount)) : null))
           .ForMember(d => d.displayTotAmnt, m => m.MapFrom(src => src.TxnAmount.HasValue ? NumberExtensions.CustomNumberFormat(String.Format("{0:0.00}", src.TxnAmount)) : null))
           .ForMember(d => d.BillingTxnAmt, m => m.MapFrom(src => src.BillingAmount.HasValue ? NumberExtensions.CustomNumberFormat(String.Format("{0:0.00}", src.BillingAmount)) : null))
           .ForMember(d => d.Descp, m => m.MapFrom(src => src.TxnDescription))
           .ForMember(d => d.StsDescp, m => m.MapFrom(src => src.Status))
           .ForMember(d => d.DueDt, m => m.MapFrom(src => NumberExtensions.DateConverter(src.DueDate)))
           .ForMember(d => d.BookingDt, m => m.MapFrom(src => NumberExtensions.DateConverter(src.BookingDate)))
           .ForMember(d => d.Totpts, m => m.MapFrom(src => src.Pts.HasValue ? NumberExtensions.CustomNumberFormat(String.Format("{0:0.00}", src.Pts)) : null))
           .ForMember(d => d.SelectedSts, m => m.MapFrom(src => src.Sts))
           .ForMember(d => d.SelectedTxnCd, m => m.MapFrom(src => Convert.ToString(src.TxnCd)))
           .ForMember(d => d.SelectedAppvCd, m => m.MapFrom(src => src.AppvCd))
           .ForMember(d => d.PyTxnId, m => m.MapFrom(src => src.TxnId))
           .ForMember(d => d.WithHeldUnsettleId, m => m.MapFrom(src => src.WUId.HasValue? src.WUId : 0))
           .ForMember(d => d.CreationDate, m => m.MapFrom(src => NumberExtensions.DateConverter(src.CreationDate)))
           .ForMember(d => d.AppRemarks, m => m.MapFrom(src => src.AppvRemarks))
            ;
           this.CreateMap<BillingItemDTO, BillingItem>()
            .ForMember(d => d.TxnCategory, m => m.Ignore())
            .ForMember(d => d.Sts, m => m.Ignore())
            .ForMember(d => d.Level, m => m.MapFrom(src => src.Level))
            .ForMember(d => d.TxnId, m => m.MapFrom(src => src.TxnId))
            .ForMember(d => d.ClosedDate, m => m.MapFrom(src => src.CloseAt))
            .ForMember(d => d.Descp, m => m.MapFrom(src => src.Descp))
            .ForMember(d => d.TxnDate, m => m.MapFrom(src => NumberExtensions.DateConverter(src.TxnDate)))
            .ForMember(d => d.DisplayBillingTxnAmt, m => m.MapFrom(src => src.BillingAmt.HasValue ? NumberExtensions.CustomNumberFormat(String.Format("{0:0.00}", src.BillingAmt)) : null))
            .ForMember(d => d.SettledAmt, m => m.MapFrom(src => src.SettledAmt.HasValue ? NumberExtensions.CustomNumberFormat(String.Format("{0:0.00}", src.SettledAmt)) : null))
            .ForMember(d => d.DisplaySettledAmt, m => m.MapFrom(src => src.SettledAmt.HasValue ? NumberExtensions.CustomNumberFormat(String.Format("{0:0.00}", src.SettledAmt)) : null))
            .ForMember(d => d.SettledDate, m => m.MapFrom(src => src.SettledDate))
            .ForMember(d => d.TxnCd, m => m.MapFrom(src => src.TxnCd))
            .ForMember(d => d.RefId, m => m.MapFrom(src => src.RefId))
            .ForMember(d => d.SelectedSts, m => m.MapFrom(src => src.Sts))
            .ForMember(d => d.TarBalance, m => m.MapFrom(src => src.TARBalance.HasValue ? NumberExtensions.CustomNumberFormat(String.Format("{0:0.00}", src.TARBalance)) : null))
            .ForMember(d => d.TotalTxnAmount, m => m.MapFrom(src => src.TotalBillingTxnAmt.HasValue ? NumberExtensions.CustomNumberFormat(String.Format("{0:0.00}", src.TotalBillingTxnAmt)) : null))
            .ForMember(d => d.TotalSettledAmt, m => m.MapFrom(src => src.TotalSettledAmt.HasValue ? NumberExtensions.CustomNumberFormat(String.Format("{0:0.00}", src.TotalSettledAmt)) : null))
            .ForMember(d => d._CreationDatenUserId, m => m.ResolveUsing(model => new CreationDatenUserId() { UserId = model.UserId, CreationDate = CardTrend.Common.Extensions.NumberExtensions.DateConverter(model.CreationDate) }))
            ;
             
        }
    }
}