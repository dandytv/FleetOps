using AutoMapper;
using CardTrend.Common.Extensions;
using CardTrend.Domain.Dto;
using CardTrend.Domain.Dto.CardHolder;
using ModelSector;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;

namespace FleetSys.Helpers
{
    public class CardHolderMappingProfile : Profile
    {
        protected override void Configure()
        {
            this.CreateMap<CardHolderInfoDTO, CardHolderInfoModel>()
                .ForMember(d => d.CardType, m => m.Ignore())
                .ForMember(d => d.ReasonCd, m => m.Ignore())
                .ForMember(d => d.PINInd, m => m.Ignore())
                .ForMember(d => d.DialogueInd, m => m.Ignore())
                .ForMember(d => d.RenewalInd, m => m.Ignore())
                .ForMember(d => d.SKDSNo, m => m.Ignore())
                .ForMember(d => d.CostCentre, m => m.Ignore())
                .ForMember(d => d.BranchCd, m => m.Ignore())
                .ForMember(d => d.DeptCd, m => m.Ignore())
                .ForMember(d => d.CardMedia, m => m.Ignore())
                .ForMember(d => d.FullName, m => m.MapFrom(src => src.DriverName))
                .ForMember(d => d.SelectedCostCentre, m => m.MapFrom(src => src.CostCentre))
                .ForMember(d => d.AcctNo, m => m.MapFrom(src => Convert.ToString(src.AcctNo)))
                .ForMember(d => d.EmbossName, m => m.MapFrom(src => src.EmbName))
                .ForMember(d => d.SelectedCardType, m => m.MapFrom(src => src.CardType))
                .ForMember(d => d.SelectedCurrentStatus, m => m.MapFrom(src => src.Sts))
                .ForMember(d => d.SelectedReasonCode, m => m.MapFrom(src => src.ReasonCd))
                .ForMember(d => d.CreationDate, m => m.MapFrom(src => src.CreationDate.HasValue ? NumberExtensions.DateConverter(src.CreationDate) : null))
                .ForMember(d => d.MemberSince, m => m.MapFrom(src => src.MemSince))
                .ForMember(d => d.SelectedSKDSNo, m => m.MapFrom(src => src.SKDSNo))
                .ForMember(d => d.oldCardNo, m => m.MapFrom(src => Convert.ToString(src.XPreCardNo.HasValue)))
                .ForMember(d => d.XRefCardNo, m => m.MapFrom(src => Convert.ToString(src.XRefCardNo)))
                .ForMember(d => d.SelectedCardType, m => m.MapFrom(src => src.CardType))
                .ForMember(d => d.SelectedVehicleModel, m => m.MapFrom(src => src.Model))
                .ForMember(d => d.SelectedPINInd, m => m.MapFrom(src => src.PINInd))
                .ForMember(d => d.vehRegNo, m => m.MapFrom(src => src.VehRegsNo))
                .ForMember(d => d.SelectedSKDSInd, m => m.MapFrom(src => NumberExtensions.BoolConverter(src.SKDSInd)))
                .ForMember(d => d.SKDSQuota, m => m.MapFrom(src => NumberExtensions.CustomNumberFormat(String.Format("{0:0.00}", src.SKDSQuota))))
                .ForMember(d => d.DriverName, m => m.MapFrom(src => src.DriverName))
                .ForMember(d => d.BlockedDate, m => m.MapFrom(src => src.BlockedDate.HasValue ? NumberExtensions.DateConverter(src.BlockedDate) : null))
                .ForMember(d => d.TerminatedDate, m => m.MapFrom(src => src.TerminatedDate.HasValue ? NumberExtensions.DateConverter(src.TerminatedDate) : null))
                .ForMember(d => d.PVV, m => m.MapFrom(src => src.PVV))
                .ForMember(d => d.SelectedDialogueInd, m => m.MapFrom(src => src.DialogueInd))
                .ForMember(d => d.SelectedRenewalInd, m => m.MapFrom(src => src.RenewalInd))
                .ForMember(d => d.SelectedPushAlertInd, m => m.MapFrom(src => NumberExtensions.BoolConverter(src.PushAlertInd)))
                .ForMember(d => d.LocInd, m => m.MapFrom(src => NumberExtensions.BoolConverter(src.LocationInd)))
                .ForMember(d => d.SelectedLocCheckFlag, m => m.MapFrom(src => NumberExtensions.BoolConverter(src.LocationCheckFlag)))
                .ForMember(d => d.MaxCountLimit, m => m.MapFrom(src => src.LocationMaxCnt))
                .ForMember(d => d.AmtLimit, m => m.MapFrom(src => NumberExtensions.CustomNumberFormat(String.Format("{0:0.00}", src.LocationMaxAmt))))
                .ForMember(d => d.SelectedFuelCheckFlag, m => m.MapFrom(src => NumberExtensions.BoolConverter(src.FuelCheckFlag)))
                .ForMember(d => d.FuelLitre, m => m.MapFrom(src => NumberExtensions.CustomNumberFormat(String.Format("{0:0.00}", src.FuelLitPerKM))))
                .ForMember(d => d.PINExceedCnt, m => m.MapFrom(src => src.PINExceedCnt.HasValue ? NumberExtensions.ConvertInt(src.PINExceedCnt) : 0))
                .ForMember(d => d.SelectedAnnualFee, m => m.MapFrom(src => src.AnnlFeeCd))
                .ForMember(d => d.SelectedJonFee, m => m.MapFrom(src => src.JoiningFeeCd))
                .ForMember(d => d.SelectedProductUtilization, m => m.MapFrom(src => src.ProdGroup))
                .ForMember(d => d.OdometerIndicator, m => m.MapFrom(src => NumberExtensions.BoolConverter(src.OdometerInd)))
                .ForMember(d => d.PrimaryCard, m => m.MapFrom(src => NumberExtensions.BoolConverter(src.PrimaryCard)))
                .ForMember(d => d.SelectedBranchCd, m => m.MapFrom(src => src.BranchCd))
                .ForMember(d => d.SelectedDivisionCode, m => m.MapFrom(src => src.DivisionCd))
                .ForMember(d => d.SelectedDeptCd, m => m.MapFrom(src => src.DeptCd))
                .ForMember(d => d.SelectedCardMedia, m => m.MapFrom(src => src.CardMedia))
                ;

                this.CreateMap<CardHolderInfoModel, CardHolderInfoDTO>()
                    .ForMember(d => d.CardType, m => m.Ignore())
                    .ForMember(d => d.ReasonCd, m => m.Ignore())
                    .ForMember(d => d.PINInd, m => m.Ignore())
                    .ForMember(d => d.DialogueInd, m => m.Ignore())
                    .ForMember(d => d.RenewalInd, m => m.Ignore())
                    .ForMember(d => d.SKDSNo, m => m.Ignore())
                    .ForMember(d => d.BranchCd, m => m.Ignore())
                    .ForMember(d => d.DeptCd, m => m.Ignore())
                    .ForMember(d => d.CardMedia, m => m.Ignore())
                    .ForMember(d => d.EmbName, m => m.MapFrom(src => src.EmbossName))
                    .ForMember(d => d.AcctNo, m => m.MapFrom(src => Convert.ToInt64(src.AcctNo)))
                    .ForMember(d => d.Sts, m => m.MapFrom(src => src.SelectedCurrentStatus))
                    .ForMember(d => d.TerminatedDate, m => m.MapFrom(src => !string.IsNullOrEmpty(src.TerminatedDate) ? NumberExtensions.ConvertDatetimeDB(src.TerminatedDate) : DateTime.MinValue))
                    .ForMember(d => d.VehRegsNo, m => m.MapFrom(src => src.vehRegNo))
                    .ForMember(d => d.SKDSInd, m => m.MapFrom(src => NumberExtensions.ConvertBoolDB(src.SelectedSKDSInd)))
                    .ForMember(d => d.SKDSQuota, m => m.MapFrom(src => NumberExtensions.ConvertDecimalToDb(src.SKDSQuota)))
                    .ForMember(d => d.SKDSNo, m => m.MapFrom(src => src.SelectedSKDSNo))
                    .ForMember(d => d.CreationDate, m => m.MapFrom(src => NumberExtensions.ConvertDatetimeDB(src.CreationDate)))
                    .ForMember(d => d.DialogueInd, m => m.MapFrom(src => src.SelectedDialogueInd))
                    .ForMember(d => d.PINInd, m => m.MapFrom(src => src.SelectedPINInd))
                    .ForMember(d => d.OdometerInd, m => m.MapFrom(src => NumberExtensions.ConvertBoolDB(src.OdometerIndicator)))
                    .ForMember(d => d.PushAlertInd, m => m.MapFrom(src => NumberExtensions.ConvertBoolDB(src.SelectedPushAlertInd)))
                    .ForMember(d => d.AnnlFeeCd, m => m.MapFrom(src => src.SelectedAnnualFee))
                    .ForMember(d => d.JoiningFeeCd, m => m.MapFrom(src => src.SelectedJonFee))
                    .ForMember(d => d.RenewalInd, m => m.MapFrom(src => src.SelectedRenewalInd))
                    .ForMember(d => d.PrimaryCard, m => m.MapFrom(src => NumberExtensions.ConvertBoolDB(src.PrimaryCard)))
                    .ForMember(d => d.ProdGroup, m => m.MapFrom(src => src.SelectedProductUtilization))
                    .ForMember(d => d.CostCentre, m => m.MapFrom(src => src.SelectedCostCentre))
                    .ForMember(d => d.Model, m => m.MapFrom(src => src.SelectedVehicleModel))
                    .ForMember(d => d.BranchCd, m => m.MapFrom(src => src.SelectedBranchCd))
                    .ForMember(d => d.DivisionCd, m => m.MapFrom(src => src.SelectedDivisionCode))
                    .ForMember(d => d.DeptCd, m => m.MapFrom(src => src.SelectedDeptCd))
                    .ForMember(d => d.BlockedDate, m => m.MapFrom(src => !string.IsNullOrEmpty(src.BlockedDate) ? NumberExtensions.ConvertDatetimeDB(src.BlockedDate) : DateTime.MinValue))
                    ;

            this.CreateMap<CardHolderInfoDTO, CardFinancialInfoModel>()
                .ForMember(d => d.txnLimit, m => m.MapFrom(src => NumberExtensions.CustomNumberFormat(String.Format("{0:0.00}", src.TxnLimit))))
                .ForMember(d => d.litLimit, m => m.MapFrom(src => NumberExtensions.CustomNumberFormat(String.Format("{0:0.00}", src.LitLimit))))
                .ForMember(d => d.PinExceedCnt, m => m.MapFrom(src => NumberExtensions.ConvertInt(src.PINExceedCnt)))
                .ForMember(d => d.PinAttempted, m => m.MapFrom(src => src.PINAttempted))
                .ForMember(d => d.PinTriedUpdDate, m => m.MapFrom(src => NumberExtensions.DateConverter(src.PinTriedUpdDate)))
                .ForMember(d => d.PushAlertInd, m => m.MapFrom(src => NumberExtensions.BoolConverter(src.PushAlertInd)))
                .ForMember(d => d.LocationInd, m => m.MapFrom(src => NumberExtensions.BoolConverter(src.LocationInd)))
                .ForMember(d => d.LocationCheckFlag, m => m.MapFrom(src => NumberExtensions.BoolConverter(src.LocationCheckFlag)))
                .ForMember(d => d.LocationMaxAmt, m => m.MapFrom(src => NumberExtensions.CustomNumberFormat(String.Format("{0:0.00}", src.LocationMaxAmt))))
                .ForMember(d => d.FuelCheckFlag, m => m.MapFrom(src => NumberExtensions.BoolConverter(src.FuelCheckFlag)))
                .ForMember(d => d.FuelLitPerKM, m => m.MapFrom(src => NumberExtensions.CustomNumberFormat(String.Format("{0:0.00}", src.FuelLitPerKM))))
                ;

            this.CreateMap<CardFinancialInfoModel, CardHolderInfoDTO>()
                .ForMember(d => d.TxnLimit, m => m.MapFrom(src => NumberExtensions.ConvertDecimalToDb(src.txnLimit)))
                .ForMember(d => d.LitLimit, m => m.MapFrom(src => NumberExtensions.ConvertDecimalToDb(src.litLimit)))
                .ForMember(d => d.PINExceedCnt, m => m.MapFrom(src => src.PinExceedCnt))
                .ForMember(d => d.PINAttempted, m => m.MapFrom(src => src.PinAttempted))
                .ForMember(d => d.PinTriedUpdDate, m => m.MapFrom(src => NumberExtensions.ConvertDatetimeDB(src.PinTriedUpdDate)))
                .ForMember(d => d.PushAlertInd, m => m.MapFrom(src => src.PushAlertInd == true ? "Y" : "N"))
                .ForMember(d => d.LocationInd, m => m.MapFrom(src => src.LocationInd == true ? "Y" : "N"))
                .ForMember(d => d.LocationCheckFlag, m => m.MapFrom(src => src.LocationCheckFlag == true ? "Y" : "N"))
                .ForMember(d => d.LocationMaxAmt, m => m.MapFrom(src => NumberExtensions.ConvertDecimalToDb(src.LocationMaxAmt)))
                .ForMember(d => d.FuelCheckFlag, m => m.MapFrom(src => src.FuelCheckFlag == true ? "Y" : "N"))
                .ForMember(d => d.FuelLitPerKM, m => m.MapFrom(src => NumberExtensions.ConvertDecimalToDb(src.FuelLitPerKM)))
                ;
            this.CreateMap<PersonalInfoDTO, PersonInfoModel>()
                .ForMember(d => d.SelectedTitle, m => m.MapFrom(src => src.Title))
                .ForMember(d => d.IdNo, m => m.MapFrom(src => src.NewIc))
                .ForMember(d => d.SelectedIdType, m => m.MapFrom(src => src.NewIcType))
                .ForMember(d => d.AltIdNo, m => m.MapFrom(src => src.AlternateIc))
                .ForMember(d => d.SelectedAltIdType, m => m.MapFrom(src => src.AlternateIcType))
                .ForMember(d => d.Selectedgender, m => m.MapFrom(src => src.Gender))
                .ForMember(d => d.DOB, m => m.MapFrom(src => NumberExtensions.DateConverter(src.DOB)))
                .ForMember(d => d.AnnualIncome, m => m.MapFrom(src => NumberExtensions.CustomNumberFormat(String.Format("{0:0.00}", src.Income))))
                .ForMember(d => d.SelectedOccupation, m => m.MapFrom(src => src.Occupation))
                .ForMember(d => d.SelectedDeptId, m => m.MapFrom(src => src.DeptId))
                .ForMember(d => d.DrivingLicense, m => m.MapFrom(src => src.DrivingLic))
                ;
            this.CreateMap<PersonInfoModel, PersonalInfoDTO>()
                .ForMember(d => d.Title, m => m.Ignore())
                .ForMember(d => d.Gender, m => m.Ignore())
                .ForMember(d => d.Occupation, m => m.Ignore())
                .ForMember(d => d.DeptId, m => m.Ignore())
                .ForMember(d => d.Title, m => m.MapFrom(src => src.SelectedTitle))
                .ForMember(d => d.NewIc, m => m.MapFrom(src => src.IdNo))
                .ForMember(d => d.NewIcType, m => m.MapFrom(src => src.SelectedIdType))
                .ForMember(d => d.OldIc, m => m.MapFrom(src => src.AltIdNo))
                .ForMember(d => d.OldIcType, m => m.MapFrom(src => src.SelectedAltIdType))
                .ForMember(d => d.Gender, m => m.MapFrom(src => src.Selectedgender))
                .ForMember(d => d.DOB, m => m.MapFrom(src => NumberExtensions.DateConverterDB(src.DOB)))
                .ForMember(d => d.IncomeBK, m => m.MapFrom(src => src.AnnualIncome))
                .ForMember(d => d.Occupation, m => m.MapFrom(src => src.SelectedOccupation))
                .ForMember(d => d.DeptId, m => m.MapFrom(src => src.SelectedDeptId))
                .ForMember(d => d.DrivingLic, m => m.MapFrom(src => src.DrivingLicense))
                ;
            this.CreateMap<ChangeStatusDTO, ChangeStatus>()
                .ForMember(d => d.SelectedCurrentStatus, m => m.MapFrom(src => src.Sts))
                .ForMember(d => d.SelectedRefType, m => m.MapFrom(src => src.EventType))
                .ForMember(d => d.SelectedReasonCode, m => m.MapFrom(src => src.ReasonCd))
                .ForMember(d => d.CurrentStatus, m => m.MapFrom(src => CustomMapperExtensions.MapIEnumerableToList(src.CurrentStatus)))
                .ForMember(d => d.RefType, m => m.MapFrom(src => CustomMapperExtensions.MapIEnumerableToList(src.RefType)))
                .ForMember(d => d.ReasonCode, m => m.MapFrom(src => CustomMapperExtensions.MapIEnumerableToList(src.ReasonCode)))
                .ForMember(d => d.ChangeStatusTo, m => m.MapFrom(src => CustomMapperExtensions.MapIEnumerableToList(src.ChangeStatusTo)))
                ;
            this.CreateMap<ChangeStatus,ChangeStatusDTO>()
               .ForMember(d => d.Sts, m => m.MapFrom(src => src.SelectedChangeStatusTo))
               .ForMember(d => d.EventType, m => m.MapFrom(src => src.SelectedRefType))
               .ForMember(d => d.ReasonCd, m => m.MapFrom(src => src.SelectedReasonCode))
               .ForMember(d => d.CardNo, m => m.MapFrom(src => src._CardnAccNo.CardNo))
               .ForMember(d => d.MerchAcctNo, m => m.MapFrom(src => src.MerchAcctNo))
               .ForMember(d => d.BusnLocation, m => m.MapFrom(src => src.BusnLocation))
               .ForMember(d => d.AcctNo, m => m.MapFrom(src => src._CardnAccNo.AccNo))
               .ForMember(d => d.CurrentStatus, m => m.MapFrom(src => CustomMapperExtensions.MapIEnumerableToList(src.CurrentStatus)))
               .ForMember(d => d.RefType, m => m.MapFrom(src => CustomMapperExtensions.MapIEnumerableToList(src.RefType)))
               .ForMember(d => d.ReasonCode, m => m.MapFrom(src => CustomMapperExtensions.MapIEnumerableToList(src.ReasonCode)))
               .ForMember(d => d.ChangeStatusTo, m => m.MapFrom(src => CustomMapperExtensions.MapIEnumerableToList(src.ChangeStatusTo)))
               ;
            this.CreateMap<CardReplacementDTO, CardReplacement>()
                .ForMember(d => d.ReasonCd, m => m.Ignore())
                .ForMember(d => d.FeeCd, m => m.Ignore())
                .ForMember(d => d.CardMedia, m => m.Ignore())
                .ForMember(d => d.NewCardNo, m => m.MapFrom(src => src.NewCardNo.HasValue ? Convert.ToString(src.NewCardNo) : ""))
                .ForMember(d => d.XReferenceNo, m => m.MapFrom(src => Convert.ToString(src.PrevCardNo)))
                .ForMember(d => d.ExpiryDate, m => m.MapFrom(src => NumberExtensions.DateConverter(src.CardExpiry)))
                .ForMember(d => d.TerminatedDate, m => m.MapFrom(src => src.TerminatedDate.HasValue ? NumberExtensions.DateConverter(src.TerminatedDate) : ""))
                .ForMember(d => d.SelectedCurrentStatus, m => m.MapFrom(src => src.Sts))
                .ForMember(d => d.SelectedFeeCd, m => m.MapFrom(src => src.FeeCd))
                .ForMember(d => d.SelectedReasonCode, m => m.MapFrom(src => src.ReasonCd))
                .ForMember(d => d.SelectedCardMediaType, m => m.MapFrom(src => src.CardMedia.HasValue ? Convert.ToString(src.CardMedia) : ""))
                ;
            this.CreateMap<CardReplacement, CardReplacementDTO>()
                .ForMember(d => d.ReasonCd, m => m.Ignore())
                .ForMember(d => d.FeeCd, m => m.Ignore())
                .ForMember(d => d.CardMedia, m => m.Ignore())
                .ForMember(d => d.PrevCardNo, m => m.MapFrom(src => Convert.ToInt64(src.CardNo)))
                .ForMember(d => d.CardExpiry, m => m.MapFrom(src => !string.IsNullOrEmpty(src.ExpiryDate) ? NumberExtensions.ConvertDatetimeDB(src.ExpiryDate) : DateTime.MinValue))
                .ForMember(d => d.TerminatedDate, m => m.MapFrom(src => string.IsNullOrEmpty(src.TerminatedDate) ? NumberExtensions.ConvertDatetimeDB(src.TerminatedDate) : DateTime.MinValue))
                .ForMember(d => d.CardMedia, m => m.MapFrom(src => src.SelectedCardMediaType))
                .ForMember(d => d.FeeCd, m => m.MapFrom(src => Convert.ToInt32(src.SelectedFeeCd)))
                .ForMember(d => d.RsCode, m => m.MapFrom(src => src.SelectedReasonCode))
                ;
            this.CreateMap<LocationAcceptDTO, LocationAcceptListModel>()
                .ForMember(d => d.SelectedStates, m => m.Ignore())
                .ForMember(d => d._CardnAccNo, m => m.Ignore())
                .ForMember(d => d.DBAName, m => m.MapFrom(src => src.DBA_Name))
                .ForMember(d => d.s_state, m => m.MapFrom(src => src.DBA_City))
                .ForMember(d => d.UserId, m => m.MapFrom(src => src.UserId))
                .ForMember(d => d.CreationDate, m => m.MapFrom(src => src.CreationDate))
                .ForMember(d => d.SiteId, m => m.MapFrom(src => src.SiteId))
                .ForMember(d => d.BusnLoc, m => m.MapFrom(src => src.MerchantId))
                .ForMember(d => d.SelectedStates, m => m.MapFrom(s => CustomMapperExtensions.MapIEnumerableToList(s.SelectedStates)))
                .ForMember(d => d.SelectedBusnLocations, m => m.MapFrom(s => CustomMapperExtensions.MapIEnumerableToList(s.SelectedBusnLocations)))
                ;
            this.CreateMap<LocationAcceptListModel, LocationAcceptDTO>()
                .ForMember(d => d.SelectedStates, m => m.Ignore())
                .ForMember(d => d.DBA_Name, m => m.MapFrom(src => src.DBAName))
                .ForMember(d => d.DBA_City, m => m.MapFrom(src => src.s_state))
                .ForMember(d => d.UserId, m => m.MapFrom(src => src.UserId))
                .ForMember(d => d.CreationDate, m => m.MapFrom(src => src.CreationDate))
                .ForMember(d => d.SiteId, m => m.MapFrom(src => src.SiteId))
                .ForMember(d => d.MerchantId, m => m.MapFrom(src => src.BusnLoc))
                .ForMember(d => d.SelectedStates, m => m.MapFrom(s => CustomMapperExtensions.MapIEnumerableToList(s.SelectedStates)))
                .ForMember(d => d.SelectedBusnLocations, m => m.MapFrom(s => CustomMapperExtensions.MapIEnumerableToList(s.SelectedBusnLocations)))
                ;
            this.CreateMap<CardListDTO, CardHolderInfoModel>()
                .ForMember(d => d.CardType, m => m.Ignore())
                .ForMember(d => d.ReasonCd, m => m.Ignore())
                .ForMember(d => d.PINInd, m => m.Ignore())
                .ForMember(d => d.DialogueInd, m => m.Ignore())
                .ForMember(d => d.RenewalInd, m => m.Ignore())
                .ForMember(d => d.SKDSNo, m => m.Ignore())
                .ForMember(d => d.CostCentre, m => m.Ignore())
                .ForMember(d => d.BranchCd, m => m.Ignore())
                .ForMember(d => d.DeptCd, m => m.Ignore())
                .ForMember(d => d.CardMedia, m => m.Ignore())
                .ForMember(d => d.EmbossName, m => m.MapFrom(src => src.EmbName))
                .ForMember(d => d.SelectedCurrentStatus, m => m.MapFrom(src => src.Sts))
                .ForMember(d => d.XRefCardNo, m => m.MapFrom(src => Convert.ToInt64(src.XrefCardNo)))
                .ForMember(d => d.SelectedCardType, m => m.MapFrom(src => src.CardType))
                .ForMember(d => d.SelectedPINInd, m => m.MapFrom(src => src.PINInd))
                .ForMember(d => d.vehRegNo, m => m.MapFrom(src => src.VehRegsNo))
                .ForMember(d => d.SKDSQuota, m => m.MapFrom(src => src.SKDSQuota))
                .ForMember(d => d.SelectedSKDSNo, m => m.MapFrom(src => src.SKDSNo))
                .ForMember(d => d.BlockedDate, m => m.MapFrom(src => NumberExtensions.DateTimeConverter(src.BlockedDate)))
                .ForMember(d => d.DriverCd, m => m.MapFrom(src => src.DriverName))
                .ForMember(d => d.TerminatedDate, m => m.MapFrom(src => src.TerminatedDate.HasValue ? NumberExtensions.DateTimeConverter(src.TerminatedDate):""))
                .ForMember(d => d.SelectedCostCentre, m => m.MapFrom(src => src.CostCenter))
                ;
        }
    }
}